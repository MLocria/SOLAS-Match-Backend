// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Organisation.proto

#ifndef PROTOBUF_Organisation_2eproto__INCLUDED
#define PROTOBUF_Organisation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Organisation_2eproto();
void protobuf_AssignDesc_Organisation_2eproto();
void protobuf_ShutdownFile_Organisation_2eproto();

class Organisation;

// ===================================================================

class Organisation : public ::google::protobuf::Message {
 public:
  Organisation();
  virtual ~Organisation();
  
  Organisation(const Organisation& from);
  
  inline Organisation& operator=(const Organisation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Organisation& default_instance();
  
  void Swap(Organisation* other);
  
  // implements Message ----------------------------------------------
  
  Organisation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Organisation& from);
  void MergeFrom(const Organisation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string home_page = 3;
  inline bool has_home_page() const;
  inline void clear_home_page();
  static const int kHomePageFieldNumber = 3;
  inline const ::std::string& home_page() const;
  inline void set_home_page(const ::std::string& value);
  inline void set_home_page(const char* value);
  inline void set_home_page(const char* value, size_t size);
  inline ::std::string* mutable_home_page();
  inline ::std::string* release_home_page();
  
  // optional string biography = 4;
  inline bool has_biography() const;
  inline void clear_biography();
  static const int kBiographyFieldNumber = 4;
  inline const ::std::string& biography() const;
  inline void set_biography(const ::std::string& value);
  inline void set_biography(const char* value);
  inline void set_biography(const char* value, size_t size);
  inline ::std::string* mutable_biography();
  inline ::std::string* release_biography();
  
  // @@protoc_insertion_point(class_scope:Organisation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_home_page();
  inline void clear_has_home_page();
  inline void set_has_biography();
  inline void clear_has_biography();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* home_page_;
  ::std::string* biography_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Organisation_2eproto();
  friend void protobuf_AssignDesc_Organisation_2eproto();
  friend void protobuf_ShutdownFile_Organisation_2eproto();
  
  void InitAsDefaultInstance();
  static Organisation* default_instance_;
};
// ===================================================================


// ===================================================================

// Organisation

// required int32 id = 1;
inline bool Organisation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Organisation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Organisation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Organisation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Organisation::id() const {
  return id_;
}
inline void Organisation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Organisation::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Organisation::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Organisation::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Organisation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Organisation::name() const {
  return *name_;
}
inline void Organisation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Organisation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Organisation::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Organisation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Organisation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string home_page = 3;
inline bool Organisation::has_home_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Organisation::set_has_home_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Organisation::clear_has_home_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Organisation::clear_home_page() {
  if (home_page_ != &::google::protobuf::internal::kEmptyString) {
    home_page_->clear();
  }
  clear_has_home_page();
}
inline const ::std::string& Organisation::home_page() const {
  return *home_page_;
}
inline void Organisation::set_home_page(const ::std::string& value) {
  set_has_home_page();
  if (home_page_ == &::google::protobuf::internal::kEmptyString) {
    home_page_ = new ::std::string;
  }
  home_page_->assign(value);
}
inline void Organisation::set_home_page(const char* value) {
  set_has_home_page();
  if (home_page_ == &::google::protobuf::internal::kEmptyString) {
    home_page_ = new ::std::string;
  }
  home_page_->assign(value);
}
inline void Organisation::set_home_page(const char* value, size_t size) {
  set_has_home_page();
  if (home_page_ == &::google::protobuf::internal::kEmptyString) {
    home_page_ = new ::std::string;
  }
  home_page_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Organisation::mutable_home_page() {
  set_has_home_page();
  if (home_page_ == &::google::protobuf::internal::kEmptyString) {
    home_page_ = new ::std::string;
  }
  return home_page_;
}
inline ::std::string* Organisation::release_home_page() {
  clear_has_home_page();
  if (home_page_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = home_page_;
    home_page_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string biography = 4;
inline bool Organisation::has_biography() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Organisation::set_has_biography() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Organisation::clear_has_biography() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Organisation::clear_biography() {
  if (biography_ != &::google::protobuf::internal::kEmptyString) {
    biography_->clear();
  }
  clear_has_biography();
}
inline const ::std::string& Organisation::biography() const {
  return *biography_;
}
inline void Organisation::set_biography(const ::std::string& value) {
  set_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    biography_ = new ::std::string;
  }
  biography_->assign(value);
}
inline void Organisation::set_biography(const char* value) {
  set_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    biography_ = new ::std::string;
  }
  biography_->assign(value);
}
inline void Organisation::set_biography(const char* value, size_t size) {
  set_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    biography_ = new ::std::string;
  }
  biography_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Organisation::mutable_biography() {
  set_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    biography_ = new ::std::string;
  }
  return biography_;
}
inline ::std::string* Organisation::release_biography() {
  clear_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = biography_;
    biography_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Organisation_2eproto__INCLUDED
