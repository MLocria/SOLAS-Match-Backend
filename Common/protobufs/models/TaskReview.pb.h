// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskReview.proto

#ifndef PROTOBUF_TaskReview_2eproto__INCLUDED
#define PROTOBUF_TaskReview_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TaskReview_2eproto();
void protobuf_AssignDesc_TaskReview_2eproto();
void protobuf_ShutdownFile_TaskReview_2eproto();

class TaskReview;

// ===================================================================

class TaskReview : public ::google::protobuf::Message {
 public:
  TaskReview();
  virtual ~TaskReview();

  TaskReview(const TaskReview& from);

  inline TaskReview& operator=(const TaskReview& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskReview& default_instance();

  void Swap(TaskReview* other);

  // implements Message ----------------------------------------------

  TaskReview* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskReview& from);
  void MergeFrom(const TaskReview& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 project_id = 1;
  inline bool has_project_id() const;
  inline void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  inline ::google::protobuf::int32 project_id() const;
  inline void set_project_id(::google::protobuf::int32 value);

  // optional int32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // optional int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional int32 corrections = 4;
  inline bool has_corrections() const;
  inline void clear_corrections();
  static const int kCorrectionsFieldNumber = 4;
  inline ::google::protobuf::int32 corrections() const;
  inline void set_corrections(::google::protobuf::int32 value);

  // optional int32 grammar = 5;
  inline bool has_grammar() const;
  inline void clear_grammar();
  static const int kGrammarFieldNumber = 5;
  inline ::google::protobuf::int32 grammar() const;
  inline void set_grammar(::google::protobuf::int32 value);

  // optional int32 spelling = 6;
  inline bool has_spelling() const;
  inline void clear_spelling();
  static const int kSpellingFieldNumber = 6;
  inline ::google::protobuf::int32 spelling() const;
  inline void set_spelling(::google::protobuf::int32 value);

  // optional int32 consistency = 7;
  inline bool has_consistency() const;
  inline void clear_consistency();
  static const int kConsistencyFieldNumber = 7;
  inline ::google::protobuf::int32 consistency() const;
  inline void set_consistency(::google::protobuf::int32 value);

  // optional string comment = 8;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 8;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:TaskReview)
 private:
  inline void set_has_project_id();
  inline void clear_has_project_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_corrections();
  inline void clear_has_corrections();
  inline void set_has_grammar();
  inline void clear_has_grammar();
  inline void set_has_spelling();
  inline void clear_has_spelling();
  inline void set_has_consistency();
  inline void clear_has_consistency();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 project_id_;
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 corrections_;
  ::google::protobuf::int32 grammar_;
  ::google::protobuf::int32 spelling_;
  ::std::string* comment_;
  ::google::protobuf::int32 consistency_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_TaskReview_2eproto();
  friend void protobuf_AssignDesc_TaskReview_2eproto();
  friend void protobuf_ShutdownFile_TaskReview_2eproto();

  void InitAsDefaultInstance();
  static TaskReview* default_instance_;
};
// ===================================================================


// ===================================================================

// TaskReview

// optional int32 project_id = 1;
inline bool TaskReview::has_project_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskReview::set_has_project_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskReview::clear_has_project_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskReview::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
inline ::google::protobuf::int32 TaskReview::project_id() const {
  return project_id_;
}
inline void TaskReview::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
}

// optional int32 task_id = 2;
inline bool TaskReview::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskReview::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskReview::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskReview::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 TaskReview::task_id() const {
  return task_id_;
}
inline void TaskReview::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional int32 user_id = 3;
inline bool TaskReview::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskReview::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskReview::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskReview::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 TaskReview::user_id() const {
  return user_id_;
}
inline void TaskReview::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 corrections = 4;
inline bool TaskReview::has_corrections() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskReview::set_has_corrections() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskReview::clear_has_corrections() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskReview::clear_corrections() {
  corrections_ = 0;
  clear_has_corrections();
}
inline ::google::protobuf::int32 TaskReview::corrections() const {
  return corrections_;
}
inline void TaskReview::set_corrections(::google::protobuf::int32 value) {
  set_has_corrections();
  corrections_ = value;
}

// optional int32 grammar = 5;
inline bool TaskReview::has_grammar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskReview::set_has_grammar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskReview::clear_has_grammar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskReview::clear_grammar() {
  grammar_ = 0;
  clear_has_grammar();
}
inline ::google::protobuf::int32 TaskReview::grammar() const {
  return grammar_;
}
inline void TaskReview::set_grammar(::google::protobuf::int32 value) {
  set_has_grammar();
  grammar_ = value;
}

// optional int32 spelling = 6;
inline bool TaskReview::has_spelling() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskReview::set_has_spelling() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskReview::clear_has_spelling() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskReview::clear_spelling() {
  spelling_ = 0;
  clear_has_spelling();
}
inline ::google::protobuf::int32 TaskReview::spelling() const {
  return spelling_;
}
inline void TaskReview::set_spelling(::google::protobuf::int32 value) {
  set_has_spelling();
  spelling_ = value;
}

// optional int32 consistency = 7;
inline bool TaskReview::has_consistency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskReview::set_has_consistency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TaskReview::clear_has_consistency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TaskReview::clear_consistency() {
  consistency_ = 0;
  clear_has_consistency();
}
inline ::google::protobuf::int32 TaskReview::consistency() const {
  return consistency_;
}
inline void TaskReview::set_consistency(::google::protobuf::int32 value) {
  set_has_consistency();
  consistency_ = value;
}

// optional string comment = 8;
inline bool TaskReview::has_comment() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TaskReview::set_has_comment() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TaskReview::clear_has_comment() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TaskReview::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& TaskReview::comment() const {
  return *comment_;
}
inline void TaskReview::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void TaskReview::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void TaskReview::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskReview::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* TaskReview::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskReview::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TaskReview_2eproto__INCLUDED
