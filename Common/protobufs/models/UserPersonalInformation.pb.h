// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserPersonalInformation.proto

#ifndef PROTOBUF_UserPersonalInformation_2eproto__INCLUDED
#define PROTOBUF_UserPersonalInformation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserPersonalInformation_2eproto();
void protobuf_AssignDesc_UserPersonalInformation_2eproto();
void protobuf_ShutdownFile_UserPersonalInformation_2eproto();

class UserPersonalInformation;

// ===================================================================

class UserPersonalInformation : public ::google::protobuf::Message {
 public:
  UserPersonalInformation();
  virtual ~UserPersonalInformation();

  UserPersonalInformation(const UserPersonalInformation& from);

  inline UserPersonalInformation& operator=(const UserPersonalInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPersonalInformation& default_instance();

  void Swap(UserPersonalInformation* other);

  // implements Message ----------------------------------------------

  UserPersonalInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPersonalInformation& from);
  void MergeFrom(const UserPersonalInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string firstName = 3;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstNameFieldNumber = 3;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // optional string lastName = 4;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastNameFieldNumber = 4;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // optional string mobileNumber = 5;
  inline bool has_mobilenumber() const;
  inline void clear_mobilenumber();
  static const int kMobileNumberFieldNumber = 5;
  inline const ::std::string& mobilenumber() const;
  inline void set_mobilenumber(const ::std::string& value);
  inline void set_mobilenumber(const char* value);
  inline void set_mobilenumber(const char* value, size_t size);
  inline ::std::string* mutable_mobilenumber();
  inline ::std::string* release_mobilenumber();
  inline void set_allocated_mobilenumber(::std::string* mobilenumber);

  // optional string businessNumber = 6;
  inline bool has_businessnumber() const;
  inline void clear_businessnumber();
  static const int kBusinessNumberFieldNumber = 6;
  inline const ::std::string& businessnumber() const;
  inline void set_businessnumber(const ::std::string& value);
  inline void set_businessnumber(const char* value);
  inline void set_businessnumber(const char* value, size_t size);
  inline ::std::string* mutable_businessnumber();
  inline ::std::string* release_businessnumber();
  inline void set_allocated_businessnumber(::std::string* businessnumber);

  // optional string sip = 7;
  inline bool has_sip() const;
  inline void clear_sip();
  static const int kSipFieldNumber = 7;
  inline const ::std::string& sip() const;
  inline void set_sip(const ::std::string& value);
  inline void set_sip(const char* value);
  inline void set_sip(const char* value, size_t size);
  inline ::std::string* mutable_sip();
  inline ::std::string* release_sip();
  inline void set_allocated_sip(::std::string* sip);

  // optional string jobTitle = 8;
  inline bool has_jobtitle() const;
  inline void clear_jobtitle();
  static const int kJobTitleFieldNumber = 8;
  inline const ::std::string& jobtitle() const;
  inline void set_jobtitle(const ::std::string& value);
  inline void set_jobtitle(const char* value);
  inline void set_jobtitle(const char* value, size_t size);
  inline ::std::string* mutable_jobtitle();
  inline ::std::string* release_jobtitle();
  inline void set_allocated_jobtitle(::std::string* jobtitle);

  // optional string address = 9;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 9;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional string city = 10;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 10;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string country = 11;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 11;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // @@protoc_insertion_point(class_scope:UserPersonalInformation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_mobilenumber();
  inline void clear_has_mobilenumber();
  inline void set_has_businessnumber();
  inline void clear_has_businessnumber();
  inline void set_has_sip();
  inline void clear_has_sip();
  inline void set_has_jobtitle();
  inline void clear_has_jobtitle();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 userid_;
  ::std::string* firstname_;
  ::std::string* lastname_;
  ::std::string* mobilenumber_;
  ::std::string* businessnumber_;
  ::std::string* sip_;
  ::std::string* jobtitle_;
  ::std::string* address_;
  ::std::string* city_;
  ::std::string* country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_UserPersonalInformation_2eproto();
  friend void protobuf_AssignDesc_UserPersonalInformation_2eproto();
  friend void protobuf_ShutdownFile_UserPersonalInformation_2eproto();

  void InitAsDefaultInstance();
  static UserPersonalInformation* default_instance_;
};
// ===================================================================


// ===================================================================

// UserPersonalInformation

// optional int32 id = 1;
inline bool UserPersonalInformation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPersonalInformation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPersonalInformation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPersonalInformation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserPersonalInformation::id() const {
  return id_;
}
inline void UserPersonalInformation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userId = 2;
inline bool UserPersonalInformation::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPersonalInformation::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPersonalInformation::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPersonalInformation::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserPersonalInformation::userid() const {
  return userid_;
}
inline void UserPersonalInformation::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string firstName = 3;
inline bool UserPersonalInformation::has_firstname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPersonalInformation::set_has_firstname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPersonalInformation::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPersonalInformation::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& UserPersonalInformation::firstname() const {
  return *firstname_;
}
inline void UserPersonalInformation::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void UserPersonalInformation::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void UserPersonalInformation::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* UserPersonalInformation::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lastName = 4;
inline bool UserPersonalInformation::has_lastname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPersonalInformation::set_has_lastname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPersonalInformation::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPersonalInformation::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
}
inline const ::std::string& UserPersonalInformation::lastname() const {
  return *lastname_;
}
inline void UserPersonalInformation::set_lastname(const ::std::string& value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void UserPersonalInformation::set_lastname(const char* value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void UserPersonalInformation::set_lastname(const char* value, size_t size) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_lastname() {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* UserPersonalInformation::release_lastname() {
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_lastname(::std::string* lastname) {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mobileNumber = 5;
inline bool UserPersonalInformation::has_mobilenumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserPersonalInformation::set_has_mobilenumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserPersonalInformation::clear_has_mobilenumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserPersonalInformation::clear_mobilenumber() {
  if (mobilenumber_ != &::google::protobuf::internal::kEmptyString) {
    mobilenumber_->clear();
  }
  clear_has_mobilenumber();
}
inline const ::std::string& UserPersonalInformation::mobilenumber() const {
  return *mobilenumber_;
}
inline void UserPersonalInformation::set_mobilenumber(const ::std::string& value) {
  set_has_mobilenumber();
  if (mobilenumber_ == &::google::protobuf::internal::kEmptyString) {
    mobilenumber_ = new ::std::string;
  }
  mobilenumber_->assign(value);
}
inline void UserPersonalInformation::set_mobilenumber(const char* value) {
  set_has_mobilenumber();
  if (mobilenumber_ == &::google::protobuf::internal::kEmptyString) {
    mobilenumber_ = new ::std::string;
  }
  mobilenumber_->assign(value);
}
inline void UserPersonalInformation::set_mobilenumber(const char* value, size_t size) {
  set_has_mobilenumber();
  if (mobilenumber_ == &::google::protobuf::internal::kEmptyString) {
    mobilenumber_ = new ::std::string;
  }
  mobilenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_mobilenumber() {
  set_has_mobilenumber();
  if (mobilenumber_ == &::google::protobuf::internal::kEmptyString) {
    mobilenumber_ = new ::std::string;
  }
  return mobilenumber_;
}
inline ::std::string* UserPersonalInformation::release_mobilenumber() {
  clear_has_mobilenumber();
  if (mobilenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobilenumber_;
    mobilenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_mobilenumber(::std::string* mobilenumber) {
  if (mobilenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete mobilenumber_;
  }
  if (mobilenumber) {
    set_has_mobilenumber();
    mobilenumber_ = mobilenumber;
  } else {
    clear_has_mobilenumber();
    mobilenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string businessNumber = 6;
inline bool UserPersonalInformation::has_businessnumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserPersonalInformation::set_has_businessnumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserPersonalInformation::clear_has_businessnumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserPersonalInformation::clear_businessnumber() {
  if (businessnumber_ != &::google::protobuf::internal::kEmptyString) {
    businessnumber_->clear();
  }
  clear_has_businessnumber();
}
inline const ::std::string& UserPersonalInformation::businessnumber() const {
  return *businessnumber_;
}
inline void UserPersonalInformation::set_businessnumber(const ::std::string& value) {
  set_has_businessnumber();
  if (businessnumber_ == &::google::protobuf::internal::kEmptyString) {
    businessnumber_ = new ::std::string;
  }
  businessnumber_->assign(value);
}
inline void UserPersonalInformation::set_businessnumber(const char* value) {
  set_has_businessnumber();
  if (businessnumber_ == &::google::protobuf::internal::kEmptyString) {
    businessnumber_ = new ::std::string;
  }
  businessnumber_->assign(value);
}
inline void UserPersonalInformation::set_businessnumber(const char* value, size_t size) {
  set_has_businessnumber();
  if (businessnumber_ == &::google::protobuf::internal::kEmptyString) {
    businessnumber_ = new ::std::string;
  }
  businessnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_businessnumber() {
  set_has_businessnumber();
  if (businessnumber_ == &::google::protobuf::internal::kEmptyString) {
    businessnumber_ = new ::std::string;
  }
  return businessnumber_;
}
inline ::std::string* UserPersonalInformation::release_businessnumber() {
  clear_has_businessnumber();
  if (businessnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = businessnumber_;
    businessnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_businessnumber(::std::string* businessnumber) {
  if (businessnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete businessnumber_;
  }
  if (businessnumber) {
    set_has_businessnumber();
    businessnumber_ = businessnumber;
  } else {
    clear_has_businessnumber();
    businessnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sip = 7;
inline bool UserPersonalInformation::has_sip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserPersonalInformation::set_has_sip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserPersonalInformation::clear_has_sip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserPersonalInformation::clear_sip() {
  if (sip_ != &::google::protobuf::internal::kEmptyString) {
    sip_->clear();
  }
  clear_has_sip();
}
inline const ::std::string& UserPersonalInformation::sip() const {
  return *sip_;
}
inline void UserPersonalInformation::set_sip(const ::std::string& value) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(value);
}
inline void UserPersonalInformation::set_sip(const char* value) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(value);
}
inline void UserPersonalInformation::set_sip(const char* value, size_t size) {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  sip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_sip() {
  set_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    sip_ = new ::std::string;
  }
  return sip_;
}
inline ::std::string* UserPersonalInformation::release_sip() {
  clear_has_sip();
  if (sip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sip_;
    sip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_sip(::std::string* sip) {
  if (sip_ != &::google::protobuf::internal::kEmptyString) {
    delete sip_;
  }
  if (sip) {
    set_has_sip();
    sip_ = sip;
  } else {
    clear_has_sip();
    sip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string jobTitle = 8;
inline bool UserPersonalInformation::has_jobtitle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserPersonalInformation::set_has_jobtitle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserPersonalInformation::clear_has_jobtitle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserPersonalInformation::clear_jobtitle() {
  if (jobtitle_ != &::google::protobuf::internal::kEmptyString) {
    jobtitle_->clear();
  }
  clear_has_jobtitle();
}
inline const ::std::string& UserPersonalInformation::jobtitle() const {
  return *jobtitle_;
}
inline void UserPersonalInformation::set_jobtitle(const ::std::string& value) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::kEmptyString) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(value);
}
inline void UserPersonalInformation::set_jobtitle(const char* value) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::kEmptyString) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(value);
}
inline void UserPersonalInformation::set_jobtitle(const char* value, size_t size) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::kEmptyString) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_jobtitle() {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::kEmptyString) {
    jobtitle_ = new ::std::string;
  }
  return jobtitle_;
}
inline ::std::string* UserPersonalInformation::release_jobtitle() {
  clear_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jobtitle_;
    jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_jobtitle(::std::string* jobtitle) {
  if (jobtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete jobtitle_;
  }
  if (jobtitle) {
    set_has_jobtitle();
    jobtitle_ = jobtitle;
  } else {
    clear_has_jobtitle();
    jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 9;
inline bool UserPersonalInformation::has_address() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserPersonalInformation::set_has_address() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserPersonalInformation::clear_has_address() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserPersonalInformation::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& UserPersonalInformation::address() const {
  return *address_;
}
inline void UserPersonalInformation::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void UserPersonalInformation::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void UserPersonalInformation::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* UserPersonalInformation::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city = 10;
inline bool UserPersonalInformation::has_city() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserPersonalInformation::set_has_city() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserPersonalInformation::clear_has_city() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserPersonalInformation::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& UserPersonalInformation::city() const {
  return *city_;
}
inline void UserPersonalInformation::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void UserPersonalInformation::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void UserPersonalInformation::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* UserPersonalInformation::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string country = 11;
inline bool UserPersonalInformation::has_country() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserPersonalInformation::set_has_country() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserPersonalInformation::clear_has_country() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserPersonalInformation::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& UserPersonalInformation::country() const {
  return *country_;
}
inline void UserPersonalInformation::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void UserPersonalInformation::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void UserPersonalInformation::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserPersonalInformation::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* UserPersonalInformation::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserPersonalInformation::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserPersonalInformation_2eproto__INCLUDED
