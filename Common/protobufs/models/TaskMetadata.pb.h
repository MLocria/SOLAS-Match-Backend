// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskMetadata.proto

#ifndef PROTOBUF_TaskMetadata_2eproto__INCLUDED
#define PROTOBUF_TaskMetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TaskMetadata_2eproto();
void protobuf_AssignDesc_TaskMetadata_2eproto();
void protobuf_ShutdownFile_TaskMetadata_2eproto();

class TaskMetadata;

// ===================================================================

class TaskMetadata : public ::google::protobuf::Message {
 public:
  TaskMetadata();
  virtual ~TaskMetadata();
  
  TaskMetadata(const TaskMetadata& from);
  
  inline TaskMetadata& operator=(const TaskMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskMetadata& default_instance();
  
  void Swap(TaskMetadata* other);
  
  // implements Message ----------------------------------------------
  
  TaskMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskMetadata& from);
  void MergeFrom(const TaskMetadata& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // optional string filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  
  // optional string content_type = 4;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 4;
  inline const ::std::string& content_type() const;
  inline void set_content_type(const ::std::string& value);
  inline void set_content_type(const char* value);
  inline void set_content_type(const char* value, size_t size);
  inline ::std::string* mutable_content_type();
  inline ::std::string* release_content_type();
  
  // optional int32 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // optional string upload_time = 6;
  inline bool has_upload_time() const;
  inline void clear_upload_time();
  static const int kUploadTimeFieldNumber = 6;
  inline const ::std::string& upload_time() const;
  inline void set_upload_time(const ::std::string& value);
  inline void set_upload_time(const char* value);
  inline void set_upload_time(const char* value, size_t size);
  inline ::std::string* mutable_upload_time();
  inline ::std::string* release_upload_time();
  
  // @@protoc_insertion_point(class_scope:TaskMetadata)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_content_type();
  inline void clear_has_content_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_upload_time();
  inline void clear_has_upload_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 version_;
  ::std::string* filename_;
  ::std::string* content_type_;
  ::std::string* upload_time_;
  ::google::protobuf::int32 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_TaskMetadata_2eproto();
  friend void protobuf_AssignDesc_TaskMetadata_2eproto();
  friend void protobuf_ShutdownFile_TaskMetadata_2eproto();
  
  void InitAsDefaultInstance();
  static TaskMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

// TaskMetadata

// optional int32 id = 1;
inline bool TaskMetadata::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskMetadata::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskMetadata::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskMetadata::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TaskMetadata::id() const {
  return id_;
}
inline void TaskMetadata::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 version = 2;
inline bool TaskMetadata::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskMetadata::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskMetadata::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskMetadata::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 TaskMetadata::version() const {
  return version_;
}
inline void TaskMetadata::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string filename = 3;
inline bool TaskMetadata::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskMetadata::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskMetadata::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskMetadata::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& TaskMetadata::filename() const {
  return *filename_;
}
inline void TaskMetadata::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void TaskMetadata::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void TaskMetadata::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskMetadata::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* TaskMetadata::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content_type = 4;
inline bool TaskMetadata::has_content_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskMetadata::set_has_content_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskMetadata::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskMetadata::clear_content_type() {
  if (content_type_ != &::google::protobuf::internal::kEmptyString) {
    content_type_->clear();
  }
  clear_has_content_type();
}
inline const ::std::string& TaskMetadata::content_type() const {
  return *content_type_;
}
inline void TaskMetadata::set_content_type(const ::std::string& value) {
  set_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(value);
}
inline void TaskMetadata::set_content_type(const char* value) {
  set_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(value);
}
inline void TaskMetadata::set_content_type(const char* value, size_t size) {
  set_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskMetadata::mutable_content_type() {
  set_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    content_type_ = new ::std::string;
  }
  return content_type_;
}
inline ::std::string* TaskMetadata::release_content_type() {
  clear_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_type_;
    content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 user_id = 5;
inline bool TaskMetadata::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskMetadata::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskMetadata::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskMetadata::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 TaskMetadata::user_id() const {
  return user_id_;
}
inline void TaskMetadata::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string upload_time = 6;
inline bool TaskMetadata::has_upload_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskMetadata::set_has_upload_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskMetadata::clear_has_upload_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskMetadata::clear_upload_time() {
  if (upload_time_ != &::google::protobuf::internal::kEmptyString) {
    upload_time_->clear();
  }
  clear_has_upload_time();
}
inline const ::std::string& TaskMetadata::upload_time() const {
  return *upload_time_;
}
inline void TaskMetadata::set_upload_time(const ::std::string& value) {
  set_has_upload_time();
  if (upload_time_ == &::google::protobuf::internal::kEmptyString) {
    upload_time_ = new ::std::string;
  }
  upload_time_->assign(value);
}
inline void TaskMetadata::set_upload_time(const char* value) {
  set_has_upload_time();
  if (upload_time_ == &::google::protobuf::internal::kEmptyString) {
    upload_time_ = new ::std::string;
  }
  upload_time_->assign(value);
}
inline void TaskMetadata::set_upload_time(const char* value, size_t size) {
  set_has_upload_time();
  if (upload_time_ == &::google::protobuf::internal::kEmptyString) {
    upload_time_ = new ::std::string;
  }
  upload_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskMetadata::mutable_upload_time() {
  set_has_upload_time();
  if (upload_time_ == &::google::protobuf::internal::kEmptyString) {
    upload_time_ = new ::std::string;
  }
  return upload_time_;
}
inline ::std::string* TaskMetadata::release_upload_time() {
  clear_has_upload_time();
  if (upload_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = upload_time_;
    upload_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TaskMetadata_2eproto__INCLUDED
