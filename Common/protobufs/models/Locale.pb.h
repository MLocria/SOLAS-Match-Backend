// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Locale.proto

#ifndef PROTOBUF_Locale_2eproto__INCLUDED
#define PROTOBUF_Locale_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Locale_2eproto();
void protobuf_AssignDesc_Locale_2eproto();
void protobuf_ShutdownFile_Locale_2eproto();

class Locale;

// ===================================================================

class Locale : public ::google::protobuf::Message {
 public:
  Locale();
  virtual ~Locale();
  
  Locale(const Locale& from);
  
  inline Locale& operator=(const Locale& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Locale& default_instance();
  
  void Swap(Locale* other);
  
  // implements Message ----------------------------------------------
  
  Locale* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Locale& from);
  void MergeFrom(const Locale& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string languageName = 1;
  inline bool has_languagename() const;
  inline void clear_languagename();
  static const int kLanguageNameFieldNumber = 1;
  inline const ::std::string& languagename() const;
  inline void set_languagename(const ::std::string& value);
  inline void set_languagename(const char* value);
  inline void set_languagename(const char* value, size_t size);
  inline ::std::string* mutable_languagename();
  inline ::std::string* release_languagename();
  
  // optional string languageCode = 2;
  inline bool has_languagecode() const;
  inline void clear_languagecode();
  static const int kLanguageCodeFieldNumber = 2;
  inline const ::std::string& languagecode() const;
  inline void set_languagecode(const ::std::string& value);
  inline void set_languagecode(const char* value);
  inline void set_languagecode(const char* value, size_t size);
  inline ::std::string* mutable_languagecode();
  inline ::std::string* release_languagecode();
  
  // optional string countryName = 3;
  inline bool has_countryname() const;
  inline void clear_countryname();
  static const int kCountryNameFieldNumber = 3;
  inline const ::std::string& countryname() const;
  inline void set_countryname(const ::std::string& value);
  inline void set_countryname(const char* value);
  inline void set_countryname(const char* value, size_t size);
  inline ::std::string* mutable_countryname();
  inline ::std::string* release_countryname();
  
  // optional string countryCode = 4;
  inline bool has_countrycode() const;
  inline void clear_countrycode();
  static const int kCountryCodeFieldNumber = 4;
  inline const ::std::string& countrycode() const;
  inline void set_countrycode(const ::std::string& value);
  inline void set_countrycode(const char* value);
  inline void set_countrycode(const char* value, size_t size);
  inline ::std::string* mutable_countrycode();
  inline ::std::string* release_countrycode();
  
  // @@protoc_insertion_point(class_scope:Locale)
 private:
  inline void set_has_languagename();
  inline void clear_has_languagename();
  inline void set_has_languagecode();
  inline void clear_has_languagecode();
  inline void set_has_countryname();
  inline void clear_has_countryname();
  inline void set_has_countrycode();
  inline void clear_has_countrycode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* languagename_;
  ::std::string* languagecode_;
  ::std::string* countryname_;
  ::std::string* countrycode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Locale_2eproto();
  friend void protobuf_AssignDesc_Locale_2eproto();
  friend void protobuf_ShutdownFile_Locale_2eproto();
  
  void InitAsDefaultInstance();
  static Locale* default_instance_;
};
// ===================================================================


// ===================================================================

// Locale

// optional string languageName = 1;
inline bool Locale::has_languagename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Locale::set_has_languagename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Locale::clear_has_languagename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Locale::clear_languagename() {
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    languagename_->clear();
  }
  clear_has_languagename();
}
inline const ::std::string& Locale::languagename() const {
  return *languagename_;
}
inline void Locale::set_languagename(const ::std::string& value) {
  set_has_languagename();
  if (languagename_ == &::google::protobuf::internal::kEmptyString) {
    languagename_ = new ::std::string;
  }
  languagename_->assign(value);
}
inline void Locale::set_languagename(const char* value) {
  set_has_languagename();
  if (languagename_ == &::google::protobuf::internal::kEmptyString) {
    languagename_ = new ::std::string;
  }
  languagename_->assign(value);
}
inline void Locale::set_languagename(const char* value, size_t size) {
  set_has_languagename();
  if (languagename_ == &::google::protobuf::internal::kEmptyString) {
    languagename_ = new ::std::string;
  }
  languagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Locale::mutable_languagename() {
  set_has_languagename();
  if (languagename_ == &::google::protobuf::internal::kEmptyString) {
    languagename_ = new ::std::string;
  }
  return languagename_;
}
inline ::std::string* Locale::release_languagename() {
  clear_has_languagename();
  if (languagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = languagename_;
    languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string languageCode = 2;
inline bool Locale::has_languagecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Locale::set_has_languagecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Locale::clear_has_languagecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Locale::clear_languagecode() {
  if (languagecode_ != &::google::protobuf::internal::kEmptyString) {
    languagecode_->clear();
  }
  clear_has_languagecode();
}
inline const ::std::string& Locale::languagecode() const {
  return *languagecode_;
}
inline void Locale::set_languagecode(const ::std::string& value) {
  set_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    languagecode_ = new ::std::string;
  }
  languagecode_->assign(value);
}
inline void Locale::set_languagecode(const char* value) {
  set_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    languagecode_ = new ::std::string;
  }
  languagecode_->assign(value);
}
inline void Locale::set_languagecode(const char* value, size_t size) {
  set_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    languagecode_ = new ::std::string;
  }
  languagecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Locale::mutable_languagecode() {
  set_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    languagecode_ = new ::std::string;
  }
  return languagecode_;
}
inline ::std::string* Locale::release_languagecode() {
  clear_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = languagecode_;
    languagecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string countryName = 3;
inline bool Locale::has_countryname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Locale::set_has_countryname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Locale::clear_has_countryname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Locale::clear_countryname() {
  if (countryname_ != &::google::protobuf::internal::kEmptyString) {
    countryname_->clear();
  }
  clear_has_countryname();
}
inline const ::std::string& Locale::countryname() const {
  return *countryname_;
}
inline void Locale::set_countryname(const ::std::string& value) {
  set_has_countryname();
  if (countryname_ == &::google::protobuf::internal::kEmptyString) {
    countryname_ = new ::std::string;
  }
  countryname_->assign(value);
}
inline void Locale::set_countryname(const char* value) {
  set_has_countryname();
  if (countryname_ == &::google::protobuf::internal::kEmptyString) {
    countryname_ = new ::std::string;
  }
  countryname_->assign(value);
}
inline void Locale::set_countryname(const char* value, size_t size) {
  set_has_countryname();
  if (countryname_ == &::google::protobuf::internal::kEmptyString) {
    countryname_ = new ::std::string;
  }
  countryname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Locale::mutable_countryname() {
  set_has_countryname();
  if (countryname_ == &::google::protobuf::internal::kEmptyString) {
    countryname_ = new ::std::string;
  }
  return countryname_;
}
inline ::std::string* Locale::release_countryname() {
  clear_has_countryname();
  if (countryname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = countryname_;
    countryname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string countryCode = 4;
inline bool Locale::has_countrycode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Locale::set_has_countrycode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Locale::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Locale::clear_countrycode() {
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    countrycode_->clear();
  }
  clear_has_countrycode();
}
inline const ::std::string& Locale::countrycode() const {
  return *countrycode_;
}
inline void Locale::set_countrycode(const ::std::string& value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void Locale::set_countrycode(const char* value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void Locale::set_countrycode(const char* value, size_t size) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Locale::mutable_countrycode() {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  return countrycode_;
}
inline ::std::string* Locale::release_countrycode() {
  clear_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = countrycode_;
    countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Locale_2eproto__INCLUDED
