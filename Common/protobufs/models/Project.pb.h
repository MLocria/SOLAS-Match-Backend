// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Project.proto

#ifndef PROTOBUF_Project_2eproto__INCLUDED
#define PROTOBUF_Project_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Locale.pb.h"
#include "Tag.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Project_2eproto();
void protobuf_AssignDesc_Project_2eproto();
void protobuf_ShutdownFile_Project_2eproto();

class Project;

// ===================================================================

class Project : public ::google::protobuf::Message {
 public:
  Project();
  virtual ~Project();
  
  Project(const Project& from);
  
  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Project& default_instance();
  
  void Swap(Project* other);
  
  // implements Message ----------------------------------------------
  
  Project* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string deadline = 4;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 4;
  inline const ::std::string& deadline() const;
  inline void set_deadline(const ::std::string& value);
  inline void set_deadline(const char* value);
  inline void set_deadline(const char* value, size_t size);
  inline ::std::string* mutable_deadline();
  inline ::std::string* release_deadline();
  
  // optional int32 organisationId = 5;
  inline bool has_organisationid() const;
  inline void clear_organisationid();
  static const int kOrganisationIdFieldNumber = 5;
  inline ::google::protobuf::int32 organisationid() const;
  inline void set_organisationid(::google::protobuf::int32 value);
  
  // optional string impact = 6;
  inline bool has_impact() const;
  inline void clear_impact();
  static const int kImpactFieldNumber = 6;
  inline const ::std::string& impact() const;
  inline void set_impact(const ::std::string& value);
  inline void set_impact(const char* value);
  inline void set_impact(const char* value, size_t size);
  inline ::std::string* mutable_impact();
  inline ::std::string* release_impact();
  
  // optional string reference = 7;
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 7;
  inline const ::std::string& reference() const;
  inline void set_reference(const ::std::string& value);
  inline void set_reference(const char* value);
  inline void set_reference(const char* value, size_t size);
  inline ::std::string* mutable_reference();
  inline ::std::string* release_reference();
  
  // optional int32 wordCount = 8;
  inline bool has_wordcount() const;
  inline void clear_wordcount();
  static const int kWordCountFieldNumber = 8;
  inline ::google::protobuf::int32 wordcount() const;
  inline void set_wordcount(::google::protobuf::int32 value);
  
  // optional string createdTime = 9;
  inline bool has_createdtime() const;
  inline void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 9;
  inline const ::std::string& createdtime() const;
  inline void set_createdtime(const ::std::string& value);
  inline void set_createdtime(const char* value);
  inline void set_createdtime(const char* value, size_t size);
  inline ::std::string* mutable_createdtime();
  inline ::std::string* release_createdtime();
  
  // optional string status = 10;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 10;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional .Locale sourceLocale = 11;
  inline bool has_sourcelocale() const;
  inline void clear_sourcelocale();
  static const int kSourceLocaleFieldNumber = 11;
  inline const ::Locale& sourcelocale() const;
  inline ::Locale* mutable_sourcelocale();
  inline ::Locale* release_sourcelocale();
  
  // repeated .Tag tag = 12;
  inline int tag_size() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 12;
  inline const ::Tag& tag(int index) const;
  inline ::Tag* mutable_tag(int index);
  inline ::Tag* add_tag();
  inline const ::google::protobuf::RepeatedPtrField< ::Tag >&
      tag() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tag >*
      mutable_tag();
  
  // @@protoc_insertion_point(class_scope:Project)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_organisationid();
  inline void clear_has_organisationid();
  inline void set_has_impact();
  inline void clear_has_impact();
  inline void set_has_reference();
  inline void clear_has_reference();
  inline void set_has_wordcount();
  inline void clear_has_wordcount();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_sourcelocale();
  inline void clear_has_sourcelocale();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* description_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 organisationid_;
  ::std::string* deadline_;
  ::std::string* impact_;
  ::std::string* reference_;
  ::std::string* createdtime_;
  ::std::string* status_;
  ::Locale* sourcelocale_;
  ::google::protobuf::RepeatedPtrField< ::Tag > tag_;
  ::google::protobuf::int32 wordcount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_Project_2eproto();
  friend void protobuf_AssignDesc_Project_2eproto();
  friend void protobuf_ShutdownFile_Project_2eproto();
  
  void InitAsDefaultInstance();
  static Project* default_instance_;
};
// ===================================================================


// ===================================================================

// Project

// optional int32 id = 1;
inline bool Project::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Project::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Project::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Project::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Project::id() const {
  return id_;
}
inline void Project::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string title = 2;
inline bool Project::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Project::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Project::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Project::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Project::title() const {
  return *title_;
}
inline void Project::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Project::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Project::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Project::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string description = 3;
inline bool Project::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Project::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Project::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Project::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Project::description() const {
  return *description_;
}
inline void Project::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Project::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Project::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Project::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deadline = 4;
inline bool Project::has_deadline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Project::set_has_deadline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Project::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Project::clear_deadline() {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    deadline_->clear();
  }
  clear_has_deadline();
}
inline const ::std::string& Project::deadline() const {
  return *deadline_;
}
inline void Project::set_deadline(const ::std::string& value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void Project::set_deadline(const char* value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void Project::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_deadline() {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  return deadline_;
}
inline ::std::string* Project::release_deadline() {
  clear_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deadline_;
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 organisationId = 5;
inline bool Project::has_organisationid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Project::set_has_organisationid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Project::clear_has_organisationid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Project::clear_organisationid() {
  organisationid_ = 0;
  clear_has_organisationid();
}
inline ::google::protobuf::int32 Project::organisationid() const {
  return organisationid_;
}
inline void Project::set_organisationid(::google::protobuf::int32 value) {
  set_has_organisationid();
  organisationid_ = value;
}

// optional string impact = 6;
inline bool Project::has_impact() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Project::set_has_impact() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Project::clear_has_impact() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Project::clear_impact() {
  if (impact_ != &::google::protobuf::internal::kEmptyString) {
    impact_->clear();
  }
  clear_has_impact();
}
inline const ::std::string& Project::impact() const {
  return *impact_;
}
inline void Project::set_impact(const ::std::string& value) {
  set_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    impact_ = new ::std::string;
  }
  impact_->assign(value);
}
inline void Project::set_impact(const char* value) {
  set_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    impact_ = new ::std::string;
  }
  impact_->assign(value);
}
inline void Project::set_impact(const char* value, size_t size) {
  set_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    impact_ = new ::std::string;
  }
  impact_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_impact() {
  set_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    impact_ = new ::std::string;
  }
  return impact_;
}
inline ::std::string* Project::release_impact() {
  clear_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = impact_;
    impact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string reference = 7;
inline bool Project::has_reference() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Project::set_has_reference() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Project::clear_has_reference() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Project::clear_reference() {
  if (reference_ != &::google::protobuf::internal::kEmptyString) {
    reference_->clear();
  }
  clear_has_reference();
}
inline const ::std::string& Project::reference() const {
  return *reference_;
}
inline void Project::set_reference(const ::std::string& value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
}
inline void Project::set_reference(const char* value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
}
inline void Project::set_reference(const char* value, size_t size) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_reference() {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  return reference_;
}
inline ::std::string* Project::release_reference() {
  clear_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reference_;
    reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 wordCount = 8;
inline bool Project::has_wordcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Project::set_has_wordcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Project::clear_has_wordcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Project::clear_wordcount() {
  wordcount_ = 0;
  clear_has_wordcount();
}
inline ::google::protobuf::int32 Project::wordcount() const {
  return wordcount_;
}
inline void Project::set_wordcount(::google::protobuf::int32 value) {
  set_has_wordcount();
  wordcount_ = value;
}

// optional string createdTime = 9;
inline bool Project::has_createdtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Project::set_has_createdtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Project::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Project::clear_createdtime() {
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    createdtime_->clear();
  }
  clear_has_createdtime();
}
inline const ::std::string& Project::createdtime() const {
  return *createdtime_;
}
inline void Project::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void Project::set_createdtime(const char* value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void Project::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_createdtime() {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  return createdtime_;
}
inline ::std::string* Project::release_createdtime() {
  clear_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdtime_;
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string status = 10;
inline bool Project::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Project::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Project::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Project::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& Project::status() const {
  return *status_;
}
inline void Project::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void Project::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void Project::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Project::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* Project::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Locale sourceLocale = 11;
inline bool Project::has_sourcelocale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Project::set_has_sourcelocale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Project::clear_has_sourcelocale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Project::clear_sourcelocale() {
  if (sourcelocale_ != NULL) sourcelocale_->::Locale::Clear();
  clear_has_sourcelocale();
}
inline const ::Locale& Project::sourcelocale() const {
  return sourcelocale_ != NULL ? *sourcelocale_ : *default_instance_->sourcelocale_;
}
inline ::Locale* Project::mutable_sourcelocale() {
  set_has_sourcelocale();
  if (sourcelocale_ == NULL) sourcelocale_ = new ::Locale;
  return sourcelocale_;
}
inline ::Locale* Project::release_sourcelocale() {
  clear_has_sourcelocale();
  ::Locale* temp = sourcelocale_;
  sourcelocale_ = NULL;
  return temp;
}

// repeated .Tag tag = 12;
inline int Project::tag_size() const {
  return tag_.size();
}
inline void Project::clear_tag() {
  tag_.Clear();
}
inline const ::Tag& Project::tag(int index) const {
  return tag_.Get(index);
}
inline ::Tag* Project::mutable_tag(int index) {
  return tag_.Mutable(index);
}
inline ::Tag* Project::add_tag() {
  return tag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tag >&
Project::tag() const {
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tag >*
Project::mutable_tag() {
  return &tag_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Project_2eproto__INCLUDED
