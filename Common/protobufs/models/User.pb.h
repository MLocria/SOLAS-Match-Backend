// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef PROTOBUF_User_2eproto__INCLUDED
#define PROTOBUF_User_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_User_2eproto();
void protobuf_AssignDesc_User_2eproto();
void protobuf_ShutdownFile_User_2eproto();

class User;

// ===================================================================

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();
  
  User(const User& from);
  
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();
  
  void Swap(User* other);
  
  // implements Message ----------------------------------------------
  
  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);
  
  // optional string display_name = 2;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  
  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  
  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string biography = 5;
  inline bool has_biography() const;
  inline void clear_biography();
  static const int kBiographyFieldNumber = 5;
  inline const ::std::string& biography() const;
  inline void set_biography(const ::std::string& value);
  inline void set_biography(const char* value);
  inline void set_biography(const char* value, size_t size);
  inline ::std::string* mutable_biography();
  inline ::std::string* release_biography();
  
  // optional string nonce = 6;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 6;
  inline const ::std::string& nonce() const;
  inline void set_nonce(const ::std::string& value);
  inline void set_nonce(const char* value);
  inline void set_nonce(const char* value, size_t size);
  inline ::std::string* mutable_nonce();
  inline ::std::string* release_nonce();
  
  // optional string created_time = 7;
  inline bool has_created_time() const;
  inline void clear_created_time();
  static const int kCreatedTimeFieldNumber = 7;
  inline const ::std::string& created_time() const;
  inline void set_created_time(const ::std::string& value);
  inline void set_created_time(const char* value);
  inline void set_created_time(const char* value, size_t size);
  inline ::std::string* mutable_created_time();
  inline ::std::string* release_created_time();
  
  // optional int32 native_lang_id = 8;
  inline bool has_native_lang_id() const;
  inline void clear_native_lang_id();
  static const int kNativeLangIdFieldNumber = 8;
  inline ::google::protobuf::int32 native_lang_id() const;
  inline void set_native_lang_id(::google::protobuf::int32 value);
  
  // optional int32 native_region_id = 9;
  inline bool has_native_region_id() const;
  inline void clear_native_region_id();
  static const int kNativeRegionIdFieldNumber = 9;
  inline ::google::protobuf::int32 native_region_id() const;
  inline void set_native_region_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:User)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_biography();
  inline void clear_has_biography();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_created_time();
  inline void clear_has_created_time();
  inline void set_has_native_lang_id();
  inline void clear_has_native_lang_id();
  inline void set_has_native_region_id();
  inline void clear_has_native_region_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* display_name_;
  ::std::string* email_;
  ::std::string* password_;
  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 native_lang_id_;
  ::std::string* biography_;
  ::std::string* nonce_;
  ::std::string* created_time_;
  ::google::protobuf::int32 native_region_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();
  
  void InitAsDefaultInstance();
  static User* default_instance_;
};
// ===================================================================


// ===================================================================

// User

// required int32 user_id = 1;
inline bool User::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 User::user_id() const {
  return user_id_;
}
inline void User::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string display_name = 2;
inline bool User::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_display_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& User::display_name() const {
  return *display_name_;
}
inline void User::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void User::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void User::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  return display_name_;
}
inline ::std::string* User::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string email = 3;
inline bool User::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& User::email() const {
  return *email_;
}
inline void User::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void User::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void User::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* User::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 4;
inline bool User::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& User::password() const {
  return *password_;
}
inline void User::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void User::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void User::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* User::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string biography = 5;
inline bool User::has_biography() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_biography() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_biography() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_biography() {
  if (biography_ != &::google::protobuf::internal::kEmptyString) {
    biography_->clear();
  }
  clear_has_biography();
}
inline const ::std::string& User::biography() const {
  return *biography_;
}
inline void User::set_biography(const ::std::string& value) {
  set_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    biography_ = new ::std::string;
  }
  biography_->assign(value);
}
inline void User::set_biography(const char* value) {
  set_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    biography_ = new ::std::string;
  }
  biography_->assign(value);
}
inline void User::set_biography(const char* value, size_t size) {
  set_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    biography_ = new ::std::string;
  }
  biography_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_biography() {
  set_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    biography_ = new ::std::string;
  }
  return biography_;
}
inline ::std::string* User::release_biography() {
  clear_has_biography();
  if (biography_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = biography_;
    biography_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string nonce = 6;
inline bool User::has_nonce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_nonce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_nonce() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    nonce_->clear();
  }
  clear_has_nonce();
}
inline const ::std::string& User::nonce() const {
  return *nonce_;
}
inline void User::set_nonce(const ::std::string& value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void User::set_nonce(const char* value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void User::set_nonce(const char* value, size_t size) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_nonce() {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  return nonce_;
}
inline ::std::string* User::release_nonce() {
  clear_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nonce_;
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string created_time = 7;
inline bool User::has_created_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_created_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_created_time() {
  if (created_time_ != &::google::protobuf::internal::kEmptyString) {
    created_time_->clear();
  }
  clear_has_created_time();
}
inline const ::std::string& User::created_time() const {
  return *created_time_;
}
inline void User::set_created_time(const ::std::string& value) {
  set_has_created_time();
  if (created_time_ == &::google::protobuf::internal::kEmptyString) {
    created_time_ = new ::std::string;
  }
  created_time_->assign(value);
}
inline void User::set_created_time(const char* value) {
  set_has_created_time();
  if (created_time_ == &::google::protobuf::internal::kEmptyString) {
    created_time_ = new ::std::string;
  }
  created_time_->assign(value);
}
inline void User::set_created_time(const char* value, size_t size) {
  set_has_created_time();
  if (created_time_ == &::google::protobuf::internal::kEmptyString) {
    created_time_ = new ::std::string;
  }
  created_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_created_time() {
  set_has_created_time();
  if (created_time_ == &::google::protobuf::internal::kEmptyString) {
    created_time_ = new ::std::string;
  }
  return created_time_;
}
inline ::std::string* User::release_created_time() {
  clear_has_created_time();
  if (created_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = created_time_;
    created_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 native_lang_id = 8;
inline bool User::has_native_lang_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void User::set_has_native_lang_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void User::clear_has_native_lang_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void User::clear_native_lang_id() {
  native_lang_id_ = 0;
  clear_has_native_lang_id();
}
inline ::google::protobuf::int32 User::native_lang_id() const {
  return native_lang_id_;
}
inline void User::set_native_lang_id(::google::protobuf::int32 value) {
  set_has_native_lang_id();
  native_lang_id_ = value;
}

// optional int32 native_region_id = 9;
inline bool User::has_native_region_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void User::set_has_native_region_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void User::clear_has_native_region_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void User::clear_native_region_id() {
  native_region_id_ = 0;
  clear_has_native_region_id();
}
inline ::google::protobuf::int32 User::native_region_id() const {
  return native_region_id_;
}
inline void User::set_native_region_id(::google::protobuf::int32 value) {
  set_has_native_region_id();
  native_region_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_User_2eproto__INCLUDED
