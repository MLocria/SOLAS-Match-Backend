// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerResponse.proto

#ifndef PROTOBUF_ServerResponse_2eproto__INCLUDED
#define PROTOBUF_ServerResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServerResponse_2eproto();
void protobuf_AssignDesc_ServerResponse_2eproto();
void protobuf_ShutdownFile_ServerResponse_2eproto();

class ServerResponse;

// ===================================================================

class ServerResponse : public ::google::protobuf::Message {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  void Swap(ServerResponse* other);

  // implements Message ----------------------------------------------

  ServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_message = 1;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // optional string response_text = 2;
  inline bool has_response_text() const;
  inline void clear_response_text();
  static const int kResponseTextFieldNumber = 2;
  inline const ::std::string& response_text() const;
  inline void set_response_text(const ::std::string& value);
  inline void set_response_text(const char* value);
  inline void set_response_text(const char* value, size_t size);
  inline ::std::string* mutable_response_text();
  inline ::std::string* release_response_text();
  inline void set_allocated_response_text(::std::string* response_text);

  // @@protoc_insertion_point(class_scope:ServerResponse)
 private:
  inline void set_has_error_message();
  inline void clear_has_error_message();
  inline void set_has_response_text();
  inline void clear_has_response_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_message_;
  ::std::string* response_text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ServerResponse_2eproto();
  friend void protobuf_AssignDesc_ServerResponse_2eproto();
  friend void protobuf_ShutdownFile_ServerResponse_2eproto();

  void InitAsDefaultInstance();
  static ServerResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerResponse

// optional string error_message = 1;
inline bool ServerResponse::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerResponse::set_has_error_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerResponse::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerResponse::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& ServerResponse::error_message() const {
  return *error_message_;
}
inline void ServerResponse::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ServerResponse::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void ServerResponse::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerResponse::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* ServerResponse::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string response_text = 2;
inline bool ServerResponse::has_response_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerResponse::set_has_response_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerResponse::clear_has_response_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerResponse::clear_response_text() {
  if (response_text_ != &::google::protobuf::internal::kEmptyString) {
    response_text_->clear();
  }
  clear_has_response_text();
}
inline const ::std::string& ServerResponse::response_text() const {
  return *response_text_;
}
inline void ServerResponse::set_response_text(const ::std::string& value) {
  set_has_response_text();
  if (response_text_ == &::google::protobuf::internal::kEmptyString) {
    response_text_ = new ::std::string;
  }
  response_text_->assign(value);
}
inline void ServerResponse::set_response_text(const char* value) {
  set_has_response_text();
  if (response_text_ == &::google::protobuf::internal::kEmptyString) {
    response_text_ = new ::std::string;
  }
  response_text_->assign(value);
}
inline void ServerResponse::set_response_text(const char* value, size_t size) {
  set_has_response_text();
  if (response_text_ == &::google::protobuf::internal::kEmptyString) {
    response_text_ = new ::std::string;
  }
  response_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerResponse::mutable_response_text() {
  set_has_response_text();
  if (response_text_ == &::google::protobuf::internal::kEmptyString) {
    response_text_ = new ::std::string;
  }
  return response_text_;
}
inline ::std::string* ServerResponse::release_response_text() {
  clear_has_response_text();
  if (response_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_text_;
    response_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerResponse::set_allocated_response_text(::std::string* response_text) {
  if (response_text_ != &::google::protobuf::internal::kEmptyString) {
    delete response_text_;
  }
  if (response_text) {
    set_has_response_text();
    response_text_ = response_text;
  } else {
    clear_has_response_text();
    response_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerResponse_2eproto__INCLUDED
