// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef PROTOBUF_Task_2eproto__INCLUDED
#define PROTOBUF_Task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Locale.pb.h"
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Task_2eproto();
void protobuf_AssignDesc_Task_2eproto();
void protobuf_ShutdownFile_Task_2eproto();

class Task;

// ===================================================================

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  inline Task* New() const { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 projectId = 2;
  bool has_projectid() const;
  void clear_projectid();
  static const int kProjectIdFieldNumber = 2;
  ::google::protobuf::int32 projectid() const;
  void set_projectid(::google::protobuf::int32 value);

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string comment = 4;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 4;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional string deadline = 5;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 5;
  const ::std::string& deadline() const;
  void set_deadline(const ::std::string& value);
  void set_deadline(const char* value);
  void set_deadline(const char* value, size_t size);
  ::std::string* mutable_deadline();
  ::std::string* release_deadline();
  void set_allocated_deadline(::std::string* deadline);

  // optional int32 wordCount = 6;
  bool has_wordcount() const;
  void clear_wordcount();
  static const int kWordCountFieldNumber = 6;
  ::google::protobuf::int32 wordcount() const;
  void set_wordcount(::google::protobuf::int32 value);

  // optional string createdTime = 7;
  bool has_createdtime() const;
  void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 7;
  const ::std::string& createdtime() const;
  void set_createdtime(const ::std::string& value);
  void set_createdtime(const char* value);
  void set_createdtime(const char* value, size_t size);
  ::std::string* mutable_createdtime();
  ::std::string* release_createdtime();
  void set_allocated_createdtime(::std::string* createdtime);

  // optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 8;
  bool has_sourcelocale() const;
  void clear_sourcelocale();
  static const int kSourceLocaleFieldNumber = 8;
  const ::SolasMatch::Common::Protobufs::Models::Locale& sourcelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* release_sourcelocale();
  void set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);

  // optional .SolasMatch.Common.Protobufs.Models.Locale targetLocale = 9;
  bool has_targetlocale() const;
  void clear_targetlocale();
  static const int kTargetLocaleFieldNumber = 9;
  const ::SolasMatch::Common::Protobufs::Models::Locale& targetlocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_targetlocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* release_targetlocale();
  void set_allocated_targetlocale(::SolasMatch::Common::Protobufs::Models::Locale* targetlocale);

  // optional int32 taskType = 10;
  bool has_tasktype() const;
  void clear_tasktype();
  static const int kTaskTypeFieldNumber = 10;
  ::google::protobuf::int32 tasktype() const;
  void set_tasktype(::google::protobuf::int32 value);

  // optional int32 taskStatus = 11;
  bool has_taskstatus() const;
  void clear_taskstatus();
  static const int kTaskStatusFieldNumber = 11;
  ::google::protobuf::int32 taskstatus() const;
  void set_taskstatus(::google::protobuf::int32 value);

  // optional bool published = 12;
  bool has_published() const;
  void clear_published();
  static const int kPublishedFieldNumber = 12;
  bool published() const;
  void set_published(bool value);

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.Task)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_wordcount();
  inline void clear_has_wordcount();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_sourcelocale();
  inline void clear_has_sourcelocale();
  inline void set_has_targetlocale();
  inline void clear_has_targetlocale();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_taskstatus();
  inline void clear_has_taskstatus();
  inline void set_has_published();
  inline void clear_has_published();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 projectid_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr deadline_;
  ::google::protobuf::internal::ArenaStringPtr createdtime_;
  ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale_;
  ::google::protobuf::int32 wordcount_;
  ::google::protobuf::int32 tasktype_;
  ::SolasMatch::Common::Protobufs::Models::Locale* targetlocale_;
  ::google::protobuf::int32 taskstatus_;
  bool published_;
  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Task

// optional int32 id = 1;
inline bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Task::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.id)
  return id_;
}
inline void Task::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.id)
}

// optional int32 projectId = 2;
inline bool Task::has_projectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_projectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_projectid() {
  projectid_ = 0;
  clear_has_projectid();
}
inline ::google::protobuf::int32 Task::projectid() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.projectId)
  return projectid_;
}
inline void Task::set_projectid(::google::protobuf::int32 value) {
  set_has_projectid();
  projectid_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.projectId)
}

// optional string title = 3;
inline bool Task::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Task::title() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.title)
}
inline void Task::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Task.title)
}
inline void Task::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Task.title)
}
inline ::std::string* Task::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_title() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.title)
}

// optional string comment = 4;
inline bool Task::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& Task::comment() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.comment)
}
inline void Task::set_comment(const char* value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Task.comment)
}
inline void Task::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Task.comment)
}
inline ::std::string* Task::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_comment() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.comment)
}

// optional string deadline = 5;
inline bool Task::has_deadline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_deadline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_deadline() {
  deadline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deadline();
}
inline const ::std::string& Task::deadline() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.deadline)
  return deadline_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_deadline(const ::std::string& value) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.deadline)
}
inline void Task::set_deadline(const char* value) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Task.deadline)
}
inline void Task::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Task.deadline)
}
inline ::std::string* Task::mutable_deadline() {
  set_has_deadline();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.deadline)
  return deadline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_deadline() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.deadline)
  clear_has_deadline();
  return deadline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_deadline(::std::string* deadline) {
  if (deadline != NULL) {
    set_has_deadline();
  } else {
    clear_has_deadline();
  }
  deadline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deadline);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.deadline)
}

// optional int32 wordCount = 6;
inline bool Task::has_wordcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_wordcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_wordcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_wordcount() {
  wordcount_ = 0;
  clear_has_wordcount();
}
inline ::google::protobuf::int32 Task::wordcount() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.wordCount)
  return wordcount_;
}
inline void Task::set_wordcount(::google::protobuf::int32 value) {
  set_has_wordcount();
  wordcount_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.wordCount)
}

// optional string createdTime = 7;
inline bool Task::has_createdtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_createdtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_createdtime() {
  createdtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createdtime();
}
inline const ::std::string& Task::createdtime() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.createdTime)
  return createdtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  createdtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}
inline void Task::set_createdtime(const char* value) {
  set_has_createdtime();
  createdtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}
inline void Task::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  createdtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}
inline ::std::string* Task::mutable_createdtime() {
  set_has_createdtime();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.createdTime)
  return createdtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_createdtime() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.createdTime)
  clear_has_createdtime();
  return createdtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_createdtime(::std::string* createdtime) {
  if (createdtime != NULL) {
    set_has_createdtime();
  } else {
    clear_has_createdtime();
  }
  createdtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdtime);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 8;
inline bool Task::has_sourcelocale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Task::set_has_sourcelocale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Task::clear_has_sourcelocale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Task::clear_sourcelocale() {
  if (sourcelocale_ != NULL) sourcelocale_->::SolasMatch::Common::Protobufs::Models::Locale::Clear();
  clear_has_sourcelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& Task::sourcelocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
  return sourcelocale_ != NULL ? *sourcelocale_ : *default_instance_->sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::mutable_sourcelocale() {
  set_has_sourcelocale();
  if (sourcelocale_ == NULL) {
    sourcelocale_ = new ::SolasMatch::Common::Protobufs::Models::Locale;
  }
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
  return sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::release_sourcelocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
  clear_has_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = sourcelocale_;
  sourcelocale_ = NULL;
  return temp;
}
inline void Task::set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  delete sourcelocale_;
  sourcelocale_ = sourcelocale;
  if (sourcelocale) {
    set_has_sourcelocale();
  } else {
    clear_has_sourcelocale();
  }
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale targetLocale = 9;
inline bool Task::has_targetlocale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Task::set_has_targetlocale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Task::clear_has_targetlocale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Task::clear_targetlocale() {
  if (targetlocale_ != NULL) targetlocale_->::SolasMatch::Common::Protobufs::Models::Locale::Clear();
  clear_has_targetlocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& Task::targetlocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
  return targetlocale_ != NULL ? *targetlocale_ : *default_instance_->targetlocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::mutable_targetlocale() {
  set_has_targetlocale();
  if (targetlocale_ == NULL) {
    targetlocale_ = new ::SolasMatch::Common::Protobufs::Models::Locale;
  }
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
  return targetlocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::release_targetlocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
  clear_has_targetlocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = targetlocale_;
  targetlocale_ = NULL;
  return temp;
}
inline void Task::set_allocated_targetlocale(::SolasMatch::Common::Protobufs::Models::Locale* targetlocale) {
  delete targetlocale_;
  targetlocale_ = targetlocale;
  if (targetlocale) {
    set_has_targetlocale();
  } else {
    clear_has_targetlocale();
  }
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
}

// optional int32 taskType = 10;
inline bool Task::has_tasktype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Task::set_has_tasktype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Task::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Task::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::google::protobuf::int32 Task::tasktype() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.taskType)
  return tasktype_;
}
inline void Task::set_tasktype(::google::protobuf::int32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.taskType)
}

// optional int32 taskStatus = 11;
inline bool Task::has_taskstatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Task::set_has_taskstatus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Task::clear_has_taskstatus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Task::clear_taskstatus() {
  taskstatus_ = 0;
  clear_has_taskstatus();
}
inline ::google::protobuf::int32 Task::taskstatus() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.taskStatus)
  return taskstatus_;
}
inline void Task::set_taskstatus(::google::protobuf::int32 value) {
  set_has_taskstatus();
  taskstatus_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.taskStatus)
}

// optional bool published = 12;
inline bool Task::has_published() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Task::set_has_published() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Task::clear_has_published() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Task::clear_published() {
  published_ = false;
  clear_has_published();
}
inline bool Task::published() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.published)
  return published_;
}
inline void Task::set_published(bool value) {
  set_has_published();
  published_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.published)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Task_2eproto__INCLUDED
