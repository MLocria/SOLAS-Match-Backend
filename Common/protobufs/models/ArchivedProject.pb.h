// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArchivedProject.proto

#ifndef PROTOBUF_ArchivedProject_2eproto__INCLUDED
#define PROTOBUF_ArchivedProject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Locale.pb.h"
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ArchivedProject_2eproto();
void protobuf_AssignDesc_ArchivedProject_2eproto();
void protobuf_ShutdownFile_ArchivedProject_2eproto();

class ArchivedProject;

// ===================================================================

class ArchivedProject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.ArchivedProject) */ {
 public:
  ArchivedProject();
  virtual ~ArchivedProject();

  ArchivedProject(const ArchivedProject& from);

  inline ArchivedProject& operator=(const ArchivedProject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArchivedProject& default_instance();

  void Swap(ArchivedProject* other);

  // implements Message ----------------------------------------------

  inline ArchivedProject* New() const { return New(NULL); }

  ArchivedProject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArchivedProject& from);
  void MergeFrom(const ArchivedProject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArchivedProject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string impact = 4;
  bool has_impact() const;
  void clear_impact();
  static const int kImpactFieldNumber = 4;
  const ::std::string& impact() const;
  void set_impact(const ::std::string& value);
  void set_impact(const char* value);
  void set_impact(const char* value, size_t size);
  ::std::string* mutable_impact();
  ::std::string* release_impact();
  void set_allocated_impact(::std::string* impact);

  // optional string deadline = 5;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 5;
  const ::std::string& deadline() const;
  void set_deadline(const ::std::string& value);
  void set_deadline(const char* value);
  void set_deadline(const char* value, size_t size);
  ::std::string* mutable_deadline();
  ::std::string* release_deadline();
  void set_allocated_deadline(::std::string* deadline);

  // optional int32 organisationId = 6;
  bool has_organisationid() const;
  void clear_organisationid();
  static const int kOrganisationIdFieldNumber = 6;
  ::google::protobuf::int32 organisationid() const;
  void set_organisationid(::google::protobuf::int32 value);

  // optional string reference = 7;
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 7;
  const ::std::string& reference() const;
  void set_reference(const ::std::string& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  ::std::string* mutable_reference();
  ::std::string* release_reference();
  void set_allocated_reference(::std::string* reference);

  // optional int32 wordCount = 8;
  bool has_wordcount() const;
  void clear_wordcount();
  static const int kWordCountFieldNumber = 8;
  ::google::protobuf::int32 wordcount() const;
  void set_wordcount(::google::protobuf::int32 value);

  // optional string createdTime = 9;
  bool has_createdtime() const;
  void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 9;
  const ::std::string& createdtime() const;
  void set_createdtime(const ::std::string& value);
  void set_createdtime(const char* value);
  void set_createdtime(const char* value, size_t size);
  ::std::string* mutable_createdtime();
  ::std::string* release_createdtime();
  void set_allocated_createdtime(::std::string* createdtime);

  // optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 10;
  bool has_sourcelocale() const;
  void clear_sourcelocale();
  static const int kSourceLocaleFieldNumber = 10;
  const ::SolasMatch::Common::Protobufs::Models::Locale& sourcelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* release_sourcelocale();
  void set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);

  // optional int32 userIdArchived = 11;
  bool has_useridarchived() const;
  void clear_useridarchived();
  static const int kUserIdArchivedFieldNumber = 11;
  ::google::protobuf::int32 useridarchived() const;
  void set_useridarchived(::google::protobuf::int32 value);

  // optional int32 userIdProjectCreator = 12;
  bool has_useridprojectcreator() const;
  void clear_useridprojectcreator();
  static const int kUserIdProjectCreatorFieldNumber = 12;
  ::google::protobuf::int32 useridprojectcreator() const;
  void set_useridprojectcreator(::google::protobuf::int32 value);

  // optional string fileName = 13;
  bool has_filename() const;
  void clear_filename();
  static const int kFileNameFieldNumber = 13;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional string fileToken = 14;
  bool has_filetoken() const;
  void clear_filetoken();
  static const int kFileTokenFieldNumber = 14;
  const ::std::string& filetoken() const;
  void set_filetoken(const ::std::string& value);
  void set_filetoken(const char* value);
  void set_filetoken(const char* value, size_t size);
  ::std::string* mutable_filetoken();
  ::std::string* release_filetoken();
  void set_allocated_filetoken(::std::string* filetoken);

  // optional string mimeType = 15;
  bool has_mimetype() const;
  void clear_mimetype();
  static const int kMimeTypeFieldNumber = 15;
  const ::std::string& mimetype() const;
  void set_mimetype(const ::std::string& value);
  void set_mimetype(const char* value);
  void set_mimetype(const char* value, size_t size);
  ::std::string* mutable_mimetype();
  ::std::string* release_mimetype();
  void set_allocated_mimetype(::std::string* mimetype);

  // optional string archivedDate = 16;
  bool has_archiveddate() const;
  void clear_archiveddate();
  static const int kArchivedDateFieldNumber = 16;
  const ::std::string& archiveddate() const;
  void set_archiveddate(const ::std::string& value);
  void set_archiveddate(const char* value);
  void set_archiveddate(const char* value, size_t size);
  ::std::string* mutable_archiveddate();
  ::std::string* release_archiveddate();
  void set_allocated_archiveddate(::std::string* archiveddate);

  // optional string tags = 17;
  bool has_tags() const;
  void clear_tags();
  static const int kTagsFieldNumber = 17;
  const ::std::string& tags() const;
  void set_tags(const ::std::string& value);
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  ::std::string* mutable_tags();
  ::std::string* release_tags();
  void set_allocated_tags(::std::string* tags);

  // optional bool imageUploaded = 18;
  bool has_imageuploaded() const;
  void clear_imageuploaded();
  static const int kImageUploadedFieldNumber = 18;
  bool imageuploaded() const;
  void set_imageuploaded(bool value);

  // optional bool imageApproved = 19;
  bool has_imageapproved() const;
  void clear_imageapproved();
  static const int kImageApprovedFieldNumber = 19;
  bool imageapproved() const;
  void set_imageapproved(bool value);

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.ArchivedProject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_impact();
  inline void clear_has_impact();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_organisationid();
  inline void clear_has_organisationid();
  inline void set_has_reference();
  inline void clear_has_reference();
  inline void set_has_wordcount();
  inline void clear_has_wordcount();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_sourcelocale();
  inline void clear_has_sourcelocale();
  inline void set_has_useridarchived();
  inline void clear_has_useridarchived();
  inline void set_has_useridprojectcreator();
  inline void clear_has_useridprojectcreator();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filetoken();
  inline void clear_has_filetoken();
  inline void set_has_mimetype();
  inline void clear_has_mimetype();
  inline void set_has_archiveddate();
  inline void clear_has_archiveddate();
  inline void set_has_tags();
  inline void clear_has_tags();
  inline void set_has_imageuploaded();
  inline void clear_has_imageuploaded();
  inline void set_has_imageapproved();
  inline void clear_has_imageapproved();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 organisationid_;
  ::google::protobuf::internal::ArenaStringPtr impact_;
  ::google::protobuf::internal::ArenaStringPtr deadline_;
  ::google::protobuf::internal::ArenaStringPtr reference_;
  ::google::protobuf::internal::ArenaStringPtr createdtime_;
  ::google::protobuf::int32 wordcount_;
  ::google::protobuf::int32 useridarchived_;
  ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr filetoken_;
  ::google::protobuf::internal::ArenaStringPtr mimetype_;
  ::google::protobuf::internal::ArenaStringPtr archiveddate_;
  ::google::protobuf::int32 useridprojectcreator_;
  bool imageuploaded_;
  bool imageapproved_;
  ::google::protobuf::internal::ArenaStringPtr tags_;
  friend void  protobuf_AddDesc_ArchivedProject_2eproto();
  friend void protobuf_AssignDesc_ArchivedProject_2eproto();
  friend void protobuf_ShutdownFile_ArchivedProject_2eproto();

  void InitAsDefaultInstance();
  static ArchivedProject* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ArchivedProject

// optional int32 id = 1;
inline bool ArchivedProject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArchivedProject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArchivedProject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArchivedProject::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ArchivedProject::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.id)
  return id_;
}
inline void ArchivedProject::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.id)
}

// optional string title = 2;
inline bool ArchivedProject::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArchivedProject::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArchivedProject::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArchivedProject::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& ArchivedProject::title() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.title)
}
inline void ArchivedProject::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.title)
}
inline void ArchivedProject::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.title)
}
inline ::std::string* ArchivedProject::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_title() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.title)
}

// optional string description = 3;
inline bool ArchivedProject::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArchivedProject::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArchivedProject::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArchivedProject::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& ArchivedProject::description() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.description)
}
inline void ArchivedProject::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.description)
}
inline void ArchivedProject::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.description)
}
inline ::std::string* ArchivedProject::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_description() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.description)
}

// optional string impact = 4;
inline bool ArchivedProject::has_impact() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArchivedProject::set_has_impact() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArchivedProject::clear_has_impact() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArchivedProject::clear_impact() {
  impact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_impact();
}
inline const ::std::string& ArchivedProject::impact() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.impact)
  return impact_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_impact(const ::std::string& value) {
  set_has_impact();
  impact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.impact)
}
inline void ArchivedProject::set_impact(const char* value) {
  set_has_impact();
  impact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.impact)
}
inline void ArchivedProject::set_impact(const char* value, size_t size) {
  set_has_impact();
  impact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.impact)
}
inline ::std::string* ArchivedProject::mutable_impact() {
  set_has_impact();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.impact)
  return impact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_impact() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.impact)
  clear_has_impact();
  return impact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_impact(::std::string* impact) {
  if (impact != NULL) {
    set_has_impact();
  } else {
    clear_has_impact();
  }
  impact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impact);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.impact)
}

// optional string deadline = 5;
inline bool ArchivedProject::has_deadline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArchivedProject::set_has_deadline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArchivedProject::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArchivedProject::clear_deadline() {
  deadline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deadline();
}
inline const ::std::string& ArchivedProject::deadline() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.deadline)
  return deadline_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_deadline(const ::std::string& value) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.deadline)
}
inline void ArchivedProject::set_deadline(const char* value) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.deadline)
}
inline void ArchivedProject::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.deadline)
}
inline ::std::string* ArchivedProject::mutable_deadline() {
  set_has_deadline();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.deadline)
  return deadline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_deadline() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.deadline)
  clear_has_deadline();
  return deadline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_deadline(::std::string* deadline) {
  if (deadline != NULL) {
    set_has_deadline();
  } else {
    clear_has_deadline();
  }
  deadline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deadline);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.deadline)
}

// optional int32 organisationId = 6;
inline bool ArchivedProject::has_organisationid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArchivedProject::set_has_organisationid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArchivedProject::clear_has_organisationid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArchivedProject::clear_organisationid() {
  organisationid_ = 0;
  clear_has_organisationid();
}
inline ::google::protobuf::int32 ArchivedProject::organisationid() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.organisationId)
  return organisationid_;
}
inline void ArchivedProject::set_organisationid(::google::protobuf::int32 value) {
  set_has_organisationid();
  organisationid_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.organisationId)
}

// optional string reference = 7;
inline bool ArchivedProject::has_reference() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArchivedProject::set_has_reference() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArchivedProject::clear_has_reference() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArchivedProject::clear_reference() {
  reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reference();
}
inline const ::std::string& ArchivedProject::reference() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.reference)
  return reference_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_reference(const ::std::string& value) {
  set_has_reference();
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.reference)
}
inline void ArchivedProject::set_reference(const char* value) {
  set_has_reference();
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.reference)
}
inline void ArchivedProject::set_reference(const char* value, size_t size) {
  set_has_reference();
  reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.reference)
}
inline ::std::string* ArchivedProject::mutable_reference() {
  set_has_reference();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.reference)
  return reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_reference() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.reference)
  clear_has_reference();
  return reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_reference(::std::string* reference) {
  if (reference != NULL) {
    set_has_reference();
  } else {
    clear_has_reference();
  }
  reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.reference)
}

// optional int32 wordCount = 8;
inline bool ArchivedProject::has_wordcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArchivedProject::set_has_wordcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArchivedProject::clear_has_wordcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArchivedProject::clear_wordcount() {
  wordcount_ = 0;
  clear_has_wordcount();
}
inline ::google::protobuf::int32 ArchivedProject::wordcount() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.wordCount)
  return wordcount_;
}
inline void ArchivedProject::set_wordcount(::google::protobuf::int32 value) {
  set_has_wordcount();
  wordcount_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.wordCount)
}

// optional string createdTime = 9;
inline bool ArchivedProject::has_createdtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArchivedProject::set_has_createdtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArchivedProject::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArchivedProject::clear_createdtime() {
  createdtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createdtime();
}
inline const ::std::string& ArchivedProject::createdtime() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.createdTime)
  return createdtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  createdtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.createdTime)
}
inline void ArchivedProject::set_createdtime(const char* value) {
  set_has_createdtime();
  createdtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.createdTime)
}
inline void ArchivedProject::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  createdtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.createdTime)
}
inline ::std::string* ArchivedProject::mutable_createdtime() {
  set_has_createdtime();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.createdTime)
  return createdtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_createdtime() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.createdTime)
  clear_has_createdtime();
  return createdtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_createdtime(::std::string* createdtime) {
  if (createdtime != NULL) {
    set_has_createdtime();
  } else {
    clear_has_createdtime();
  }
  createdtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdtime);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.createdTime)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 10;
inline bool ArchivedProject::has_sourcelocale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArchivedProject::set_has_sourcelocale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArchivedProject::clear_has_sourcelocale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArchivedProject::clear_sourcelocale() {
  if (sourcelocale_ != NULL) sourcelocale_->::SolasMatch::Common::Protobufs::Models::Locale::Clear();
  clear_has_sourcelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& ArchivedProject::sourcelocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.sourceLocale)
  return sourcelocale_ != NULL ? *sourcelocale_ : *default_instance_->sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedProject::mutable_sourcelocale() {
  set_has_sourcelocale();
  if (sourcelocale_ == NULL) {
    sourcelocale_ = new ::SolasMatch::Common::Protobufs::Models::Locale;
  }
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.sourceLocale)
  return sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedProject::release_sourcelocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.sourceLocale)
  clear_has_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = sourcelocale_;
  sourcelocale_ = NULL;
  return temp;
}
inline void ArchivedProject::set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  delete sourcelocale_;
  sourcelocale_ = sourcelocale;
  if (sourcelocale) {
    set_has_sourcelocale();
  } else {
    clear_has_sourcelocale();
  }
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.sourceLocale)
}

// optional int32 userIdArchived = 11;
inline bool ArchivedProject::has_useridarchived() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ArchivedProject::set_has_useridarchived() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ArchivedProject::clear_has_useridarchived() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ArchivedProject::clear_useridarchived() {
  useridarchived_ = 0;
  clear_has_useridarchived();
}
inline ::google::protobuf::int32 ArchivedProject::useridarchived() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.userIdArchived)
  return useridarchived_;
}
inline void ArchivedProject::set_useridarchived(::google::protobuf::int32 value) {
  set_has_useridarchived();
  useridarchived_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.userIdArchived)
}

// optional int32 userIdProjectCreator = 12;
inline bool ArchivedProject::has_useridprojectcreator() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ArchivedProject::set_has_useridprojectcreator() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ArchivedProject::clear_has_useridprojectcreator() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ArchivedProject::clear_useridprojectcreator() {
  useridprojectcreator_ = 0;
  clear_has_useridprojectcreator();
}
inline ::google::protobuf::int32 ArchivedProject::useridprojectcreator() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.userIdProjectCreator)
  return useridprojectcreator_;
}
inline void ArchivedProject::set_useridprojectcreator(::google::protobuf::int32 value) {
  set_has_useridprojectcreator();
  useridprojectcreator_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.userIdProjectCreator)
}

// optional string fileName = 13;
inline bool ArchivedProject::has_filename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ArchivedProject::set_has_filename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ArchivedProject::clear_has_filename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ArchivedProject::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& ArchivedProject::filename() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileName)
}
inline void ArchivedProject::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileName)
}
inline void ArchivedProject::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileName)
}
inline ::std::string* ArchivedProject::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_filename() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileName)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileName)
}

// optional string fileToken = 14;
inline bool ArchivedProject::has_filetoken() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ArchivedProject::set_has_filetoken() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ArchivedProject::clear_has_filetoken() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ArchivedProject::clear_filetoken() {
  filetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filetoken();
}
inline const ::std::string& ArchivedProject::filetoken() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileToken)
  return filetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_filetoken(const ::std::string& value) {
  set_has_filetoken();
  filetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileToken)
}
inline void ArchivedProject::set_filetoken(const char* value) {
  set_has_filetoken();
  filetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileToken)
}
inline void ArchivedProject::set_filetoken(const char* value, size_t size) {
  set_has_filetoken();
  filetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileToken)
}
inline ::std::string* ArchivedProject::mutable_filetoken() {
  set_has_filetoken();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileToken)
  return filetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_filetoken() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileToken)
  clear_has_filetoken();
  return filetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_filetoken(::std::string* filetoken) {
  if (filetoken != NULL) {
    set_has_filetoken();
  } else {
    clear_has_filetoken();
  }
  filetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filetoken);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.fileToken)
}

// optional string mimeType = 15;
inline bool ArchivedProject::has_mimetype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ArchivedProject::set_has_mimetype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ArchivedProject::clear_has_mimetype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ArchivedProject::clear_mimetype() {
  mimetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mimetype();
}
inline const ::std::string& ArchivedProject::mimetype() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.mimeType)
  return mimetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_mimetype(const ::std::string& value) {
  set_has_mimetype();
  mimetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.mimeType)
}
inline void ArchivedProject::set_mimetype(const char* value) {
  set_has_mimetype();
  mimetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.mimeType)
}
inline void ArchivedProject::set_mimetype(const char* value, size_t size) {
  set_has_mimetype();
  mimetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.mimeType)
}
inline ::std::string* ArchivedProject::mutable_mimetype() {
  set_has_mimetype();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.mimeType)
  return mimetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_mimetype() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.mimeType)
  clear_has_mimetype();
  return mimetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_mimetype(::std::string* mimetype) {
  if (mimetype != NULL) {
    set_has_mimetype();
  } else {
    clear_has_mimetype();
  }
  mimetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mimetype);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.mimeType)
}

// optional string archivedDate = 16;
inline bool ArchivedProject::has_archiveddate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ArchivedProject::set_has_archiveddate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ArchivedProject::clear_has_archiveddate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ArchivedProject::clear_archiveddate() {
  archiveddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_archiveddate();
}
inline const ::std::string& ArchivedProject::archiveddate() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.archivedDate)
  return archiveddate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_archiveddate(const ::std::string& value) {
  set_has_archiveddate();
  archiveddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.archivedDate)
}
inline void ArchivedProject::set_archiveddate(const char* value) {
  set_has_archiveddate();
  archiveddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.archivedDate)
}
inline void ArchivedProject::set_archiveddate(const char* value, size_t size) {
  set_has_archiveddate();
  archiveddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.archivedDate)
}
inline ::std::string* ArchivedProject::mutable_archiveddate() {
  set_has_archiveddate();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.archivedDate)
  return archiveddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_archiveddate() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.archivedDate)
  clear_has_archiveddate();
  return archiveddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_archiveddate(::std::string* archiveddate) {
  if (archiveddate != NULL) {
    set_has_archiveddate();
  } else {
    clear_has_archiveddate();
  }
  archiveddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), archiveddate);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.archivedDate)
}

// optional string tags = 17;
inline bool ArchivedProject::has_tags() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ArchivedProject::set_has_tags() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ArchivedProject::clear_has_tags() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ArchivedProject::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tags();
}
inline const ::std::string& ArchivedProject::tags() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.tags)
  return tags_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_tags(const ::std::string& value) {
  set_has_tags();
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.tags)
}
inline void ArchivedProject::set_tags(const char* value) {
  set_has_tags();
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedProject.tags)
}
inline void ArchivedProject::set_tags(const char* value, size_t size) {
  set_has_tags();
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedProject.tags)
}
inline ::std::string* ArchivedProject::mutable_tags() {
  set_has_tags();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedProject.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArchivedProject::release_tags() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedProject.tags)
  clear_has_tags();
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArchivedProject::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    set_has_tags();
  } else {
    clear_has_tags();
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedProject.tags)
}

// optional bool imageUploaded = 18;
inline bool ArchivedProject::has_imageuploaded() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ArchivedProject::set_has_imageuploaded() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ArchivedProject::clear_has_imageuploaded() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ArchivedProject::clear_imageuploaded() {
  imageuploaded_ = false;
  clear_has_imageuploaded();
}
inline bool ArchivedProject::imageuploaded() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.imageUploaded)
  return imageuploaded_;
}
inline void ArchivedProject::set_imageuploaded(bool value) {
  set_has_imageuploaded();
  imageuploaded_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.imageUploaded)
}

// optional bool imageApproved = 19;
inline bool ArchivedProject::has_imageapproved() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ArchivedProject::set_has_imageapproved() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ArchivedProject::clear_has_imageapproved() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ArchivedProject::clear_imageapproved() {
  imageapproved_ = false;
  clear_has_imageapproved();
}
inline bool ArchivedProject::imageapproved() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedProject.imageApproved)
  return imageapproved_;
}
inline void ArchivedProject::set_imageapproved(bool value) {
  set_has_imageapproved();
  imageapproved_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedProject.imageApproved)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ArchivedProject_2eproto__INCLUDED
