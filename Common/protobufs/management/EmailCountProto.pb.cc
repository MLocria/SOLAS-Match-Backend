// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EmailCountProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EmailCountProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EmailCountProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailCountProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EmailCountProto_2eproto() {
  protobuf_AddDesc_EmailCountProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EmailCountProto.proto");
  GOOGLE_CHECK(file != NULL);
  EmailCountProto_descriptor_ = file->message_type(0);
  static const int EmailCountProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailCountProto, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailCountProto, response_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailCountProto, response_topic_),
  };
  EmailCountProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailCountProto_descriptor_,
      EmailCountProto::default_instance_,
      EmailCountProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailCountProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailCountProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailCountProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EmailCountProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailCountProto_descriptor_, &EmailCountProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EmailCountProto_2eproto() {
  delete EmailCountProto::default_instance_;
  delete EmailCountProto_reflection_;
  delete EmailCountProto::_default_class_name_;
}

void protobuf_AddDesc_EmailCountProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025EmailCountProto.proto\"i\n\017EmailCountPro"
    "to\022#\n\nclass_name\030\001 \002(\t:\017EmailCountProto\022"
    "\031\n\021response_exchange\030\002 \002(\t\022\026\n\016response_t"
    "opic\030\003 \002(\t", 130);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EmailCountProto.proto", &protobuf_RegisterTypes);
  EmailCountProto::_default_class_name_ =
      new ::std::string("EmailCountProto", 15);
  EmailCountProto::default_instance_ = new EmailCountProto();
  EmailCountProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EmailCountProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EmailCountProto_2eproto {
  StaticDescriptorInitializer_EmailCountProto_2eproto() {
    protobuf_AddDesc_EmailCountProto_2eproto();
  }
} static_descriptor_initializer_EmailCountProto_2eproto_;

// ===================================================================

::std::string* EmailCountProto::_default_class_name_ = NULL;
#ifndef _MSC_VER
const int EmailCountProto::kClassNameFieldNumber;
const int EmailCountProto::kResponseExchangeFieldNumber;
const int EmailCountProto::kResponseTopicFieldNumber;
#endif  // !_MSC_VER

EmailCountProto::EmailCountProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailCountProto::InitAsDefaultInstance() {
}

EmailCountProto::EmailCountProto(const EmailCountProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailCountProto::SharedCtor() {
  _cached_size_ = 0;
  class_name_ = const_cast< ::std::string*>(_default_class_name_);
  response_exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailCountProto::~EmailCountProto() {
  SharedDtor();
}

void EmailCountProto::SharedDtor() {
  if (class_name_ != _default_class_name_) {
    delete class_name_;
  }
  if (response_exchange_ != &::google::protobuf::internal::kEmptyString) {
    delete response_exchange_;
  }
  if (response_topic_ != &::google::protobuf::internal::kEmptyString) {
    delete response_topic_;
  }
  if (this != default_instance_) {
  }
}

void EmailCountProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailCountProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailCountProto_descriptor_;
}

const EmailCountProto& EmailCountProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EmailCountProto_2eproto();
  return *default_instance_;
}

EmailCountProto* EmailCountProto::default_instance_ = NULL;

EmailCountProto* EmailCountProto::New() const {
  return new EmailCountProto;
}

void EmailCountProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_class_name()) {
      if (class_name_ != _default_class_name_) {
        class_name_->assign(*_default_class_name_);
      }
    }
    if (has_response_exchange()) {
      if (response_exchange_ != &::google::protobuf::internal::kEmptyString) {
        response_exchange_->clear();
      }
    }
    if (has_response_topic()) {
      if (response_topic_ != &::google::protobuf::internal::kEmptyString) {
        response_topic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailCountProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string class_name = 1 [default = "EmailCountProto"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response_exchange;
        break;
      }

      // required string response_exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_exchange().data(), this->response_exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_response_topic;
        break;
      }

      // required string response_topic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_topic().data(), this->response_topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmailCountProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string class_name = 1 [default = "EmailCountProto"];
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->class_name(), output);
  }

  // required string response_exchange = 2;
  if (has_response_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_exchange().data(), this->response_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->response_exchange(), output);
  }

  // required string response_topic = 3;
  if (has_response_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_topic().data(), this->response_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->response_topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailCountProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string class_name = 1 [default = "EmailCountProto"];
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // required string response_exchange = 2;
  if (has_response_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_exchange().data(), this->response_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_exchange(), target);
  }

  // required string response_topic = 3;
  if (has_response_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_topic().data(), this->response_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->response_topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailCountProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string class_name = 1 [default = "EmailCountProto"];
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // required string response_exchange = 2;
    if (has_response_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_exchange());
    }

    // required string response_topic = 3;
    if (has_response_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailCountProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailCountProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailCountProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailCountProto::MergeFrom(const EmailCountProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
    if (from.has_response_exchange()) {
      set_response_exchange(from.response_exchange());
    }
    if (from.has_response_topic()) {
      set_response_topic(from.response_topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailCountProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailCountProto::CopyFrom(const EmailCountProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailCountProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EmailCountProto::Swap(EmailCountProto* other) {
  if (other != this) {
    std::swap(class_name_, other->class_name_);
    std::swap(response_exchange_, other->response_exchange_);
    std::swap(response_topic_, other->response_topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailCountProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailCountProto_descriptor_;
  metadata.reflection = EmailCountProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
