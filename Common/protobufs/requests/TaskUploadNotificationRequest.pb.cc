// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskUploadNotificationRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TaskUploadNotificationRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Requests {

namespace {

const ::google::protobuf::Descriptor* TaskUploadNotificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskUploadNotificationRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TaskUploadNotificationRequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TaskUploadNotificationRequest_2eproto() {
  protobuf_AddDesc_TaskUploadNotificationRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TaskUploadNotificationRequest.proto");
  GOOGLE_CHECK(file != NULL);
  TaskUploadNotificationRequest_descriptor_ = file->message_type(0);
  static const int TaskUploadNotificationRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, file_version_),
  };
  TaskUploadNotificationRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskUploadNotificationRequest_descriptor_,
      TaskUploadNotificationRequest::default_instance_,
      TaskUploadNotificationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TaskUploadNotificationRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TaskUploadNotificationRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskUploadNotificationRequest_descriptor_, &TaskUploadNotificationRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TaskUploadNotificationRequest_2eproto() {
  delete TaskUploadNotificationRequest::default_instance_;
  delete TaskUploadNotificationRequest_reflection_;
  delete TaskUploadNotificationRequest::_default_class_name_;
}

void protobuf_AddDesc_TaskUploadNotificationRequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_TaskUploadNotificationRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#TaskUploadNotificationRequest.proto\022$S"
    "olasMatch.Common.Protobufs.Requests\"y\n\035T"
    "askUploadNotificationRequest\0221\n\nclass_na"
    "me\030\001 \002(\t:\035TaskUploadNotificationRequest\022"
    "\017\n\007task_id\030\002 \001(\005\022\024\n\014file_version\030\003 \001(\005", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TaskUploadNotificationRequest.proto", &protobuf_RegisterTypes);
  TaskUploadNotificationRequest::_default_class_name_ =
      new ::std::string("TaskUploadNotificationRequest", 29);
  TaskUploadNotificationRequest::default_instance_ = new TaskUploadNotificationRequest();
  TaskUploadNotificationRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TaskUploadNotificationRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TaskUploadNotificationRequest_2eproto {
  StaticDescriptorInitializer_TaskUploadNotificationRequest_2eproto() {
    protobuf_AddDesc_TaskUploadNotificationRequest_2eproto();
  }
} static_descriptor_initializer_TaskUploadNotificationRequest_2eproto_;

// ===================================================================

::std::string* TaskUploadNotificationRequest::_default_class_name_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskUploadNotificationRequest::kClassNameFieldNumber;
const int TaskUploadNotificationRequest::kTaskIdFieldNumber;
const int TaskUploadNotificationRequest::kFileVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskUploadNotificationRequest::TaskUploadNotificationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
}

void TaskUploadNotificationRequest::InitAsDefaultInstance() {
}

TaskUploadNotificationRequest::TaskUploadNotificationRequest(const TaskUploadNotificationRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
}

void TaskUploadNotificationRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  class_name_.UnsafeSetDefault(_default_class_name_);
  task_id_ = 0;
  file_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskUploadNotificationRequest::~TaskUploadNotificationRequest() {
  // @@protoc_insertion_point(destructor:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  SharedDtor();
}

void TaskUploadNotificationRequest::SharedDtor() {
  class_name_.DestroyNoArena(_default_class_name_);
  if (this != default_instance_) {
  }
}

void TaskUploadNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskUploadNotificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskUploadNotificationRequest_descriptor_;
}

const TaskUploadNotificationRequest& TaskUploadNotificationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskUploadNotificationRequest_2eproto();
  return *default_instance_;
}

TaskUploadNotificationRequest* TaskUploadNotificationRequest::default_instance_ = NULL;

TaskUploadNotificationRequest* TaskUploadNotificationRequest::New(::google::protobuf::Arena* arena) const {
  TaskUploadNotificationRequest* n = new TaskUploadNotificationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskUploadNotificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskUploadNotificationRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskUploadNotificationRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(task_id_, file_version_);
    if (has_class_name()) {
      class_name_.ClearToDefaultNoArena(_default_class_name_);
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskUploadNotificationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // optional int32 task_id = 2;
      case 2: {
        if (tag == 16) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_file_version;
        break;
      }

      // optional int32 file_version = 3;
      case 3: {
        if (tag == 24) {
         parse_file_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  return false;
#undef DO_
}

void TaskUploadNotificationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->class_name(), output);
  }

  // optional int32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_id(), output);
  }

  // optional int32 file_version = 3;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->file_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
}

::google::protobuf::uint8* TaskUploadNotificationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // optional int32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_id(), target);
  }

  // optional int32 file_version = 3;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->file_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  return target;
}

int TaskUploadNotificationRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  int total_size = 0;

  // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
  if (has_class_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional int32 file_version = 3;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskUploadNotificationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaskUploadNotificationRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskUploadNotificationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
    MergeFrom(*source);
  }
}

void TaskUploadNotificationRequest::MergeFrom(const TaskUploadNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_name()) {
      set_has_class_name();
      class_name_.AssignWithDefault(_default_class_name_, from.class_name_);
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TaskUploadNotificationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskUploadNotificationRequest::CopyFrom(const TaskUploadNotificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskUploadNotificationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskUploadNotificationRequest::Swap(TaskUploadNotificationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskUploadNotificationRequest::InternalSwap(TaskUploadNotificationRequest* other) {
  class_name_.Swap(&other->class_name_);
  std::swap(task_id_, other->task_id_);
  std::swap(file_version_, other->file_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskUploadNotificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskUploadNotificationRequest_descriptor_;
  metadata.reflection = TaskUploadNotificationRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskUploadNotificationRequest

// required string class_name = 1 [default = "TaskUploadNotificationRequest"];
bool TaskUploadNotificationRequest::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskUploadNotificationRequest::set_has_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskUploadNotificationRequest::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskUploadNotificationRequest::clear_class_name() {
  class_name_.ClearToDefaultNoArena(_default_class_name_);
  clear_has_class_name();
}
 const ::std::string& TaskUploadNotificationRequest::class_name() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
  return class_name_.GetNoArena(_default_class_name_);
}
 void TaskUploadNotificationRequest::set_class_name(const ::std::string& value) {
  set_has_class_name();
  class_name_.SetNoArena(_default_class_name_, value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}
 void TaskUploadNotificationRequest::set_class_name(const char* value) {
  set_has_class_name();
  class_name_.SetNoArena(_default_class_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}
 void TaskUploadNotificationRequest::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  class_name_.SetNoArena(_default_class_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}
 ::std::string* TaskUploadNotificationRequest::mutable_class_name() {
  set_has_class_name();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
  return class_name_.MutableNoArena(_default_class_name_);
}
 ::std::string* TaskUploadNotificationRequest::release_class_name() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
  clear_has_class_name();
  return class_name_.ReleaseNoArena(_default_class_name_);
}
 void TaskUploadNotificationRequest::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    set_has_class_name();
  } else {
    clear_has_class_name();
  }
  class_name_.SetAllocatedNoArena(_default_class_name_, class_name);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}

// optional int32 task_id = 2;
bool TaskUploadNotificationRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskUploadNotificationRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskUploadNotificationRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskUploadNotificationRequest::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
 ::google::protobuf::int32 TaskUploadNotificationRequest::task_id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.task_id)
  return task_id_;
}
 void TaskUploadNotificationRequest::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.task_id)
}

// optional int32 file_version = 3;
bool TaskUploadNotificationRequest::has_file_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskUploadNotificationRequest::set_has_file_version() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskUploadNotificationRequest::clear_has_file_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskUploadNotificationRequest::clear_file_version() {
  file_version_ = 0;
  clear_has_file_version();
}
 ::google::protobuf::int32 TaskUploadNotificationRequest::file_version() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.file_version)
  return file_version_;
}
 void TaskUploadNotificationRequest::set_file_version(::google::protobuf::int32 value) {
  set_has_file_version();
  file_version_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.file_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Requests
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)
