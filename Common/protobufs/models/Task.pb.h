// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef PROTOBUF_Task_2eproto__INCLUDED
#define PROTOBUF_Task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Tag.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Task_2eproto();
void protobuf_AssignDesc_Task_2eproto();
void protobuf_ShutdownFile_Task_2eproto();

class Task;

// ===================================================================

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();
  
  Task(const Task& from);
  
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();
  
  void Swap(Task* other);
  
  // implements Message ----------------------------------------------
  
  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 projectId = 2;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIdFieldNumber = 2;
  inline ::google::protobuf::int32 projectid() const;
  inline void set_projectid(::google::protobuf::int32 value);
  
  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string comment = 4;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  
  // required string deadline = 5;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 5;
  inline const ::std::string& deadline() const;
  inline void set_deadline(const ::std::string& value);
  inline void set_deadline(const char* value);
  inline void set_deadline(const char* value, size_t size);
  inline ::std::string* mutable_deadline();
  inline ::std::string* release_deadline();
  
  // optional int32 wordCount = 6;
  inline bool has_wordcount() const;
  inline void clear_wordcount();
  static const int kWordCountFieldNumber = 6;
  inline ::google::protobuf::int32 wordcount() const;
  inline void set_wordcount(::google::protobuf::int32 value);
  
  // optional string createdTime = 7;
  inline bool has_createdtime() const;
  inline void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 7;
  inline const ::std::string& createdtime() const;
  inline void set_createdtime(const ::std::string& value);
  inline void set_createdtime(const char* value);
  inline void set_createdtime(const char* value, size_t size);
  inline ::std::string* mutable_createdtime();
  inline ::std::string* release_createdtime();
  
  // optional string sourceLanguageCode = 8;
  inline bool has_sourcelanguagecode() const;
  inline void clear_sourcelanguagecode();
  static const int kSourceLanguageCodeFieldNumber = 8;
  inline const ::std::string& sourcelanguagecode() const;
  inline void set_sourcelanguagecode(const ::std::string& value);
  inline void set_sourcelanguagecode(const char* value);
  inline void set_sourcelanguagecode(const char* value, size_t size);
  inline ::std::string* mutable_sourcelanguagecode();
  inline ::std::string* release_sourcelanguagecode();
  
  // optional string targetLanguageCode = 9;
  inline bool has_targetlanguagecode() const;
  inline void clear_targetlanguagecode();
  static const int kTargetLanguageCodeFieldNumber = 9;
  inline const ::std::string& targetlanguagecode() const;
  inline void set_targetlanguagecode(const ::std::string& value);
  inline void set_targetlanguagecode(const char* value);
  inline void set_targetlanguagecode(const char* value, size_t size);
  inline ::std::string* mutable_targetlanguagecode();
  inline ::std::string* release_targetlanguagecode();
  
  // optional string sourceCountryCode = 10;
  inline bool has_sourcecountrycode() const;
  inline void clear_sourcecountrycode();
  static const int kSourceCountryCodeFieldNumber = 10;
  inline const ::std::string& sourcecountrycode() const;
  inline void set_sourcecountrycode(const ::std::string& value);
  inline void set_sourcecountrycode(const char* value);
  inline void set_sourcecountrycode(const char* value, size_t size);
  inline ::std::string* mutable_sourcecountrycode();
  inline ::std::string* release_sourcecountrycode();
  
  // optional string targetCountryCode = 11;
  inline bool has_targetcountrycode() const;
  inline void clear_targetcountrycode();
  static const int kTargetCountryCodeFieldNumber = 11;
  inline const ::std::string& targetcountrycode() const;
  inline void set_targetcountrycode(const ::std::string& value);
  inline void set_targetcountrycode(const char* value);
  inline void set_targetcountrycode(const char* value, size_t size);
  inline ::std::string* mutable_targetcountrycode();
  inline ::std::string* release_targetcountrycode();
  
  // optional int32 taskType = 12;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 12;
  inline ::google::protobuf::int32 tasktype() const;
  inline void set_tasktype(::google::protobuf::int32 value);
  
  // optional int32 taskStatus = 13;
  inline bool has_taskstatus() const;
  inline void clear_taskstatus();
  static const int kTaskStatusFieldNumber = 13;
  inline ::google::protobuf::int32 taskstatus() const;
  inline void set_taskstatus(::google::protobuf::int32 value);
  
  // optional bool published = 14;
  inline bool has_published() const;
  inline void clear_published();
  static const int kPublishedFieldNumber = 14;
  inline bool published() const;
  inline void set_published(bool value);
  
  // repeated .Tag tag = 15;
  inline int tag_size() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 15;
  inline const ::Tag& tag(int index) const;
  inline ::Tag* mutable_tag(int index);
  inline ::Tag* add_tag();
  inline const ::google::protobuf::RepeatedPtrField< ::Tag >&
      tag() const;
  inline ::google::protobuf::RepeatedPtrField< ::Tag >*
      mutable_tag();
  
  // @@protoc_insertion_point(class_scope:Task)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_wordcount();
  inline void clear_has_wordcount();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_sourcelanguagecode();
  inline void clear_has_sourcelanguagecode();
  inline void set_has_targetlanguagecode();
  inline void clear_has_targetlanguagecode();
  inline void set_has_sourcecountrycode();
  inline void clear_has_sourcecountrycode();
  inline void set_has_targetcountrycode();
  inline void clear_has_targetcountrycode();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_taskstatus();
  inline void clear_has_taskstatus();
  inline void set_has_published();
  inline void clear_has_published();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 projectid_;
  ::std::string* title_;
  ::std::string* comment_;
  ::std::string* deadline_;
  ::std::string* createdtime_;
  ::std::string* sourcelanguagecode_;
  ::std::string* targetlanguagecode_;
  ::google::protobuf::int32 wordcount_;
  ::google::protobuf::int32 tasktype_;
  ::std::string* sourcecountrycode_;
  ::std::string* targetcountrycode_;
  ::google::protobuf::int32 taskstatus_;
  bool published_;
  ::google::protobuf::RepeatedPtrField< ::Tag > tag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();
  
  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// required int32 id = 1;
inline bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Task::id() const {
  return id_;
}
inline void Task::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 projectId = 2;
inline bool Task::has_projectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_projectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_projectid() {
  projectid_ = 0;
  clear_has_projectid();
}
inline ::google::protobuf::int32 Task::projectid() const {
  return projectid_;
}
inline void Task::set_projectid(::google::protobuf::int32 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string title = 3;
inline bool Task::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Task::title() const {
  return *title_;
}
inline void Task::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Task::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Task::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Task::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string comment = 4;
inline bool Task::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Task::comment() const {
  return *comment_;
}
inline void Task::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Task::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Task::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* Task::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deadline = 5;
inline bool Task::has_deadline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_deadline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_deadline() {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    deadline_->clear();
  }
  clear_has_deadline();
}
inline const ::std::string& Task::deadline() const {
  return *deadline_;
}
inline void Task::set_deadline(const ::std::string& value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void Task::set_deadline(const char* value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void Task::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_deadline() {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  return deadline_;
}
inline ::std::string* Task::release_deadline() {
  clear_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deadline_;
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 wordCount = 6;
inline bool Task::has_wordcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_wordcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_wordcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_wordcount() {
  wordcount_ = 0;
  clear_has_wordcount();
}
inline ::google::protobuf::int32 Task::wordcount() const {
  return wordcount_;
}
inline void Task::set_wordcount(::google::protobuf::int32 value) {
  set_has_wordcount();
  wordcount_ = value;
}

// optional string createdTime = 7;
inline bool Task::has_createdtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_createdtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_createdtime() {
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    createdtime_->clear();
  }
  clear_has_createdtime();
}
inline const ::std::string& Task::createdtime() const {
  return *createdtime_;
}
inline void Task::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void Task::set_createdtime(const char* value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void Task::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_createdtime() {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  return createdtime_;
}
inline ::std::string* Task::release_createdtime() {
  clear_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdtime_;
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sourceLanguageCode = 8;
inline bool Task::has_sourcelanguagecode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Task::set_has_sourcelanguagecode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Task::clear_has_sourcelanguagecode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Task::clear_sourcelanguagecode() {
  if (sourcelanguagecode_ != &::google::protobuf::internal::kEmptyString) {
    sourcelanguagecode_->clear();
  }
  clear_has_sourcelanguagecode();
}
inline const ::std::string& Task::sourcelanguagecode() const {
  return *sourcelanguagecode_;
}
inline void Task::set_sourcelanguagecode(const ::std::string& value) {
  set_has_sourcelanguagecode();
  if (sourcelanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    sourcelanguagecode_ = new ::std::string;
  }
  sourcelanguagecode_->assign(value);
}
inline void Task::set_sourcelanguagecode(const char* value) {
  set_has_sourcelanguagecode();
  if (sourcelanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    sourcelanguagecode_ = new ::std::string;
  }
  sourcelanguagecode_->assign(value);
}
inline void Task::set_sourcelanguagecode(const char* value, size_t size) {
  set_has_sourcelanguagecode();
  if (sourcelanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    sourcelanguagecode_ = new ::std::string;
  }
  sourcelanguagecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_sourcelanguagecode() {
  set_has_sourcelanguagecode();
  if (sourcelanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    sourcelanguagecode_ = new ::std::string;
  }
  return sourcelanguagecode_;
}
inline ::std::string* Task::release_sourcelanguagecode() {
  clear_has_sourcelanguagecode();
  if (sourcelanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcelanguagecode_;
    sourcelanguagecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string targetLanguageCode = 9;
inline bool Task::has_targetlanguagecode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Task::set_has_targetlanguagecode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Task::clear_has_targetlanguagecode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Task::clear_targetlanguagecode() {
  if (targetlanguagecode_ != &::google::protobuf::internal::kEmptyString) {
    targetlanguagecode_->clear();
  }
  clear_has_targetlanguagecode();
}
inline const ::std::string& Task::targetlanguagecode() const {
  return *targetlanguagecode_;
}
inline void Task::set_targetlanguagecode(const ::std::string& value) {
  set_has_targetlanguagecode();
  if (targetlanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    targetlanguagecode_ = new ::std::string;
  }
  targetlanguagecode_->assign(value);
}
inline void Task::set_targetlanguagecode(const char* value) {
  set_has_targetlanguagecode();
  if (targetlanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    targetlanguagecode_ = new ::std::string;
  }
  targetlanguagecode_->assign(value);
}
inline void Task::set_targetlanguagecode(const char* value, size_t size) {
  set_has_targetlanguagecode();
  if (targetlanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    targetlanguagecode_ = new ::std::string;
  }
  targetlanguagecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_targetlanguagecode() {
  set_has_targetlanguagecode();
  if (targetlanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    targetlanguagecode_ = new ::std::string;
  }
  return targetlanguagecode_;
}
inline ::std::string* Task::release_targetlanguagecode() {
  clear_has_targetlanguagecode();
  if (targetlanguagecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetlanguagecode_;
    targetlanguagecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sourceCountryCode = 10;
inline bool Task::has_sourcecountrycode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Task::set_has_sourcecountrycode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Task::clear_has_sourcecountrycode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Task::clear_sourcecountrycode() {
  if (sourcecountrycode_ != &::google::protobuf::internal::kEmptyString) {
    sourcecountrycode_->clear();
  }
  clear_has_sourcecountrycode();
}
inline const ::std::string& Task::sourcecountrycode() const {
  return *sourcecountrycode_;
}
inline void Task::set_sourcecountrycode(const ::std::string& value) {
  set_has_sourcecountrycode();
  if (sourcecountrycode_ == &::google::protobuf::internal::kEmptyString) {
    sourcecountrycode_ = new ::std::string;
  }
  sourcecountrycode_->assign(value);
}
inline void Task::set_sourcecountrycode(const char* value) {
  set_has_sourcecountrycode();
  if (sourcecountrycode_ == &::google::protobuf::internal::kEmptyString) {
    sourcecountrycode_ = new ::std::string;
  }
  sourcecountrycode_->assign(value);
}
inline void Task::set_sourcecountrycode(const char* value, size_t size) {
  set_has_sourcecountrycode();
  if (sourcecountrycode_ == &::google::protobuf::internal::kEmptyString) {
    sourcecountrycode_ = new ::std::string;
  }
  sourcecountrycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_sourcecountrycode() {
  set_has_sourcecountrycode();
  if (sourcecountrycode_ == &::google::protobuf::internal::kEmptyString) {
    sourcecountrycode_ = new ::std::string;
  }
  return sourcecountrycode_;
}
inline ::std::string* Task::release_sourcecountrycode() {
  clear_has_sourcecountrycode();
  if (sourcecountrycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcecountrycode_;
    sourcecountrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string targetCountryCode = 11;
inline bool Task::has_targetcountrycode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Task::set_has_targetcountrycode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Task::clear_has_targetcountrycode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Task::clear_targetcountrycode() {
  if (targetcountrycode_ != &::google::protobuf::internal::kEmptyString) {
    targetcountrycode_->clear();
  }
  clear_has_targetcountrycode();
}
inline const ::std::string& Task::targetcountrycode() const {
  return *targetcountrycode_;
}
inline void Task::set_targetcountrycode(const ::std::string& value) {
  set_has_targetcountrycode();
  if (targetcountrycode_ == &::google::protobuf::internal::kEmptyString) {
    targetcountrycode_ = new ::std::string;
  }
  targetcountrycode_->assign(value);
}
inline void Task::set_targetcountrycode(const char* value) {
  set_has_targetcountrycode();
  if (targetcountrycode_ == &::google::protobuf::internal::kEmptyString) {
    targetcountrycode_ = new ::std::string;
  }
  targetcountrycode_->assign(value);
}
inline void Task::set_targetcountrycode(const char* value, size_t size) {
  set_has_targetcountrycode();
  if (targetcountrycode_ == &::google::protobuf::internal::kEmptyString) {
    targetcountrycode_ = new ::std::string;
  }
  targetcountrycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_targetcountrycode() {
  set_has_targetcountrycode();
  if (targetcountrycode_ == &::google::protobuf::internal::kEmptyString) {
    targetcountrycode_ = new ::std::string;
  }
  return targetcountrycode_;
}
inline ::std::string* Task::release_targetcountrycode() {
  clear_has_targetcountrycode();
  if (targetcountrycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetcountrycode_;
    targetcountrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 taskType = 12;
inline bool Task::has_tasktype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Task::set_has_tasktype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Task::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Task::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::google::protobuf::int32 Task::tasktype() const {
  return tasktype_;
}
inline void Task::set_tasktype(::google::protobuf::int32 value) {
  set_has_tasktype();
  tasktype_ = value;
}

// optional int32 taskStatus = 13;
inline bool Task::has_taskstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Task::set_has_taskstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Task::clear_has_taskstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Task::clear_taskstatus() {
  taskstatus_ = 0;
  clear_has_taskstatus();
}
inline ::google::protobuf::int32 Task::taskstatus() const {
  return taskstatus_;
}
inline void Task::set_taskstatus(::google::protobuf::int32 value) {
  set_has_taskstatus();
  taskstatus_ = value;
}

// optional bool published = 14;
inline bool Task::has_published() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Task::set_has_published() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Task::clear_has_published() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Task::clear_published() {
  published_ = false;
  clear_has_published();
}
inline bool Task::published() const {
  return published_;
}
inline void Task::set_published(bool value) {
  set_has_published();
  published_ = value;
}

// repeated .Tag tag = 15;
inline int Task::tag_size() const {
  return tag_.size();
}
inline void Task::clear_tag() {
  tag_.Clear();
}
inline const ::Tag& Task::tag(int index) const {
  return tag_.Get(index);
}
inline ::Tag* Task::mutable_tag(int index) {
  return tag_.Mutable(index);
}
inline ::Tag* Task::add_tag() {
  return tag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tag >&
Task::tag() const {
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::Tag >*
Task::mutable_tag() {
  return &tag_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Task_2eproto__INCLUDED
