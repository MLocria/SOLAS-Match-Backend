// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskUploadNotificationRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TaskUploadNotificationRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Requests {

namespace {

const ::google::protobuf::Descriptor* TaskUploadNotificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskUploadNotificationRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TaskUploadNotificationRequest_2eproto() {
  protobuf_AddDesc_TaskUploadNotificationRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TaskUploadNotificationRequest.proto");
  GOOGLE_CHECK(file != NULL);
  TaskUploadNotificationRequest_descriptor_ = file->message_type(0);
  static const int TaskUploadNotificationRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, file_version_),
  };
  TaskUploadNotificationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskUploadNotificationRequest_descriptor_,
      TaskUploadNotificationRequest::default_instance_,
      TaskUploadNotificationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskUploadNotificationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskUploadNotificationRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TaskUploadNotificationRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskUploadNotificationRequest_descriptor_, &TaskUploadNotificationRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TaskUploadNotificationRequest_2eproto() {
  delete TaskUploadNotificationRequest::default_instance_;
  delete TaskUploadNotificationRequest_reflection_;
  delete TaskUploadNotificationRequest::_default_class_name_;
}

void protobuf_AddDesc_TaskUploadNotificationRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#TaskUploadNotificationRequest.proto\022$S"
    "olasMatch.Common.Protobufs.Requests\"y\n\035T"
    "askUploadNotificationRequest\0221\n\nclass_na"
    "me\030\001 \002(\t:\035TaskUploadNotificationRequest\022"
    "\017\n\007task_id\030\002 \001(\005\022\024\n\014file_version\030\003 \001(\005", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TaskUploadNotificationRequest.proto", &protobuf_RegisterTypes);
  TaskUploadNotificationRequest::_default_class_name_ =
      new ::std::string("TaskUploadNotificationRequest", 29);
  TaskUploadNotificationRequest::default_instance_ = new TaskUploadNotificationRequest();
  TaskUploadNotificationRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TaskUploadNotificationRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TaskUploadNotificationRequest_2eproto {
  StaticDescriptorInitializer_TaskUploadNotificationRequest_2eproto() {
    protobuf_AddDesc_TaskUploadNotificationRequest_2eproto();
  }
} static_descriptor_initializer_TaskUploadNotificationRequest_2eproto_;

// ===================================================================

::std::string* TaskUploadNotificationRequest::_default_class_name_ = NULL;
#ifndef _MSC_VER
const int TaskUploadNotificationRequest::kClassNameFieldNumber;
const int TaskUploadNotificationRequest::kTaskIdFieldNumber;
const int TaskUploadNotificationRequest::kFileVersionFieldNumber;
#endif  // !_MSC_VER

TaskUploadNotificationRequest::TaskUploadNotificationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskUploadNotificationRequest::InitAsDefaultInstance() {
}

TaskUploadNotificationRequest::TaskUploadNotificationRequest(const TaskUploadNotificationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskUploadNotificationRequest::SharedCtor() {
  _cached_size_ = 0;
  class_name_ = const_cast< ::std::string*>(_default_class_name_);
  task_id_ = 0;
  file_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskUploadNotificationRequest::~TaskUploadNotificationRequest() {
  SharedDtor();
}

void TaskUploadNotificationRequest::SharedDtor() {
  if (class_name_ != _default_class_name_) {
    delete class_name_;
  }
  if (this != default_instance_) {
  }
}

void TaskUploadNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskUploadNotificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskUploadNotificationRequest_descriptor_;
}

const TaskUploadNotificationRequest& TaskUploadNotificationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TaskUploadNotificationRequest_2eproto();
  return *default_instance_;
}

TaskUploadNotificationRequest* TaskUploadNotificationRequest::default_instance_ = NULL;

TaskUploadNotificationRequest* TaskUploadNotificationRequest::New() const {
  return new TaskUploadNotificationRequest;
}

void TaskUploadNotificationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_class_name()) {
      if (class_name_ != _default_class_name_) {
        class_name_->assign(*_default_class_name_);
      }
    }
    task_id_ = 0;
    file_version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskUploadNotificationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // optional int32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_version;
        break;
      }

      // optional int32 file_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_version_)));
          set_has_file_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskUploadNotificationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->class_name(), output);
  }

  // optional int32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_id(), output);
  }

  // optional int32 file_version = 3;
  if (has_file_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->file_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskUploadNotificationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // optional int32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_id(), target);
  }

  // optional int32 file_version = 3;
  if (has_file_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->file_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskUploadNotificationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional int32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional int32 file_version = 3;
    if (has_file_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskUploadNotificationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskUploadNotificationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskUploadNotificationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskUploadNotificationRequest::MergeFrom(const TaskUploadNotificationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_name()) {
      set_class_name(from.class_name());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_file_version()) {
      set_file_version(from.file_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskUploadNotificationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskUploadNotificationRequest::CopyFrom(const TaskUploadNotificationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskUploadNotificationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskUploadNotificationRequest::Swap(TaskUploadNotificationRequest* other) {
  if (other != this) {
    std::swap(class_name_, other->class_name_);
    std::swap(task_id_, other->task_id_);
    std::swap(file_version_, other->file_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskUploadNotificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskUploadNotificationRequest_descriptor_;
  metadata.reflection = TaskUploadNotificationRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Requests
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)
