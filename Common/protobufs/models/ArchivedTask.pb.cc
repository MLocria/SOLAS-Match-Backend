// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArchivedTask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ArchivedTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArchivedTask_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ArchivedTask_2eproto() {
  protobuf_AddDesc_ArchivedTask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ArchivedTask.proto");
  GOOGLE_CHECK(file != NULL);
  ArchivedTask_descriptor_ = file->message_type(0);
  static const int ArchivedTask_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, archive_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, org_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, word_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, created_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, archived_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, impact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, reference_page_),
  };
  ArchivedTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArchivedTask_descriptor_,
      ArchivedTask::default_instance_,
      ArchivedTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArchivedTask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ArchivedTask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArchivedTask_descriptor_, &ArchivedTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ArchivedTask_2eproto() {
  delete ArchivedTask::default_instance_;
  delete ArchivedTask_reflection_;
}

void protobuf_AddDesc_ArchivedTask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ArchivedTask.proto\"\341\001\n\014ArchivedTask\022\022\n"
    "\narchive_id\030\001 \002(\005\022\017\n\007task_id\030\002 \002(\005\022\016\n\006or"
    "g_id\030\003 \001(\005\022\r\n\005title\030\004 \001(\t\022\022\n\nword_count\030"
    "\005 \001(\005\022\021\n\tsource_id\030\006 \001(\005\022\021\n\ttarget_id\030\007 "
    "\001(\005\022\024\n\014created_time\030\010 \001(\t\022\025\n\rarchived_ti"
    "me\030\t \001(\t\022\016\n\006impact\030\n \001(\t\022\026\n\016reference_pa"
    "ge\030\013 \001(\t", 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ArchivedTask.proto", &protobuf_RegisterTypes);
  ArchivedTask::default_instance_ = new ArchivedTask();
  ArchivedTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArchivedTask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArchivedTask_2eproto {
  StaticDescriptorInitializer_ArchivedTask_2eproto() {
    protobuf_AddDesc_ArchivedTask_2eproto();
  }
} static_descriptor_initializer_ArchivedTask_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ArchivedTask::kArchiveIdFieldNumber;
const int ArchivedTask::kTaskIdFieldNumber;
const int ArchivedTask::kOrgIdFieldNumber;
const int ArchivedTask::kTitleFieldNumber;
const int ArchivedTask::kWordCountFieldNumber;
const int ArchivedTask::kSourceIdFieldNumber;
const int ArchivedTask::kTargetIdFieldNumber;
const int ArchivedTask::kCreatedTimeFieldNumber;
const int ArchivedTask::kArchivedTimeFieldNumber;
const int ArchivedTask::kImpactFieldNumber;
const int ArchivedTask::kReferencePageFieldNumber;
#endif  // !_MSC_VER

ArchivedTask::ArchivedTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArchivedTask::InitAsDefaultInstance() {
}

ArchivedTask::ArchivedTask(const ArchivedTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArchivedTask::SharedCtor() {
  _cached_size_ = 0;
  archive_id_ = 0;
  task_id_ = 0;
  org_id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  word_count_ = 0;
  source_id_ = 0;
  target_id_ = 0;
  created_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  archived_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  impact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reference_page_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArchivedTask::~ArchivedTask() {
  SharedDtor();
}

void ArchivedTask::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (created_time_ != &::google::protobuf::internal::kEmptyString) {
    delete created_time_;
  }
  if (archived_time_ != &::google::protobuf::internal::kEmptyString) {
    delete archived_time_;
  }
  if (impact_ != &::google::protobuf::internal::kEmptyString) {
    delete impact_;
  }
  if (reference_page_ != &::google::protobuf::internal::kEmptyString) {
    delete reference_page_;
  }
  if (this != default_instance_) {
  }
}

void ArchivedTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArchivedTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArchivedTask_descriptor_;
}

const ArchivedTask& ArchivedTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArchivedTask_2eproto();  return *default_instance_;
}

ArchivedTask* ArchivedTask::default_instance_ = NULL;

ArchivedTask* ArchivedTask::New() const {
  return new ArchivedTask;
}

void ArchivedTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    archive_id_ = 0;
    task_id_ = 0;
    org_id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    word_count_ = 0;
    source_id_ = 0;
    target_id_ = 0;
    if (has_created_time()) {
      if (created_time_ != &::google::protobuf::internal::kEmptyString) {
        created_time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_archived_time()) {
      if (archived_time_ != &::google::protobuf::internal::kEmptyString) {
        archived_time_->clear();
      }
    }
    if (has_impact()) {
      if (impact_ != &::google::protobuf::internal::kEmptyString) {
        impact_->clear();
      }
    }
    if (has_reference_page()) {
      if (reference_page_ != &::google::protobuf::internal::kEmptyString) {
        reference_page_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArchivedTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 archive_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &archive_id_)));
          set_has_archive_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }
      
      // required int32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_org_id;
        break;
      }
      
      // optional int32 org_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &org_id_)));
          set_has_org_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }
      
      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_word_count;
        break;
      }
      
      // optional int32 word_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_count_)));
          set_has_word_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_id;
        break;
      }
      
      // optional int32 source_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_target_id;
        break;
      }
      
      // optional int32 target_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_created_time;
        break;
      }
      
      // optional string created_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_created_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_created_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->created_time().data(), this->created_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_archived_time;
        break;
      }
      
      // optional string archived_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archived_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_archived_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->archived_time().data(), this->archived_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_impact;
        break;
      }
      
      // optional string impact = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impact()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->impact().data(), this->impact().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_reference_page;
        break;
      }
      
      // optional string reference_page = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reference_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reference_page().data(), this->reference_page().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArchivedTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 archive_id = 1;
  if (has_archive_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->archive_id(), output);
  }
  
  // required int32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_id(), output);
  }
  
  // optional int32 org_id = 3;
  if (has_org_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->org_id(), output);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }
  
  // optional int32 word_count = 5;
  if (has_word_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->word_count(), output);
  }
  
  // optional int32 source_id = 6;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->source_id(), output);
  }
  
  // optional int32 target_id = 7;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->target_id(), output);
  }
  
  // optional string created_time = 8;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->created_time().data(), this->created_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->created_time(), output);
  }
  
  // optional string archived_time = 9;
  if (has_archived_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archived_time().data(), this->archived_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->archived_time(), output);
  }
  
  // optional string impact = 10;
  if (has_impact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impact().data(), this->impact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->impact(), output);
  }
  
  // optional string reference_page = 11;
  if (has_reference_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reference_page().data(), this->reference_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->reference_page(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArchivedTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 archive_id = 1;
  if (has_archive_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->archive_id(), target);
  }
  
  // required int32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_id(), target);
  }
  
  // optional int32 org_id = 3;
  if (has_org_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->org_id(), target);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }
  
  // optional int32 word_count = 5;
  if (has_word_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->word_count(), target);
  }
  
  // optional int32 source_id = 6;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->source_id(), target);
  }
  
  // optional int32 target_id = 7;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->target_id(), target);
  }
  
  // optional string created_time = 8;
  if (has_created_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->created_time().data(), this->created_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->created_time(), target);
  }
  
  // optional string archived_time = 9;
  if (has_archived_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archived_time().data(), this->archived_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->archived_time(), target);
  }
  
  // optional string impact = 10;
  if (has_impact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impact().data(), this->impact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->impact(), target);
  }
  
  // optional string reference_page = 11;
  if (has_reference_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reference_page().data(), this->reference_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->reference_page(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArchivedTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 archive_id = 1;
    if (has_archive_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->archive_id());
    }
    
    // required int32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }
    
    // optional int32 org_id = 3;
    if (has_org_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->org_id());
    }
    
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional int32 word_count = 5;
    if (has_word_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->word_count());
    }
    
    // optional int32 source_id = 6;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_id());
    }
    
    // optional int32 target_id = 7;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_id());
    }
    
    // optional string created_time = 8;
    if (has_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->created_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string archived_time = 9;
    if (has_archived_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->archived_time());
    }
    
    // optional string impact = 10;
    if (has_impact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impact());
    }
    
    // optional string reference_page = 11;
    if (has_reference_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reference_page());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArchivedTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArchivedTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArchivedTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArchivedTask::MergeFrom(const ArchivedTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_archive_id()) {
      set_archive_id(from.archive_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_org_id()) {
      set_org_id(from.org_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_word_count()) {
      set_word_count(from.word_count());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_created_time()) {
      set_created_time(from.created_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_archived_time()) {
      set_archived_time(from.archived_time());
    }
    if (from.has_impact()) {
      set_impact(from.impact());
    }
    if (from.has_reference_page()) {
      set_reference_page(from.reference_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArchivedTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchivedTask::CopyFrom(const ArchivedTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchivedTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ArchivedTask::Swap(ArchivedTask* other) {
  if (other != this) {
    std::swap(archive_id_, other->archive_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(org_id_, other->org_id_);
    std::swap(title_, other->title_);
    std::swap(word_count_, other->word_count_);
    std::swap(source_id_, other->source_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(created_time_, other->created_time_);
    std::swap(archived_time_, other->archived_time_);
    std::swap(impact_, other->impact_);
    std::swap(reference_page_, other->reference_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArchivedTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArchivedTask_descriptor_;
  metadata.reflection = ArchivedTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
