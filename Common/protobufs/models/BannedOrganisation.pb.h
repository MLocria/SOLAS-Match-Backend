// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BannedOrganisation.proto

#ifndef PROTOBUF_BannedOrganisation_2eproto__INCLUDED
#define PROTOBUF_BannedOrganisation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BannedOrganisation_2eproto();
void protobuf_AssignDesc_BannedOrganisation_2eproto();
void protobuf_ShutdownFile_BannedOrganisation_2eproto();

class BannedOrganisation;

// ===================================================================

class BannedOrganisation : public ::google::protobuf::Message {
 public:
  BannedOrganisation();
  virtual ~BannedOrganisation();

  BannedOrganisation(const BannedOrganisation& from);

  inline BannedOrganisation& operator=(const BannedOrganisation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BannedOrganisation& default_instance();

  void Swap(BannedOrganisation* other);

  // implements Message ----------------------------------------------

  BannedOrganisation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BannedOrganisation& from);
  void MergeFrom(const BannedOrganisation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 orgId = 1;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgIdFieldNumber = 1;
  inline ::google::protobuf::int32 orgid() const;
  inline void set_orgid(::google::protobuf::int32 value);

  // optional int32 userIdAdmin = 2;
  inline bool has_useridadmin() const;
  inline void clear_useridadmin();
  static const int kUserIdAdminFieldNumber = 2;
  inline ::google::protobuf::int32 useridadmin() const;
  inline void set_useridadmin(::google::protobuf::int32 value);

  // optional string banType = 3;
  inline bool has_bantype() const;
  inline void clear_bantype();
  static const int kBanTypeFieldNumber = 3;
  inline const ::std::string& bantype() const;
  inline void set_bantype(const ::std::string& value);
  inline void set_bantype(const char* value);
  inline void set_bantype(const char* value, size_t size);
  inline ::std::string* mutable_bantype();
  inline ::std::string* release_bantype();
  inline void set_allocated_bantype(::std::string* bantype);

  // optional string comment = 4;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // optional string bannedDate = 5;
  inline bool has_banneddate() const;
  inline void clear_banneddate();
  static const int kBannedDateFieldNumber = 5;
  inline const ::std::string& banneddate() const;
  inline void set_banneddate(const ::std::string& value);
  inline void set_banneddate(const char* value);
  inline void set_banneddate(const char* value, size_t size);
  inline ::std::string* mutable_banneddate();
  inline ::std::string* release_banneddate();
  inline void set_allocated_banneddate(::std::string* banneddate);

  // @@protoc_insertion_point(class_scope:BannedOrganisation)
 private:
  inline void set_has_orgid();
  inline void clear_has_orgid();
  inline void set_has_useridadmin();
  inline void clear_has_useridadmin();
  inline void set_has_bantype();
  inline void clear_has_bantype();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_banneddate();
  inline void clear_has_banneddate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 orgid_;
  ::google::protobuf::int32 useridadmin_;
  ::std::string* bantype_;
  ::std::string* comment_;
  ::std::string* banneddate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_BannedOrganisation_2eproto();
  friend void protobuf_AssignDesc_BannedOrganisation_2eproto();
  friend void protobuf_ShutdownFile_BannedOrganisation_2eproto();

  void InitAsDefaultInstance();
  static BannedOrganisation* default_instance_;
};
// ===================================================================


// ===================================================================

// BannedOrganisation

// optional int32 orgId = 1;
inline bool BannedOrganisation::has_orgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BannedOrganisation::set_has_orgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BannedOrganisation::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BannedOrganisation::clear_orgid() {
  orgid_ = 0;
  clear_has_orgid();
}
inline ::google::protobuf::int32 BannedOrganisation::orgid() const {
  return orgid_;
}
inline void BannedOrganisation::set_orgid(::google::protobuf::int32 value) {
  set_has_orgid();
  orgid_ = value;
}

// optional int32 userIdAdmin = 2;
inline bool BannedOrganisation::has_useridadmin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BannedOrganisation::set_has_useridadmin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BannedOrganisation::clear_has_useridadmin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BannedOrganisation::clear_useridadmin() {
  useridadmin_ = 0;
  clear_has_useridadmin();
}
inline ::google::protobuf::int32 BannedOrganisation::useridadmin() const {
  return useridadmin_;
}
inline void BannedOrganisation::set_useridadmin(::google::protobuf::int32 value) {
  set_has_useridadmin();
  useridadmin_ = value;
}

// optional string banType = 3;
inline bool BannedOrganisation::has_bantype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BannedOrganisation::set_has_bantype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BannedOrganisation::clear_has_bantype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BannedOrganisation::clear_bantype() {
  if (bantype_ != &::google::protobuf::internal::kEmptyString) {
    bantype_->clear();
  }
  clear_has_bantype();
}
inline const ::std::string& BannedOrganisation::bantype() const {
  return *bantype_;
}
inline void BannedOrganisation::set_bantype(const ::std::string& value) {
  set_has_bantype();
  if (bantype_ == &::google::protobuf::internal::kEmptyString) {
    bantype_ = new ::std::string;
  }
  bantype_->assign(value);
}
inline void BannedOrganisation::set_bantype(const char* value) {
  set_has_bantype();
  if (bantype_ == &::google::protobuf::internal::kEmptyString) {
    bantype_ = new ::std::string;
  }
  bantype_->assign(value);
}
inline void BannedOrganisation::set_bantype(const char* value, size_t size) {
  set_has_bantype();
  if (bantype_ == &::google::protobuf::internal::kEmptyString) {
    bantype_ = new ::std::string;
  }
  bantype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BannedOrganisation::mutable_bantype() {
  set_has_bantype();
  if (bantype_ == &::google::protobuf::internal::kEmptyString) {
    bantype_ = new ::std::string;
  }
  return bantype_;
}
inline ::std::string* BannedOrganisation::release_bantype() {
  clear_has_bantype();
  if (bantype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bantype_;
    bantype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BannedOrganisation::set_allocated_bantype(::std::string* bantype) {
  if (bantype_ != &::google::protobuf::internal::kEmptyString) {
    delete bantype_;
  }
  if (bantype) {
    set_has_bantype();
    bantype_ = bantype;
  } else {
    clear_has_bantype();
    bantype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string comment = 4;
inline bool BannedOrganisation::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BannedOrganisation::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BannedOrganisation::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BannedOrganisation::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& BannedOrganisation::comment() const {
  return *comment_;
}
inline void BannedOrganisation::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void BannedOrganisation::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void BannedOrganisation::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BannedOrganisation::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* BannedOrganisation::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BannedOrganisation::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bannedDate = 5;
inline bool BannedOrganisation::has_banneddate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BannedOrganisation::set_has_banneddate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BannedOrganisation::clear_has_banneddate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BannedOrganisation::clear_banneddate() {
  if (banneddate_ != &::google::protobuf::internal::kEmptyString) {
    banneddate_->clear();
  }
  clear_has_banneddate();
}
inline const ::std::string& BannedOrganisation::banneddate() const {
  return *banneddate_;
}
inline void BannedOrganisation::set_banneddate(const ::std::string& value) {
  set_has_banneddate();
  if (banneddate_ == &::google::protobuf::internal::kEmptyString) {
    banneddate_ = new ::std::string;
  }
  banneddate_->assign(value);
}
inline void BannedOrganisation::set_banneddate(const char* value) {
  set_has_banneddate();
  if (banneddate_ == &::google::protobuf::internal::kEmptyString) {
    banneddate_ = new ::std::string;
  }
  banneddate_->assign(value);
}
inline void BannedOrganisation::set_banneddate(const char* value, size_t size) {
  set_has_banneddate();
  if (banneddate_ == &::google::protobuf::internal::kEmptyString) {
    banneddate_ = new ::std::string;
  }
  banneddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BannedOrganisation::mutable_banneddate() {
  set_has_banneddate();
  if (banneddate_ == &::google::protobuf::internal::kEmptyString) {
    banneddate_ = new ::std::string;
  }
  return banneddate_;
}
inline ::std::string* BannedOrganisation::release_banneddate() {
  clear_has_banneddate();
  if (banneddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = banneddate_;
    banneddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BannedOrganisation::set_allocated_banneddate(::std::string* banneddate) {
  if (banneddate_ != &::google::protobuf::internal::kEmptyString) {
    delete banneddate_;
  }
  if (banneddate) {
    set_has_banneddate();
    banneddate_ = banneddate;
  } else {
    clear_has_banneddate();
    banneddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BannedOrganisation_2eproto__INCLUDED
