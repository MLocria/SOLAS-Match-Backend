// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArchivedProject.proto

#ifndef PROTOBUF_ArchivedProject_2eproto__INCLUDED
#define PROTOBUF_ArchivedProject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Locale.pb.h"
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ArchivedProject_2eproto();
void protobuf_AssignDesc_ArchivedProject_2eproto();
void protobuf_ShutdownFile_ArchivedProject_2eproto();

class ArchivedProject;

// ===================================================================

class ArchivedProject : public ::google::protobuf::Message {
 public:
  ArchivedProject();
  virtual ~ArchivedProject();
  
  ArchivedProject(const ArchivedProject& from);
  
  inline ArchivedProject& operator=(const ArchivedProject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArchivedProject& default_instance();
  
  void Swap(ArchivedProject* other);
  
  // implements Message ----------------------------------------------
  
  ArchivedProject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArchivedProject& from);
  void MergeFrom(const ArchivedProject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string impact = 4;
  inline bool has_impact() const;
  inline void clear_impact();
  static const int kImpactFieldNumber = 4;
  inline const ::std::string& impact() const;
  inline void set_impact(const ::std::string& value);
  inline void set_impact(const char* value);
  inline void set_impact(const char* value, size_t size);
  inline ::std::string* mutable_impact();
  inline ::std::string* release_impact();
  
  // optional string deadline = 5;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 5;
  inline const ::std::string& deadline() const;
  inline void set_deadline(const ::std::string& value);
  inline void set_deadline(const char* value);
  inline void set_deadline(const char* value, size_t size);
  inline ::std::string* mutable_deadline();
  inline ::std::string* release_deadline();
  
  // optional int32 organisationId = 6;
  inline bool has_organisationid() const;
  inline void clear_organisationid();
  static const int kOrganisationIdFieldNumber = 6;
  inline ::google::protobuf::int32 organisationid() const;
  inline void set_organisationid(::google::protobuf::int32 value);
  
  // optional string reference = 7;
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 7;
  inline const ::std::string& reference() const;
  inline void set_reference(const ::std::string& value);
  inline void set_reference(const char* value);
  inline void set_reference(const char* value, size_t size);
  inline ::std::string* mutable_reference();
  inline ::std::string* release_reference();
  
  // optional int32 wordCount = 8;
  inline bool has_wordcount() const;
  inline void clear_wordcount();
  static const int kWordCountFieldNumber = 8;
  inline ::google::protobuf::int32 wordcount() const;
  inline void set_wordcount(::google::protobuf::int32 value);
  
  // optional string createdTime = 9;
  inline bool has_createdtime() const;
  inline void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 9;
  inline const ::std::string& createdtime() const;
  inline void set_createdtime(const ::std::string& value);
  inline void set_createdtime(const char* value);
  inline void set_createdtime(const char* value, size_t size);
  inline ::std::string* mutable_createdtime();
  inline ::std::string* release_createdtime();
  
  // optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 10;
  inline bool has_sourcelocale() const;
  inline void clear_sourcelocale();
  static const int kSourceLocaleFieldNumber = 10;
  inline const ::SolasMatch::Common::Protobufs::Models::Locale& sourcelocale() const;
  inline ::SolasMatch::Common::Protobufs::Models::Locale* mutable_sourcelocale();
  inline ::SolasMatch::Common::Protobufs::Models::Locale* release_sourcelocale();
  
  // optional int32 userIdArchived = 11;
  inline bool has_useridarchived() const;
  inline void clear_useridarchived();
  static const int kUserIdArchivedFieldNumber = 11;
  inline ::google::protobuf::int32 useridarchived() const;
  inline void set_useridarchived(::google::protobuf::int32 value);
  
  // optional int32 userIdProjectCreator = 12;
  inline bool has_useridprojectcreator() const;
  inline void clear_useridprojectcreator();
  static const int kUserIdProjectCreatorFieldNumber = 12;
  inline ::google::protobuf::int32 useridprojectcreator() const;
  inline void set_useridprojectcreator(::google::protobuf::int32 value);
  
  // optional string fileName = 13;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 13;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  
  // optional string fileToken = 14;
  inline bool has_filetoken() const;
  inline void clear_filetoken();
  static const int kFileTokenFieldNumber = 14;
  inline const ::std::string& filetoken() const;
  inline void set_filetoken(const ::std::string& value);
  inline void set_filetoken(const char* value);
  inline void set_filetoken(const char* value, size_t size);
  inline ::std::string* mutable_filetoken();
  inline ::std::string* release_filetoken();
  
  // optional string mimeType = 15;
  inline bool has_mimetype() const;
  inline void clear_mimetype();
  static const int kMimeTypeFieldNumber = 15;
  inline const ::std::string& mimetype() const;
  inline void set_mimetype(const ::std::string& value);
  inline void set_mimetype(const char* value);
  inline void set_mimetype(const char* value, size_t size);
  inline ::std::string* mutable_mimetype();
  inline ::std::string* release_mimetype();
  
  // optional string archivedDate = 16;
  inline bool has_archiveddate() const;
  inline void clear_archiveddate();
  static const int kArchivedDateFieldNumber = 16;
  inline const ::std::string& archiveddate() const;
  inline void set_archiveddate(const ::std::string& value);
  inline void set_archiveddate(const char* value);
  inline void set_archiveddate(const char* value, size_t size);
  inline ::std::string* mutable_archiveddate();
  inline ::std::string* release_archiveddate();
  
  // optional string tags = 17;
  inline bool has_tags() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 17;
  inline const ::std::string& tags() const;
  inline void set_tags(const ::std::string& value);
  inline void set_tags(const char* value);
  inline void set_tags(const char* value, size_t size);
  inline ::std::string* mutable_tags();
  inline ::std::string* release_tags();
  
  // optional bool imageUploaded = 18;
  inline bool has_imageuploaded() const;
  inline void clear_imageuploaded();
  static const int kImageUploadedFieldNumber = 18;
  inline bool imageuploaded() const;
  inline void set_imageuploaded(bool value);
  
  // optional bool imageApproved = 19;
  inline bool has_imageapproved() const;
  inline void clear_imageapproved();
  static const int kImageApprovedFieldNumber = 19;
  inline bool imageapproved() const;
  inline void set_imageapproved(bool value);
  
  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.ArchivedProject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_impact();
  inline void clear_has_impact();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_organisationid();
  inline void clear_has_organisationid();
  inline void set_has_reference();
  inline void clear_has_reference();
  inline void set_has_wordcount();
  inline void clear_has_wordcount();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_sourcelocale();
  inline void clear_has_sourcelocale();
  inline void set_has_useridarchived();
  inline void clear_has_useridarchived();
  inline void set_has_useridprojectcreator();
  inline void clear_has_useridprojectcreator();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filetoken();
  inline void clear_has_filetoken();
  inline void set_has_mimetype();
  inline void clear_has_mimetype();
  inline void set_has_archiveddate();
  inline void clear_has_archiveddate();
  inline void set_has_tags();
  inline void clear_has_tags();
  inline void set_has_imageuploaded();
  inline void clear_has_imageuploaded();
  inline void set_has_imageapproved();
  inline void clear_has_imageapproved();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* description_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 organisationid_;
  ::std::string* impact_;
  ::std::string* deadline_;
  ::std::string* reference_;
  ::std::string* createdtime_;
  ::google::protobuf::int32 wordcount_;
  ::google::protobuf::int32 useridarchived_;
  ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale_;
  ::std::string* filename_;
  ::std::string* filetoken_;
  ::std::string* mimetype_;
  ::std::string* archiveddate_;
  ::google::protobuf::int32 useridprojectcreator_;
  bool imageuploaded_;
  bool imageapproved_;
  ::std::string* tags_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_ArchivedProject_2eproto();
  friend void protobuf_AssignDesc_ArchivedProject_2eproto();
  friend void protobuf_ShutdownFile_ArchivedProject_2eproto();
  
  void InitAsDefaultInstance();
  static ArchivedProject* default_instance_;
};
// ===================================================================


// ===================================================================

// ArchivedProject

// optional int32 id = 1;
inline bool ArchivedProject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArchivedProject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArchivedProject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArchivedProject::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ArchivedProject::id() const {
  return id_;
}
inline void ArchivedProject::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string title = 2;
inline bool ArchivedProject::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArchivedProject::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArchivedProject::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArchivedProject::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ArchivedProject::title() const {
  return *title_;
}
inline void ArchivedProject::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ArchivedProject::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ArchivedProject::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ArchivedProject::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string description = 3;
inline bool ArchivedProject::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArchivedProject::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArchivedProject::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArchivedProject::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ArchivedProject::description() const {
  return *description_;
}
inline void ArchivedProject::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void ArchivedProject::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void ArchivedProject::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* ArchivedProject::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string impact = 4;
inline bool ArchivedProject::has_impact() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArchivedProject::set_has_impact() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArchivedProject::clear_has_impact() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArchivedProject::clear_impact() {
  if (impact_ != &::google::protobuf::internal::kEmptyString) {
    impact_->clear();
  }
  clear_has_impact();
}
inline const ::std::string& ArchivedProject::impact() const {
  return *impact_;
}
inline void ArchivedProject::set_impact(const ::std::string& value) {
  set_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    impact_ = new ::std::string;
  }
  impact_->assign(value);
}
inline void ArchivedProject::set_impact(const char* value) {
  set_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    impact_ = new ::std::string;
  }
  impact_->assign(value);
}
inline void ArchivedProject::set_impact(const char* value, size_t size) {
  set_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    impact_ = new ::std::string;
  }
  impact_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_impact() {
  set_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    impact_ = new ::std::string;
  }
  return impact_;
}
inline ::std::string* ArchivedProject::release_impact() {
  clear_has_impact();
  if (impact_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = impact_;
    impact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deadline = 5;
inline bool ArchivedProject::has_deadline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArchivedProject::set_has_deadline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArchivedProject::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArchivedProject::clear_deadline() {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    deadline_->clear();
  }
  clear_has_deadline();
}
inline const ::std::string& ArchivedProject::deadline() const {
  return *deadline_;
}
inline void ArchivedProject::set_deadline(const ::std::string& value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void ArchivedProject::set_deadline(const char* value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void ArchivedProject::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_deadline() {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  return deadline_;
}
inline ::std::string* ArchivedProject::release_deadline() {
  clear_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deadline_;
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 organisationId = 6;
inline bool ArchivedProject::has_organisationid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArchivedProject::set_has_organisationid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArchivedProject::clear_has_organisationid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArchivedProject::clear_organisationid() {
  organisationid_ = 0;
  clear_has_organisationid();
}
inline ::google::protobuf::int32 ArchivedProject::organisationid() const {
  return organisationid_;
}
inline void ArchivedProject::set_organisationid(::google::protobuf::int32 value) {
  set_has_organisationid();
  organisationid_ = value;
}

// optional string reference = 7;
inline bool ArchivedProject::has_reference() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArchivedProject::set_has_reference() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArchivedProject::clear_has_reference() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArchivedProject::clear_reference() {
  if (reference_ != &::google::protobuf::internal::kEmptyString) {
    reference_->clear();
  }
  clear_has_reference();
}
inline const ::std::string& ArchivedProject::reference() const {
  return *reference_;
}
inline void ArchivedProject::set_reference(const ::std::string& value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
}
inline void ArchivedProject::set_reference(const char* value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
}
inline void ArchivedProject::set_reference(const char* value, size_t size) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_reference() {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  return reference_;
}
inline ::std::string* ArchivedProject::release_reference() {
  clear_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reference_;
    reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 wordCount = 8;
inline bool ArchivedProject::has_wordcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArchivedProject::set_has_wordcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArchivedProject::clear_has_wordcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArchivedProject::clear_wordcount() {
  wordcount_ = 0;
  clear_has_wordcount();
}
inline ::google::protobuf::int32 ArchivedProject::wordcount() const {
  return wordcount_;
}
inline void ArchivedProject::set_wordcount(::google::protobuf::int32 value) {
  set_has_wordcount();
  wordcount_ = value;
}

// optional string createdTime = 9;
inline bool ArchivedProject::has_createdtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArchivedProject::set_has_createdtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArchivedProject::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArchivedProject::clear_createdtime() {
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    createdtime_->clear();
  }
  clear_has_createdtime();
}
inline const ::std::string& ArchivedProject::createdtime() const {
  return *createdtime_;
}
inline void ArchivedProject::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void ArchivedProject::set_createdtime(const char* value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void ArchivedProject::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_createdtime() {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  return createdtime_;
}
inline ::std::string* ArchivedProject::release_createdtime() {
  clear_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdtime_;
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 10;
inline bool ArchivedProject::has_sourcelocale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArchivedProject::set_has_sourcelocale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArchivedProject::clear_has_sourcelocale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArchivedProject::clear_sourcelocale() {
  if (sourcelocale_ != NULL) sourcelocale_->::SolasMatch::Common::Protobufs::Models::Locale::Clear();
  clear_has_sourcelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& ArchivedProject::sourcelocale() const {
  return sourcelocale_ != NULL ? *sourcelocale_ : *default_instance_->sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedProject::mutable_sourcelocale() {
  set_has_sourcelocale();
  if (sourcelocale_ == NULL) sourcelocale_ = new ::SolasMatch::Common::Protobufs::Models::Locale;
  return sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedProject::release_sourcelocale() {
  clear_has_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = sourcelocale_;
  sourcelocale_ = NULL;
  return temp;
}

// optional int32 userIdArchived = 11;
inline bool ArchivedProject::has_useridarchived() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ArchivedProject::set_has_useridarchived() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ArchivedProject::clear_has_useridarchived() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ArchivedProject::clear_useridarchived() {
  useridarchived_ = 0;
  clear_has_useridarchived();
}
inline ::google::protobuf::int32 ArchivedProject::useridarchived() const {
  return useridarchived_;
}
inline void ArchivedProject::set_useridarchived(::google::protobuf::int32 value) {
  set_has_useridarchived();
  useridarchived_ = value;
}

// optional int32 userIdProjectCreator = 12;
inline bool ArchivedProject::has_useridprojectcreator() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ArchivedProject::set_has_useridprojectcreator() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ArchivedProject::clear_has_useridprojectcreator() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ArchivedProject::clear_useridprojectcreator() {
  useridprojectcreator_ = 0;
  clear_has_useridprojectcreator();
}
inline ::google::protobuf::int32 ArchivedProject::useridprojectcreator() const {
  return useridprojectcreator_;
}
inline void ArchivedProject::set_useridprojectcreator(::google::protobuf::int32 value) {
  set_has_useridprojectcreator();
  useridprojectcreator_ = value;
}

// optional string fileName = 13;
inline bool ArchivedProject::has_filename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ArchivedProject::set_has_filename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ArchivedProject::clear_has_filename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ArchivedProject::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ArchivedProject::filename() const {
  return *filename_;
}
inline void ArchivedProject::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ArchivedProject::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ArchivedProject::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* ArchivedProject::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fileToken = 14;
inline bool ArchivedProject::has_filetoken() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ArchivedProject::set_has_filetoken() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ArchivedProject::clear_has_filetoken() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ArchivedProject::clear_filetoken() {
  if (filetoken_ != &::google::protobuf::internal::kEmptyString) {
    filetoken_->clear();
  }
  clear_has_filetoken();
}
inline const ::std::string& ArchivedProject::filetoken() const {
  return *filetoken_;
}
inline void ArchivedProject::set_filetoken(const ::std::string& value) {
  set_has_filetoken();
  if (filetoken_ == &::google::protobuf::internal::kEmptyString) {
    filetoken_ = new ::std::string;
  }
  filetoken_->assign(value);
}
inline void ArchivedProject::set_filetoken(const char* value) {
  set_has_filetoken();
  if (filetoken_ == &::google::protobuf::internal::kEmptyString) {
    filetoken_ = new ::std::string;
  }
  filetoken_->assign(value);
}
inline void ArchivedProject::set_filetoken(const char* value, size_t size) {
  set_has_filetoken();
  if (filetoken_ == &::google::protobuf::internal::kEmptyString) {
    filetoken_ = new ::std::string;
  }
  filetoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_filetoken() {
  set_has_filetoken();
  if (filetoken_ == &::google::protobuf::internal::kEmptyString) {
    filetoken_ = new ::std::string;
  }
  return filetoken_;
}
inline ::std::string* ArchivedProject::release_filetoken() {
  clear_has_filetoken();
  if (filetoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filetoken_;
    filetoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mimeType = 15;
inline bool ArchivedProject::has_mimetype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ArchivedProject::set_has_mimetype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ArchivedProject::clear_has_mimetype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ArchivedProject::clear_mimetype() {
  if (mimetype_ != &::google::protobuf::internal::kEmptyString) {
    mimetype_->clear();
  }
  clear_has_mimetype();
}
inline const ::std::string& ArchivedProject::mimetype() const {
  return *mimetype_;
}
inline void ArchivedProject::set_mimetype(const ::std::string& value) {
  set_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    mimetype_ = new ::std::string;
  }
  mimetype_->assign(value);
}
inline void ArchivedProject::set_mimetype(const char* value) {
  set_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    mimetype_ = new ::std::string;
  }
  mimetype_->assign(value);
}
inline void ArchivedProject::set_mimetype(const char* value, size_t size) {
  set_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    mimetype_ = new ::std::string;
  }
  mimetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_mimetype() {
  set_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    mimetype_ = new ::std::string;
  }
  return mimetype_;
}
inline ::std::string* ArchivedProject::release_mimetype() {
  clear_has_mimetype();
  if (mimetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mimetype_;
    mimetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string archivedDate = 16;
inline bool ArchivedProject::has_archiveddate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ArchivedProject::set_has_archiveddate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ArchivedProject::clear_has_archiveddate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ArchivedProject::clear_archiveddate() {
  if (archiveddate_ != &::google::protobuf::internal::kEmptyString) {
    archiveddate_->clear();
  }
  clear_has_archiveddate();
}
inline const ::std::string& ArchivedProject::archiveddate() const {
  return *archiveddate_;
}
inline void ArchivedProject::set_archiveddate(const ::std::string& value) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(value);
}
inline void ArchivedProject::set_archiveddate(const char* value) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(value);
}
inline void ArchivedProject::set_archiveddate(const char* value, size_t size) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_archiveddate() {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  return archiveddate_;
}
inline ::std::string* ArchivedProject::release_archiveddate() {
  clear_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = archiveddate_;
    archiveddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string tags = 17;
inline bool ArchivedProject::has_tags() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ArchivedProject::set_has_tags() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ArchivedProject::clear_has_tags() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ArchivedProject::clear_tags() {
  if (tags_ != &::google::protobuf::internal::kEmptyString) {
    tags_->clear();
  }
  clear_has_tags();
}
inline const ::std::string& ArchivedProject::tags() const {
  return *tags_;
}
inline void ArchivedProject::set_tags(const ::std::string& value) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(value);
}
inline void ArchivedProject::set_tags(const char* value) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(value);
}
inline void ArchivedProject::set_tags(const char* value, size_t size) {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  tags_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_tags() {
  set_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    tags_ = new ::std::string;
  }
  return tags_;
}
inline ::std::string* ArchivedProject::release_tags() {
  clear_has_tags();
  if (tags_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tags_;
    tags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool imageUploaded = 18;
inline bool ArchivedProject::has_imageuploaded() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ArchivedProject::set_has_imageuploaded() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ArchivedProject::clear_has_imageuploaded() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ArchivedProject::clear_imageuploaded() {
  imageuploaded_ = false;
  clear_has_imageuploaded();
}
inline bool ArchivedProject::imageuploaded() const {
  return imageuploaded_;
}
inline void ArchivedProject::set_imageuploaded(bool value) {
  set_has_imageuploaded();
  imageuploaded_ = value;
}

// optional bool imageApproved = 19;
inline bool ArchivedProject::has_imageapproved() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ArchivedProject::set_has_imageapproved() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ArchivedProject::clear_has_imageapproved() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ArchivedProject::clear_imageapproved() {
  imageapproved_ = false;
  clear_has_imageapproved();
}
inline bool ArchivedProject::imageapproved() const {
  return imageapproved_;
}
inline void ArchivedProject::set_imageapproved(bool value) {
  set_has_imageapproved();
  imageapproved_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ArchivedProject_2eproto__INCLUDED
