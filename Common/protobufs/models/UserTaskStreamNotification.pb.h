// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserTaskStreamNotification.proto

#ifndef PROTOBUF_UserTaskStreamNotification_2eproto__INCLUDED
#define PROTOBUF_UserTaskStreamNotification_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserTaskStreamNotification_2eproto();
void protobuf_AssignDesc_UserTaskStreamNotification_2eproto();
void protobuf_ShutdownFile_UserTaskStreamNotification_2eproto();

class UserTaskStreamNotification;

// ===================================================================

class UserTaskStreamNotification : public ::google::protobuf::Message {
 public:
  UserTaskStreamNotification();
  virtual ~UserTaskStreamNotification();

  UserTaskStreamNotification(const UserTaskStreamNotification& from);

  inline UserTaskStreamNotification& operator=(const UserTaskStreamNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserTaskStreamNotification& default_instance();

  void Swap(UserTaskStreamNotification* other);

  // implements Message ----------------------------------------------

  UserTaskStreamNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserTaskStreamNotification& from);
  void MergeFrom(const UserTaskStreamNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // optional int32 interval = 2;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 2;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);

  // optional string last_sent = 3;
  inline bool has_last_sent() const;
  inline void clear_last_sent();
  static const int kLastSentFieldNumber = 3;
  inline const ::std::string& last_sent() const;
  inline void set_last_sent(const ::std::string& value);
  inline void set_last_sent(const char* value);
  inline void set_last_sent(const char* value, size_t size);
  inline ::std::string* mutable_last_sent();
  inline ::std::string* release_last_sent();
  inline void set_allocated_last_sent(::std::string* last_sent);

  // optional bool strict = 4;
  inline bool has_strict() const;
  inline void clear_strict();
  static const int kStrictFieldNumber = 4;
  inline bool strict() const;
  inline void set_strict(bool value);

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_last_sent();
  inline void clear_has_last_sent();
  inline void set_has_strict();
  inline void clear_has_strict();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 user_id_;
  ::google::protobuf::int32 interval_;
  ::std::string* last_sent_;
  bool strict_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_UserTaskStreamNotification_2eproto();
  friend void protobuf_AssignDesc_UserTaskStreamNotification_2eproto();
  friend void protobuf_ShutdownFile_UserTaskStreamNotification_2eproto();

  void InitAsDefaultInstance();
  static UserTaskStreamNotification* default_instance_;
};
// ===================================================================


// ===================================================================

// UserTaskStreamNotification

// optional int32 user_id = 1;
inline bool UserTaskStreamNotification::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserTaskStreamNotification::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserTaskStreamNotification::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserTaskStreamNotification::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 UserTaskStreamNotification::user_id() const {
  return user_id_;
}
inline void UserTaskStreamNotification::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 interval = 2;
inline bool UserTaskStreamNotification::has_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserTaskStreamNotification::set_has_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserTaskStreamNotification::clear_has_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserTaskStreamNotification::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 UserTaskStreamNotification::interval() const {
  return interval_;
}
inline void UserTaskStreamNotification::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
}

// optional string last_sent = 3;
inline bool UserTaskStreamNotification::has_last_sent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserTaskStreamNotification::set_has_last_sent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserTaskStreamNotification::clear_has_last_sent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserTaskStreamNotification::clear_last_sent() {
  if (last_sent_ != &::google::protobuf::internal::kEmptyString) {
    last_sent_->clear();
  }
  clear_has_last_sent();
}
inline const ::std::string& UserTaskStreamNotification::last_sent() const {
  return *last_sent_;
}
inline void UserTaskStreamNotification::set_last_sent(const ::std::string& value) {
  set_has_last_sent();
  if (last_sent_ == &::google::protobuf::internal::kEmptyString) {
    last_sent_ = new ::std::string;
  }
  last_sent_->assign(value);
}
inline void UserTaskStreamNotification::set_last_sent(const char* value) {
  set_has_last_sent();
  if (last_sent_ == &::google::protobuf::internal::kEmptyString) {
    last_sent_ = new ::std::string;
  }
  last_sent_->assign(value);
}
inline void UserTaskStreamNotification::set_last_sent(const char* value, size_t size) {
  set_has_last_sent();
  if (last_sent_ == &::google::protobuf::internal::kEmptyString) {
    last_sent_ = new ::std::string;
  }
  last_sent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserTaskStreamNotification::mutable_last_sent() {
  set_has_last_sent();
  if (last_sent_ == &::google::protobuf::internal::kEmptyString) {
    last_sent_ = new ::std::string;
  }
  return last_sent_;
}
inline ::std::string* UserTaskStreamNotification::release_last_sent() {
  clear_has_last_sent();
  if (last_sent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_sent_;
    last_sent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserTaskStreamNotification::set_allocated_last_sent(::std::string* last_sent) {
  if (last_sent_ != &::google::protobuf::internal::kEmptyString) {
    delete last_sent_;
  }
  if (last_sent) {
    set_has_last_sent();
    last_sent_ = last_sent;
  } else {
    clear_has_last_sent();
    last_sent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool strict = 4;
inline bool UserTaskStreamNotification::has_strict() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserTaskStreamNotification::set_has_strict() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserTaskStreamNotification::clear_has_strict() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserTaskStreamNotification::clear_strict() {
  strict_ = false;
  clear_has_strict();
}
inline bool UserTaskStreamNotification::strict() const {
  return strict_;
}
inline void UserTaskStreamNotification::set_strict(bool value) {
  set_has_strict();
  strict_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserTaskStreamNotification_2eproto__INCLUDED
