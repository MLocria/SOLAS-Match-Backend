// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArchivedProject.proto

#ifndef PROTOBUF_ArchivedProject_2eproto__INCLUDED
#define PROTOBUF_ArchivedProject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ArchivedProject_2eproto();
void protobuf_AssignDesc_ArchivedProject_2eproto();
void protobuf_ShutdownFile_ArchivedProject_2eproto();

class ArchivedProject;

// ===================================================================

class ArchivedProject : public ::google::protobuf::Message {
 public:
  ArchivedProject();
  virtual ~ArchivedProject();
  
  ArchivedProject(const ArchivedProject& from);
  
  inline ArchivedProject& operator=(const ArchivedProject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArchivedProject& default_instance();
  
  void Swap(ArchivedProject* other);
  
  // implements Message ----------------------------------------------
  
  ArchivedProject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArchivedProject& from);
  void MergeFrom(const ArchivedProject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string deadline = 4;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 4;
  inline const ::std::string& deadline() const;
  inline void set_deadline(const ::std::string& value);
  inline void set_deadline(const char* value);
  inline void set_deadline(const char* value, size_t size);
  inline ::std::string* mutable_deadline();
  inline ::std::string* release_deadline();
  
  // optional int32 organisationId = 5;
  inline bool has_organisationid() const;
  inline void clear_organisationid();
  static const int kOrganisationIdFieldNumber = 5;
  inline ::google::protobuf::int32 organisationid() const;
  inline void set_organisationid(::google::protobuf::int32 value);
  
  // optional string reference = 6;
  inline bool has_reference() const;
  inline void clear_reference();
  static const int kReferenceFieldNumber = 6;
  inline const ::std::string& reference() const;
  inline void set_reference(const ::std::string& value);
  inline void set_reference(const char* value);
  inline void set_reference(const char* value, size_t size);
  inline ::std::string* mutable_reference();
  inline ::std::string* release_reference();
  
  // optional int32 wordCount = 7;
  inline bool has_wordcount() const;
  inline void clear_wordcount();
  static const int kWordCountFieldNumber = 7;
  inline ::google::protobuf::int32 wordcount() const;
  inline void set_wordcount(::google::protobuf::int32 value);
  
  // optional string languageCode = 8;
  inline bool has_languagecode() const;
  inline void clear_languagecode();
  static const int kLanguageCodeFieldNumber = 8;
  inline const ::std::string& languagecode() const;
  inline void set_languagecode(const ::std::string& value);
  inline void set_languagecode(const char* value);
  inline void set_languagecode(const char* value, size_t size);
  inline ::std::string* mutable_languagecode();
  inline ::std::string* release_languagecode();
  
  // optional string countryCode = 9;
  inline bool has_countrycode() const;
  inline void clear_countrycode();
  static const int kCountryCodeFieldNumber = 9;
  inline const ::std::string& countrycode() const;
  inline void set_countrycode(const ::std::string& value);
  inline void set_countrycode(const char* value);
  inline void set_countrycode(const char* value, size_t size);
  inline ::std::string* mutable_countrycode();
  inline ::std::string* release_countrycode();
  
  // optional string createdTime = 10;
  inline bool has_createdtime() const;
  inline void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 10;
  inline const ::std::string& createdtime() const;
  inline void set_createdtime(const ::std::string& value);
  inline void set_createdtime(const char* value);
  inline void set_createdtime(const char* value, size_t size);
  inline ::std::string* mutable_createdtime();
  inline ::std::string* release_createdtime();
  
  // optional string archivedDate = 11;
  inline bool has_archiveddate() const;
  inline void clear_archiveddate();
  static const int kArchivedDateFieldNumber = 11;
  inline const ::std::string& archiveddate() const;
  inline void set_archiveddate(const ::std::string& value);
  inline void set_archiveddate(const char* value);
  inline void set_archiveddate(const char* value, size_t size);
  inline ::std::string* mutable_archiveddate();
  inline ::std::string* release_archiveddate();
  
  // optional int32 translatorId = 12;
  inline bool has_translatorid() const;
  inline void clear_translatorid();
  static const int kTranslatorIdFieldNumber = 12;
  inline ::google::protobuf::int32 translatorid() const;
  inline void set_translatorid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ArchivedProject)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_organisationid();
  inline void clear_has_organisationid();
  inline void set_has_reference();
  inline void clear_has_reference();
  inline void set_has_wordcount();
  inline void clear_has_wordcount();
  inline void set_has_languagecode();
  inline void clear_has_languagecode();
  inline void set_has_countrycode();
  inline void clear_has_countrycode();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_archiveddate();
  inline void clear_has_archiveddate();
  inline void set_has_translatorid();
  inline void clear_has_translatorid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* title_;
  ::std::string* description_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 organisationid_;
  ::std::string* deadline_;
  ::std::string* reference_;
  ::std::string* languagecode_;
  ::std::string* countrycode_;
  ::google::protobuf::int32 wordcount_;
  ::google::protobuf::int32 translatorid_;
  ::std::string* createdtime_;
  ::std::string* archiveddate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ArchivedProject_2eproto();
  friend void protobuf_AssignDesc_ArchivedProject_2eproto();
  friend void protobuf_ShutdownFile_ArchivedProject_2eproto();
  
  void InitAsDefaultInstance();
  static ArchivedProject* default_instance_;
};
// ===================================================================


// ===================================================================

// ArchivedProject

// required int32 id = 1;
inline bool ArchivedProject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArchivedProject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArchivedProject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArchivedProject::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ArchivedProject::id() const {
  return id_;
}
inline void ArchivedProject::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string title = 2;
inline bool ArchivedProject::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArchivedProject::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArchivedProject::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArchivedProject::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ArchivedProject::title() const {
  return *title_;
}
inline void ArchivedProject::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ArchivedProject::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ArchivedProject::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ArchivedProject::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string description = 3;
inline bool ArchivedProject::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArchivedProject::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArchivedProject::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArchivedProject::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ArchivedProject::description() const {
  return *description_;
}
inline void ArchivedProject::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void ArchivedProject::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void ArchivedProject::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* ArchivedProject::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deadline = 4;
inline bool ArchivedProject::has_deadline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArchivedProject::set_has_deadline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArchivedProject::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArchivedProject::clear_deadline() {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    deadline_->clear();
  }
  clear_has_deadline();
}
inline const ::std::string& ArchivedProject::deadline() const {
  return *deadline_;
}
inline void ArchivedProject::set_deadline(const ::std::string& value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void ArchivedProject::set_deadline(const char* value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void ArchivedProject::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_deadline() {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  return deadline_;
}
inline ::std::string* ArchivedProject::release_deadline() {
  clear_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deadline_;
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 organisationId = 5;
inline bool ArchivedProject::has_organisationid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArchivedProject::set_has_organisationid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArchivedProject::clear_has_organisationid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArchivedProject::clear_organisationid() {
  organisationid_ = 0;
  clear_has_organisationid();
}
inline ::google::protobuf::int32 ArchivedProject::organisationid() const {
  return organisationid_;
}
inline void ArchivedProject::set_organisationid(::google::protobuf::int32 value) {
  set_has_organisationid();
  organisationid_ = value;
}

// optional string reference = 6;
inline bool ArchivedProject::has_reference() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArchivedProject::set_has_reference() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArchivedProject::clear_has_reference() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArchivedProject::clear_reference() {
  if (reference_ != &::google::protobuf::internal::kEmptyString) {
    reference_->clear();
  }
  clear_has_reference();
}
inline const ::std::string& ArchivedProject::reference() const {
  return *reference_;
}
inline void ArchivedProject::set_reference(const ::std::string& value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
}
inline void ArchivedProject::set_reference(const char* value) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(value);
}
inline void ArchivedProject::set_reference(const char* value, size_t size) {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  reference_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_reference() {
  set_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    reference_ = new ::std::string;
  }
  return reference_;
}
inline ::std::string* ArchivedProject::release_reference() {
  clear_has_reference();
  if (reference_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reference_;
    reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 wordCount = 7;
inline bool ArchivedProject::has_wordcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArchivedProject::set_has_wordcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArchivedProject::clear_has_wordcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArchivedProject::clear_wordcount() {
  wordcount_ = 0;
  clear_has_wordcount();
}
inline ::google::protobuf::int32 ArchivedProject::wordcount() const {
  return wordcount_;
}
inline void ArchivedProject::set_wordcount(::google::protobuf::int32 value) {
  set_has_wordcount();
  wordcount_ = value;
}

// optional string languageCode = 8;
inline bool ArchivedProject::has_languagecode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArchivedProject::set_has_languagecode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArchivedProject::clear_has_languagecode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArchivedProject::clear_languagecode() {
  if (languagecode_ != &::google::protobuf::internal::kEmptyString) {
    languagecode_->clear();
  }
  clear_has_languagecode();
}
inline const ::std::string& ArchivedProject::languagecode() const {
  return *languagecode_;
}
inline void ArchivedProject::set_languagecode(const ::std::string& value) {
  set_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    languagecode_ = new ::std::string;
  }
  languagecode_->assign(value);
}
inline void ArchivedProject::set_languagecode(const char* value) {
  set_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    languagecode_ = new ::std::string;
  }
  languagecode_->assign(value);
}
inline void ArchivedProject::set_languagecode(const char* value, size_t size) {
  set_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    languagecode_ = new ::std::string;
  }
  languagecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_languagecode() {
  set_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    languagecode_ = new ::std::string;
  }
  return languagecode_;
}
inline ::std::string* ArchivedProject::release_languagecode() {
  clear_has_languagecode();
  if (languagecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = languagecode_;
    languagecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string countryCode = 9;
inline bool ArchivedProject::has_countrycode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArchivedProject::set_has_countrycode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArchivedProject::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArchivedProject::clear_countrycode() {
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    countrycode_->clear();
  }
  clear_has_countrycode();
}
inline const ::std::string& ArchivedProject::countrycode() const {
  return *countrycode_;
}
inline void ArchivedProject::set_countrycode(const ::std::string& value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void ArchivedProject::set_countrycode(const char* value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void ArchivedProject::set_countrycode(const char* value, size_t size) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_countrycode() {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  return countrycode_;
}
inline ::std::string* ArchivedProject::release_countrycode() {
  clear_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = countrycode_;
    countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string createdTime = 10;
inline bool ArchivedProject::has_createdtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArchivedProject::set_has_createdtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArchivedProject::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArchivedProject::clear_createdtime() {
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    createdtime_->clear();
  }
  clear_has_createdtime();
}
inline const ::std::string& ArchivedProject::createdtime() const {
  return *createdtime_;
}
inline void ArchivedProject::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void ArchivedProject::set_createdtime(const char* value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void ArchivedProject::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_createdtime() {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  return createdtime_;
}
inline ::std::string* ArchivedProject::release_createdtime() {
  clear_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdtime_;
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string archivedDate = 11;
inline bool ArchivedProject::has_archiveddate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ArchivedProject::set_has_archiveddate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ArchivedProject::clear_has_archiveddate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ArchivedProject::clear_archiveddate() {
  if (archiveddate_ != &::google::protobuf::internal::kEmptyString) {
    archiveddate_->clear();
  }
  clear_has_archiveddate();
}
inline const ::std::string& ArchivedProject::archiveddate() const {
  return *archiveddate_;
}
inline void ArchivedProject::set_archiveddate(const ::std::string& value) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(value);
}
inline void ArchivedProject::set_archiveddate(const char* value) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(value);
}
inline void ArchivedProject::set_archiveddate(const char* value, size_t size) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedProject::mutable_archiveddate() {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  return archiveddate_;
}
inline ::std::string* ArchivedProject::release_archiveddate() {
  clear_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = archiveddate_;
    archiveddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 translatorId = 12;
inline bool ArchivedProject::has_translatorid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ArchivedProject::set_has_translatorid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ArchivedProject::clear_has_translatorid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ArchivedProject::clear_translatorid() {
  translatorid_ = 0;
  clear_has_translatorid();
}
inline ::google::protobuf::int32 ArchivedProject::translatorid() const {
  return translatorid_;
}
inline void ArchivedProject::set_translatorid(::google::protobuf::int32 value) {
  set_has_translatorid();
  translatorid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ArchivedProject_2eproto__INCLUDED
