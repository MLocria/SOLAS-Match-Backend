// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FeedbackEmail.proto

#ifndef PROTOBUF_FeedbackEmail_2eproto__INCLUDED
#define PROTOBUF_FeedbackEmail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "EmailMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FeedbackEmail_2eproto();
void protobuf_AssignDesc_FeedbackEmail_2eproto();
void protobuf_ShutdownFile_FeedbackEmail_2eproto();

class FeedbackEmail;

// ===================================================================

class FeedbackEmail : public ::google::protobuf::Message {
 public:
  FeedbackEmail();
  virtual ~FeedbackEmail();
  
  FeedbackEmail(const FeedbackEmail& from);
  
  inline FeedbackEmail& operator=(const FeedbackEmail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedbackEmail& default_instance();
  
  void Swap(FeedbackEmail* other);
  
  // implements Message ----------------------------------------------
  
  FeedbackEmail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedbackEmail& from);
  void MergeFrom(const FeedbackEmail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EmailMessage.Type email_type = 1 [default = FeedbackEmail];
  inline bool has_email_type() const;
  inline void clear_email_type();
  static const int kEmailTypeFieldNumber = 1;
  inline ::EmailMessage_Type email_type() const;
  inline void set_email_type(::EmailMessage_Type value);
  
  // required int32 taskId = 2;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);
  
  // repeated int32 userId = 3;
  inline int userid_size() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 userid(int index) const;
  inline void set_userid(int index, ::google::protobuf::int32 value);
  inline void add_userid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      userid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_userid();
  
  // required string feedback = 4;
  inline bool has_feedback() const;
  inline void clear_feedback();
  static const int kFeedbackFieldNumber = 4;
  inline const ::std::string& feedback() const;
  inline void set_feedback(const ::std::string& value);
  inline void set_feedback(const char* value);
  inline void set_feedback(const char* value, size_t size);
  inline ::std::string* mutable_feedback();
  inline ::std::string* release_feedback();
  
  // @@protoc_insertion_point(class_scope:FeedbackEmail)
 private:
  inline void set_has_email_type();
  inline void clear_has_email_type();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_feedback();
  inline void clear_has_feedback();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int email_type_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > userid_;
  ::std::string* feedback_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_FeedbackEmail_2eproto();
  friend void protobuf_AssignDesc_FeedbackEmail_2eproto();
  friend void protobuf_ShutdownFile_FeedbackEmail_2eproto();
  
  void InitAsDefaultInstance();
  static FeedbackEmail* default_instance_;
};
// ===================================================================


// ===================================================================

// FeedbackEmail

// required .EmailMessage.Type email_type = 1 [default = FeedbackEmail];
inline bool FeedbackEmail::has_email_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedbackEmail::set_has_email_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedbackEmail::clear_has_email_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedbackEmail::clear_email_type() {
  email_type_ = 11;
  clear_has_email_type();
}
inline ::EmailMessage_Type FeedbackEmail::email_type() const {
  return static_cast< ::EmailMessage_Type >(email_type_);
}
inline void FeedbackEmail::set_email_type(::EmailMessage_Type value) {
  GOOGLE_DCHECK(::EmailMessage_Type_IsValid(value));
  set_has_email_type();
  email_type_ = value;
}

// required int32 taskId = 2;
inline bool FeedbackEmail::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedbackEmail::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedbackEmail::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedbackEmail::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 FeedbackEmail::taskid() const {
  return taskid_;
}
inline void FeedbackEmail::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
}

// repeated int32 userId = 3;
inline int FeedbackEmail::userid_size() const {
  return userid_.size();
}
inline void FeedbackEmail::clear_userid() {
  userid_.Clear();
}
inline ::google::protobuf::int32 FeedbackEmail::userid(int index) const {
  return userid_.Get(index);
}
inline void FeedbackEmail::set_userid(int index, ::google::protobuf::int32 value) {
  userid_.Set(index, value);
}
inline void FeedbackEmail::add_userid(::google::protobuf::int32 value) {
  userid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FeedbackEmail::userid() const {
  return userid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FeedbackEmail::mutable_userid() {
  return &userid_;
}

// required string feedback = 4;
inline bool FeedbackEmail::has_feedback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeedbackEmail::set_has_feedback() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeedbackEmail::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeedbackEmail::clear_feedback() {
  if (feedback_ != &::google::protobuf::internal::kEmptyString) {
    feedback_->clear();
  }
  clear_has_feedback();
}
inline const ::std::string& FeedbackEmail::feedback() const {
  return *feedback_;
}
inline void FeedbackEmail::set_feedback(const ::std::string& value) {
  set_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(value);
}
inline void FeedbackEmail::set_feedback(const char* value) {
  set_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(value);
}
inline void FeedbackEmail::set_feedback(const char* value, size_t size) {
  set_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    feedback_ = new ::std::string;
  }
  feedback_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FeedbackEmail::mutable_feedback() {
  set_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    feedback_ = new ::std::string;
  }
  return feedback_;
}
inline ::std::string* FeedbackEmail::release_feedback() {
  clear_has_feedback();
  if (feedback_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = feedback_;
    feedback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FeedbackEmail_2eproto__INCLUDED
