// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Locale.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

namespace {

const ::google::protobuf::Descriptor* Locale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Locale_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Locale_2eproto() {
  protobuf_AddDesc_Locale_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Locale.proto");
  GOOGLE_CHECK(file != NULL);
  Locale_descriptor_ = file->message_type(0);
  static const int Locale_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locale, languagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locale, languagecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locale, countryname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locale, countrycode_),
  };
  Locale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Locale_descriptor_,
      Locale::default_instance_,
      Locale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Locale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Locale));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Locale_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Locale_descriptor_, &Locale::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Locale_2eproto() {
  delete Locale::default_instance_;
  delete Locale_reflection_;
}

void protobuf_AddDesc_Locale_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Locale.proto\022\"SolasMatch.Common.Protob"
    "ufs.Models\"^\n\006Locale\022\024\n\014languageName\030\001 \001"
    "(\t\022\024\n\014languageCode\030\002 \001(\t\022\023\n\013countryName\030"
    "\003 \001(\t\022\023\n\013countryCode\030\004 \001(\t", 146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Locale.proto", &protobuf_RegisterTypes);
  Locale::default_instance_ = new Locale();
  Locale::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Locale_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Locale_2eproto {
  StaticDescriptorInitializer_Locale_2eproto() {
    protobuf_AddDesc_Locale_2eproto();
  }
} static_descriptor_initializer_Locale_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Locale::kLanguageNameFieldNumber;
const int Locale::kLanguageCodeFieldNumber;
const int Locale::kCountryNameFieldNumber;
const int Locale::kCountryCodeFieldNumber;
#endif  // !_MSC_VER

Locale::Locale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Locale::InitAsDefaultInstance() {
}

Locale::Locale(const Locale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Locale::SharedCtor() {
  _cached_size_ = 0;
  languagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  languagecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countryname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Locale::~Locale() {
  SharedDtor();
}

void Locale::SharedDtor() {
  if (languagename_ != &::google::protobuf::internal::kEmptyString) {
    delete languagename_;
  }
  if (languagecode_ != &::google::protobuf::internal::kEmptyString) {
    delete languagecode_;
  }
  if (countryname_ != &::google::protobuf::internal::kEmptyString) {
    delete countryname_;
  }
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete countrycode_;
  }
  if (this != default_instance_) {
  }
}

void Locale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Locale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Locale_descriptor_;
}

const Locale& Locale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Locale_2eproto();  return *default_instance_;
}

Locale* Locale::default_instance_ = NULL;

Locale* Locale::New() const {
  return new Locale;
}

void Locale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_languagename()) {
      if (languagename_ != &::google::protobuf::internal::kEmptyString) {
        languagename_->clear();
      }
    }
    if (has_languagecode()) {
      if (languagecode_ != &::google::protobuf::internal::kEmptyString) {
        languagecode_->clear();
      }
    }
    if (has_countryname()) {
      if (countryname_ != &::google::protobuf::internal::kEmptyString) {
        countryname_->clear();
      }
    }
    if (has_countrycode()) {
      if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
        countrycode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Locale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string languageName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagename().data(), this->languagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_languageCode;
        break;
      }
      
      // optional string languageCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_languageCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_languagecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->languagecode().data(), this->languagecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_countryName;
        break;
      }
      
      // optional string countryName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countryName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countryname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->countryname().data(), this->countryname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_countryCode;
        break;
      }
      
      // optional string countryCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Locale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string languageName = 1;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->languagename(), output);
  }
  
  // optional string languageCode = 2;
  if (has_languagecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagecode().data(), this->languagecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->languagecode(), output);
  }
  
  // optional string countryName = 3;
  if (has_countryname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countryname().data(), this->countryname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->countryname(), output);
  }
  
  // optional string countryCode = 4;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->countrycode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Locale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string languageName = 1;
  if (has_languagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagename().data(), this->languagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->languagename(), target);
  }
  
  // optional string languageCode = 2;
  if (has_languagecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->languagecode().data(), this->languagecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->languagecode(), target);
  }
  
  // optional string countryName = 3;
  if (has_countryname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countryname().data(), this->countryname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->countryname(), target);
  }
  
  // optional string countryCode = 4;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->countrycode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Locale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string languageName = 1;
    if (has_languagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagename());
    }
    
    // optional string languageCode = 2;
    if (has_languagecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->languagecode());
    }
    
    // optional string countryName = 3;
    if (has_countryname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countryname());
    }
    
    // optional string countryCode = 4;
    if (has_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Locale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Locale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Locale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Locale::MergeFrom(const Locale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_languagename()) {
      set_languagename(from.languagename());
    }
    if (from.has_languagecode()) {
      set_languagecode(from.languagecode());
    }
    if (from.has_countryname()) {
      set_countryname(from.countryname());
    }
    if (from.has_countrycode()) {
      set_countrycode(from.countrycode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Locale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Locale::CopyFrom(const Locale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locale::IsInitialized() const {
  
  return true;
}

void Locale::Swap(Locale* other) {
  if (other != this) {
    std::swap(languagename_, other->languagename_);
    std::swap(languagecode_, other->languagecode_);
    std::swap(countryname_, other->countryname_);
    std::swap(countrycode_, other->countrycode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Locale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Locale_descriptor_;
  metadata.reflection = Locale_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)
