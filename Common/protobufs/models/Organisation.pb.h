// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Organisation.proto

#ifndef PROTOBUF_Organisation_2eproto__INCLUDED
#define PROTOBUF_Organisation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Organisation_2eproto();
void protobuf_AssignDesc_Organisation_2eproto();
void protobuf_ShutdownFile_Organisation_2eproto();

class Organisation;

// ===================================================================

class Organisation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.Organisation) */ {
 public:
  Organisation();
  virtual ~Organisation();

  Organisation(const Organisation& from);

  inline Organisation& operator=(const Organisation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Organisation& default_instance();

  void Swap(Organisation* other);

  // implements Message ----------------------------------------------

  inline Organisation* New() const { return New(NULL); }

  Organisation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Organisation& from);
  void MergeFrom(const Organisation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Organisation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string biography = 3;
  bool has_biography() const;
  void clear_biography();
  static const int kBiographyFieldNumber = 3;
  const ::std::string& biography() const;
  void set_biography(const ::std::string& value);
  void set_biography(const char* value);
  void set_biography(const char* value, size_t size);
  ::std::string* mutable_biography();
  ::std::string* release_biography();
  void set_allocated_biography(::std::string* biography);

  // optional string homepage = 4;
  bool has_homepage() const;
  void clear_homepage();
  static const int kHomepageFieldNumber = 4;
  const ::std::string& homepage() const;
  void set_homepage(const ::std::string& value);
  void set_homepage(const char* value);
  void set_homepage(const char* value, size_t size);
  ::std::string* mutable_homepage();
  ::std::string* release_homepage();
  void set_allocated_homepage(::std::string* homepage);

  // optional string email = 5;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 5;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string address = 6;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string city = 7;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 7;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string country = 8;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 8;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string regionalFocus = 9;
  bool has_regionalfocus() const;
  void clear_regionalfocus();
  static const int kRegionalFocusFieldNumber = 9;
  const ::std::string& regionalfocus() const;
  void set_regionalfocus(const ::std::string& value);
  void set_regionalfocus(const char* value);
  void set_regionalfocus(const char* value, size_t size);
  ::std::string* mutable_regionalfocus();
  ::std::string* release_regionalfocus();
  void set_allocated_regionalfocus(::std::string* regionalfocus);

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.Organisation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_biography();
  inline void clear_has_biography();
  inline void set_has_homepage();
  inline void clear_has_homepage();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_regionalfocus();
  inline void clear_has_regionalfocus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr biography_;
  ::google::protobuf::internal::ArenaStringPtr homepage_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr regionalfocus_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_Organisation_2eproto();
  friend void protobuf_AssignDesc_Organisation_2eproto();
  friend void protobuf_ShutdownFile_Organisation_2eproto();

  void InitAsDefaultInstance();
  static Organisation* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Organisation

// optional int32 id = 1;
inline bool Organisation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Organisation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Organisation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Organisation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Organisation::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.id)
  return id_;
}
inline void Organisation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.id)
}

// optional string name = 2;
inline bool Organisation::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Organisation::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Organisation::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Organisation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Organisation::name() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.name)
}
inline void Organisation::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.name)
}
inline void Organisation::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.name)
}
inline ::std::string* Organisation::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organisation::release_name() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.name)
}

// optional string biography = 3;
inline bool Organisation::has_biography() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Organisation::set_has_biography() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Organisation::clear_has_biography() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Organisation::clear_biography() {
  biography_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_biography();
}
inline const ::std::string& Organisation::biography() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.biography)
  return biography_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_biography(const ::std::string& value) {
  set_has_biography();
  biography_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}
inline void Organisation::set_biography(const char* value) {
  set_has_biography();
  biography_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}
inline void Organisation::set_biography(const char* value, size_t size) {
  set_has_biography();
  biography_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}
inline ::std::string* Organisation::mutable_biography() {
  set_has_biography();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.biography)
  return biography_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organisation::release_biography() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.biography)
  clear_has_biography();
  return biography_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_allocated_biography(::std::string* biography) {
  if (biography != NULL) {
    set_has_biography();
  } else {
    clear_has_biography();
  }
  biography_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), biography);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}

// optional string homepage = 4;
inline bool Organisation::has_homepage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Organisation::set_has_homepage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Organisation::clear_has_homepage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Organisation::clear_homepage() {
  homepage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homepage();
}
inline const ::std::string& Organisation::homepage() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
  return homepage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_homepage(const ::std::string& value) {
  set_has_homepage();
  homepage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}
inline void Organisation::set_homepage(const char* value) {
  set_has_homepage();
  homepage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}
inline void Organisation::set_homepage(const char* value, size_t size) {
  set_has_homepage();
  homepage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}
inline ::std::string* Organisation::mutable_homepage() {
  set_has_homepage();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
  return homepage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organisation::release_homepage() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
  clear_has_homepage();
  return homepage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_allocated_homepage(::std::string* homepage) {
  if (homepage != NULL) {
    set_has_homepage();
  } else {
    clear_has_homepage();
  }
  homepage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homepage);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}

// optional string email = 5;
inline bool Organisation::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Organisation::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Organisation::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Organisation::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& Organisation::email() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.email)
}
inline void Organisation::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.email)
}
inline void Organisation::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.email)
}
inline ::std::string* Organisation::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organisation::release_email() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.email)
}

// optional string address = 6;
inline bool Organisation::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Organisation::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Organisation::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Organisation::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Organisation::address() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.address)
}
inline void Organisation::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.address)
}
inline void Organisation::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.address)
}
inline ::std::string* Organisation::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organisation::release_address() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.address)
}

// optional string city = 7;
inline bool Organisation::has_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Organisation::set_has_city() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Organisation::clear_has_city() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Organisation::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& Organisation::city() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.city)
}
inline void Organisation::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.city)
}
inline void Organisation::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.city)
}
inline ::std::string* Organisation::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organisation::release_city() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.city)
}

// optional string country = 8;
inline bool Organisation::has_country() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Organisation::set_has_country() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Organisation::clear_has_country() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Organisation::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& Organisation::country() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.country)
}
inline void Organisation::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.country)
}
inline void Organisation::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.country)
}
inline ::std::string* Organisation::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organisation::release_country() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.country)
}

// optional string regionalFocus = 9;
inline bool Organisation::has_regionalfocus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Organisation::set_has_regionalfocus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Organisation::clear_has_regionalfocus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Organisation::clear_regionalfocus() {
  regionalfocus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regionalfocus();
}
inline const ::std::string& Organisation::regionalfocus() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
  return regionalfocus_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_regionalfocus(const ::std::string& value) {
  set_has_regionalfocus();
  regionalfocus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}
inline void Organisation::set_regionalfocus(const char* value) {
  set_has_regionalfocus();
  regionalfocus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}
inline void Organisation::set_regionalfocus(const char* value, size_t size) {
  set_has_regionalfocus();
  regionalfocus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}
inline ::std::string* Organisation::mutable_regionalfocus() {
  set_has_regionalfocus();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
  return regionalfocus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organisation::release_regionalfocus() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
  clear_has_regionalfocus();
  return regionalfocus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organisation::set_allocated_regionalfocus(::std::string* regionalfocus) {
  if (regionalfocus != NULL) {
    set_has_regionalfocus();
  } else {
    clear_has_regionalfocus();
  }
  regionalfocus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regionalfocus);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Organisation_2eproto__INCLUDED
