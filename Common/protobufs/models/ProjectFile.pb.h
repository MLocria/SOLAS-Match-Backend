// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProjectFile.proto

#ifndef PROTOBUF_ProjectFile_2eproto__INCLUDED
#define PROTOBUF_ProjectFile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProjectFile_2eproto();
void protobuf_AssignDesc_ProjectFile_2eproto();
void protobuf_ShutdownFile_ProjectFile_2eproto();

class ProjectFile;

// ===================================================================

class ProjectFile : public ::google::protobuf::Message {
 public:
  ProjectFile();
  virtual ~ProjectFile();

  ProjectFile(const ProjectFile& from);

  inline ProjectFile& operator=(const ProjectFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectFile& default_instance();

  void Swap(ProjectFile* other);

  // implements Message ----------------------------------------------

  ProjectFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjectFile& from);
  void MergeFrom(const ProjectFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 projectId = 1;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIdFieldNumber = 1;
  inline ::google::protobuf::int32 projectid() const;
  inline void set_projectid(::google::protobuf::int32 value);

  // optional string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional int32 userId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string mime = 5;
  inline bool has_mime() const;
  inline void clear_mime();
  static const int kMimeFieldNumber = 5;
  inline const ::std::string& mime() const;
  inline void set_mime(const ::std::string& value);
  inline void set_mime(const char* value);
  inline void set_mime(const char* value, size_t size);
  inline ::std::string* mutable_mime();
  inline ::std::string* release_mime();
  inline void set_allocated_mime(::std::string* mime);

  // @@protoc_insertion_point(class_scope:ProjectFile)
 private:
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_mime();
  inline void clear_has_mime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;
  ::google::protobuf::int32 projectid_;
  ::google::protobuf::int32 userid_;
  ::std::string* token_;
  ::std::string* mime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProjectFile_2eproto();
  friend void protobuf_AssignDesc_ProjectFile_2eproto();
  friend void protobuf_ShutdownFile_ProjectFile_2eproto();

  void InitAsDefaultInstance();
  static ProjectFile* default_instance_;
};
// ===================================================================


// ===================================================================

// ProjectFile

// optional int32 projectId = 1;
inline bool ProjectFile::has_projectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjectFile::set_has_projectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjectFile::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjectFile::clear_projectid() {
  projectid_ = 0;
  clear_has_projectid();
}
inline ::google::protobuf::int32 ProjectFile::projectid() const {
  return projectid_;
}
inline void ProjectFile::set_projectid(::google::protobuf::int32 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string filename = 2;
inline bool ProjectFile::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjectFile::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjectFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjectFile::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ProjectFile::filename() const {
  return *filename_;
}
inline void ProjectFile::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ProjectFile::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ProjectFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProjectFile::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* ProjectFile::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProjectFile::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 3;
inline bool ProjectFile::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjectFile::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjectFile::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjectFile::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& ProjectFile::token() const {
  return *token_;
}
inline void ProjectFile::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void ProjectFile::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void ProjectFile::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProjectFile::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* ProjectFile::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProjectFile::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 userId = 4;
inline bool ProjectFile::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjectFile::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjectFile::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjectFile::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ProjectFile::userid() const {
  return userid_;
}
inline void ProjectFile::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string mime = 5;
inline bool ProjectFile::has_mime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjectFile::set_has_mime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjectFile::clear_has_mime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjectFile::clear_mime() {
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    mime_->clear();
  }
  clear_has_mime();
}
inline const ::std::string& ProjectFile::mime() const {
  return *mime_;
}
inline void ProjectFile::set_mime(const ::std::string& value) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(value);
}
inline void ProjectFile::set_mime(const char* value) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(value);
}
inline void ProjectFile::set_mime(const char* value, size_t size) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProjectFile::mutable_mime() {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  return mime_;
}
inline ::std::string* ProjectFile::release_mime() {
  clear_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mime_;
    mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProjectFile::set_allocated_mime(::std::string* mime) {
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    delete mime_;
  }
  if (mime) {
    set_has_mime();
    mime_ = mime;
  } else {
    clear_has_mime();
    mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProjectFile_2eproto__INCLUDED
