// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkflowGraph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorkflowGraph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

namespace {

const ::google::protobuf::Descriptor* WorkflowGraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkflowGraph_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorkflowGraph_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_WorkflowGraph_2eproto() {
  protobuf_AddDesc_WorkflowGraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorkflowGraph.proto");
  GOOGLE_CHECK(file != NULL);
  WorkflowGraph_descriptor_ = file->message_type(0);
  static const int WorkflowGraph_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkflowGraph, rootnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkflowGraph, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkflowGraph, allnodes_),
  };
  WorkflowGraph_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkflowGraph_descriptor_,
      WorkflowGraph::default_instance_,
      WorkflowGraph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkflowGraph, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorkflowGraph),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkflowGraph, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorkflowGraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkflowGraph_descriptor_, &WorkflowGraph::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorkflowGraph_2eproto() {
  delete WorkflowGraph::default_instance_;
  delete WorkflowGraph_reflection_;
}

void protobuf_AddDesc_WorkflowGraph_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_WorkflowGraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SolasMatch::Common::Protobufs::Models::protobuf_AddDesc_WorkflowNode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023WorkflowGraph.proto\022\"SolasMatch.Common"
    ".Protobufs.Models\032\022WorkflowNode.proto\"x\n"
    "\rWorkflowGraph\022\020\n\010rootNode\030\001 \003(\005\022\021\n\tproj"
    "ectId\030\002 \001(\005\022B\n\010allNodes\030\003 \003(\01320.SolasMat"
    "ch.Common.Protobufs.Models.WorkflowNode", 199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorkflowGraph.proto", &protobuf_RegisterTypes);
  WorkflowGraph::default_instance_ = new WorkflowGraph();
  WorkflowGraph::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorkflowGraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorkflowGraph_2eproto {
  StaticDescriptorInitializer_WorkflowGraph_2eproto() {
    protobuf_AddDesc_WorkflowGraph_2eproto();
  }
} static_descriptor_initializer_WorkflowGraph_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowGraph::kRootNodeFieldNumber;
const int WorkflowGraph::kProjectIdFieldNumber;
const int WorkflowGraph::kAllNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowGraph::WorkflowGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
}

void WorkflowGraph::InitAsDefaultInstance() {
}

WorkflowGraph::WorkflowGraph(const WorkflowGraph& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
}

void WorkflowGraph::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkflowGraph::~WorkflowGraph() {
  // @@protoc_insertion_point(destructor:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  SharedDtor();
}

void WorkflowGraph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkflowGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkflowGraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkflowGraph_descriptor_;
}

const WorkflowGraph& WorkflowGraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorkflowGraph_2eproto();
  return *default_instance_;
}

WorkflowGraph* WorkflowGraph::default_instance_ = NULL;

WorkflowGraph* WorkflowGraph::New(::google::protobuf::Arena* arena) const {
  WorkflowGraph* n = new WorkflowGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkflowGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  projectid_ = 0;
  rootnode_.Clear();
  allnodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorkflowGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 rootNode = 1;
      case 1: {
        if (tag == 8) {
         parse_rootNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_rootnode())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rootnode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_rootNode;
        if (input->ExpectTag(16)) goto parse_projectId;
        break;
      }

      // optional int32 projectId = 2;
      case 2: {
        if (tag == 16) {
         parse_projectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_allNodes;
        break;
      }

      // repeated .SolasMatch.Common.Protobufs.Models.WorkflowNode allNodes = 3;
      case 3: {
        if (tag == 26) {
         parse_allNodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_allNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_allnodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_allNodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  return false;
#undef DO_
}

void WorkflowGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  // repeated int32 rootNode = 1;
  for (int i = 0; i < this->rootnode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->rootnode(i), output);
  }

  // optional int32 projectId = 2;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->projectid(), output);
  }

  // repeated .SolasMatch.Common.Protobufs.Models.WorkflowNode allNodes = 3;
  for (unsigned int i = 0, n = this->allnodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->allnodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
}

::google::protobuf::uint8* WorkflowGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  // repeated int32 rootNode = 1;
  for (int i = 0; i < this->rootnode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->rootnode(i), target);
  }

  // optional int32 projectId = 2;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->projectid(), target);
  }

  // repeated .SolasMatch.Common.Protobufs.Models.WorkflowNode allNodes = 3;
  for (unsigned int i = 0, n = this->allnodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->allnodes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  return target;
}

int WorkflowGraph::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  int total_size = 0;

  // optional int32 projectId = 2;
  if (has_projectid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->projectid());
  }

  // repeated int32 rootNode = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rootnode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rootnode(i));
    }
    total_size += 1 * this->rootnode_size() + data_size;
  }

  // repeated .SolasMatch.Common.Protobufs.Models.WorkflowNode allNodes = 3;
  total_size += 1 * this->allnodes_size();
  for (int i = 0; i < this->allnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allnodes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkflowGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorkflowGraph* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkflowGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
    MergeFrom(*source);
  }
}

void WorkflowGraph::MergeFrom(const WorkflowGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rootnode_.MergeFrom(from.rootnode_);
  allnodes_.MergeFrom(from.allnodes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorkflowGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowGraph::CopyFrom(const WorkflowGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SolasMatch.Common.Protobufs.Models.WorkflowGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowGraph::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->allnodes())) return false;
  return true;
}

void WorkflowGraph::Swap(WorkflowGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowGraph::InternalSwap(WorkflowGraph* other) {
  rootnode_.UnsafeArenaSwap(&other->rootnode_);
  std::swap(projectid_, other->projectid_);
  allnodes_.UnsafeArenaSwap(&other->allnodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkflowGraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkflowGraph_descriptor_;
  metadata.reflection = WorkflowGraph_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkflowGraph

// repeated int32 rootNode = 1;
int WorkflowGraph::rootnode_size() const {
  return rootnode_.size();
}
void WorkflowGraph::clear_rootnode() {
  rootnode_.Clear();
}
 ::google::protobuf::int32 WorkflowGraph::rootnode(int index) const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.WorkflowGraph.rootNode)
  return rootnode_.Get(index);
}
 void WorkflowGraph::set_rootnode(int index, ::google::protobuf::int32 value) {
  rootnode_.Set(index, value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.WorkflowGraph.rootNode)
}
 void WorkflowGraph::add_rootnode(::google::protobuf::int32 value) {
  rootnode_.Add(value);
  // @@protoc_insertion_point(field_add:SolasMatch.Common.Protobufs.Models.WorkflowGraph.rootNode)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkflowGraph::rootnode() const {
  // @@protoc_insertion_point(field_list:SolasMatch.Common.Protobufs.Models.WorkflowGraph.rootNode)
  return rootnode_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkflowGraph::mutable_rootnode() {
  // @@protoc_insertion_point(field_mutable_list:SolasMatch.Common.Protobufs.Models.WorkflowGraph.rootNode)
  return &rootnode_;
}

// optional int32 projectId = 2;
bool WorkflowGraph::has_projectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WorkflowGraph::set_has_projectid() {
  _has_bits_[0] |= 0x00000002u;
}
void WorkflowGraph::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000002u;
}
void WorkflowGraph::clear_projectid() {
  projectid_ = 0;
  clear_has_projectid();
}
 ::google::protobuf::int32 WorkflowGraph::projectid() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.WorkflowGraph.projectId)
  return projectid_;
}
 void WorkflowGraph::set_projectid(::google::protobuf::int32 value) {
  set_has_projectid();
  projectid_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.WorkflowGraph.projectId)
}

// repeated .SolasMatch.Common.Protobufs.Models.WorkflowNode allNodes = 3;
int WorkflowGraph::allnodes_size() const {
  return allnodes_.size();
}
void WorkflowGraph::clear_allnodes() {
  allnodes_.Clear();
}
const ::SolasMatch::Common::Protobufs::Models::WorkflowNode& WorkflowGraph::allnodes(int index) const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.WorkflowGraph.allNodes)
  return allnodes_.Get(index);
}
::SolasMatch::Common::Protobufs::Models::WorkflowNode* WorkflowGraph::mutable_allnodes(int index) {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.WorkflowGraph.allNodes)
  return allnodes_.Mutable(index);
}
::SolasMatch::Common::Protobufs::Models::WorkflowNode* WorkflowGraph::add_allnodes() {
  // @@protoc_insertion_point(field_add:SolasMatch.Common.Protobufs.Models.WorkflowGraph.allNodes)
  return allnodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::WorkflowNode >*
WorkflowGraph::mutable_allnodes() {
  // @@protoc_insertion_point(field_mutable_list:SolasMatch.Common.Protobufs.Models.WorkflowGraph.allNodes)
  return &allnodes_;
}
const ::google::protobuf::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::WorkflowNode >&
WorkflowGraph::allnodes() const {
  // @@protoc_insertion_point(field_list:SolasMatch.Common.Protobufs.Models.WorkflowGraph.allNodes)
  return allnodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)
