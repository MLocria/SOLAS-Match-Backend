// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArchivedTask.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArchivedTask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ArchivedTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArchivedTask_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ArchivedTask_2eproto() {
  protobuf_AddDesc_ArchivedTask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ArchivedTask.proto");
  GOOGLE_CHECK(file != NULL);
  ArchivedTask_descriptor_ = file->message_type(0);
  static const int ArchivedTask_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, wordcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, createdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, sourcelocale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, targetlocale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, taskstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, published_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, archivedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, uploadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, useridclaimed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, useridarchived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, prerequisites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, useridtaskcreator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, archiveddate_),
  };
  ArchivedTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArchivedTask_descriptor_,
      ArchivedTask::default_instance_,
      ArchivedTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchivedTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArchivedTask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ArchivedTask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArchivedTask_descriptor_, &ArchivedTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ArchivedTask_2eproto() {
  delete ArchivedTask::default_instance_;
  delete ArchivedTask_reflection_;
}

void protobuf_AddDesc_ArchivedTask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Locale_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ArchivedTask.proto\032\014Locale.proto\"\326\003\n\014A"
    "rchivedTask\022\n\n\002id\030\001 \001(\005\022\021\n\tprojectId\030\002 \001"
    "(\005\022\r\n\005title\030\003 \001(\t\022\017\n\007comment\030\004 \001(\t\022\020\n\010de"
    "adline\030\005 \001(\t\022\021\n\twordCount\030\006 \001(\005\022\023\n\013creat"
    "edTime\030\007 \001(\t\022\035\n\014sourceLocale\030\010 \001(\0132\007.Loc"
    "ale\022\035\n\014targetLocale\030\t \001(\0132\007.Locale\022\020\n\010ta"
    "skType\030\n \001(\005\022\022\n\ntaskStatus\030\013 \001(\t\022\021\n\tpubl"
    "ished\030\014 \001(\010\022\023\n\013archiveDate\030\r \001(\t\022\017\n\007vers"
    "ion\030\016 \001(\005\022\020\n\010fileName\030\017 \001(\t\022\023\n\013contentTy"
    "pe\030\020 \001(\t\022\022\n\nuploadTime\030\021 \001(\t\022\025\n\ruserIdCl"
    "aimed\030\022 \001(\005\022\026\n\016userIdArchived\030\023 \001(\005\022\025\n\rp"
    "rerequisites\030\024 \001(\t\022\031\n\021userIdTaskCreator\030"
    "\025 \001(\005\022\024\n\014archivedDate\030\026 \001(\t", 507);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ArchivedTask.proto", &protobuf_RegisterTypes);
  ArchivedTask::default_instance_ = new ArchivedTask();
  ArchivedTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArchivedTask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArchivedTask_2eproto {
  StaticDescriptorInitializer_ArchivedTask_2eproto() {
    protobuf_AddDesc_ArchivedTask_2eproto();
  }
} static_descriptor_initializer_ArchivedTask_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArchivedTask::kIdFieldNumber;
const int ArchivedTask::kProjectIdFieldNumber;
const int ArchivedTask::kTitleFieldNumber;
const int ArchivedTask::kCommentFieldNumber;
const int ArchivedTask::kDeadlineFieldNumber;
const int ArchivedTask::kWordCountFieldNumber;
const int ArchivedTask::kCreatedTimeFieldNumber;
const int ArchivedTask::kSourceLocaleFieldNumber;
const int ArchivedTask::kTargetLocaleFieldNumber;
const int ArchivedTask::kTaskTypeFieldNumber;
const int ArchivedTask::kTaskStatusFieldNumber;
const int ArchivedTask::kPublishedFieldNumber;
const int ArchivedTask::kArchiveDateFieldNumber;
const int ArchivedTask::kVersionFieldNumber;
const int ArchivedTask::kFileNameFieldNumber;
const int ArchivedTask::kContentTypeFieldNumber;
const int ArchivedTask::kUploadTimeFieldNumber;
const int ArchivedTask::kUserIdClaimedFieldNumber;
const int ArchivedTask::kUserIdArchivedFieldNumber;
const int ArchivedTask::kPrerequisitesFieldNumber;
const int ArchivedTask::kUserIdTaskCreatorFieldNumber;
const int ArchivedTask::kArchivedDateFieldNumber;
#endif  // !_MSC_VER

ArchivedTask::ArchivedTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArchivedTask::InitAsDefaultInstance() {
  sourcelocale_ = const_cast< ::Locale*>(&::Locale::default_instance());
  targetlocale_ = const_cast< ::Locale*>(&::Locale::default_instance());
}

ArchivedTask::ArchivedTask(const ArchivedTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArchivedTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  projectid_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wordcount_ = 0;
  createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcelocale_ = NULL;
  targetlocale_ = NULL;
  tasktype_ = 0;
  taskstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  published_ = false;
  archivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uploadtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useridclaimed_ = 0;
  useridarchived_ = 0;
  prerequisites_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useridtaskcreator_ = 0;
  archiveddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArchivedTask::~ArchivedTask() {
  SharedDtor();
}

void ArchivedTask::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    delete deadline_;
  }
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createdtime_;
  }
  if (taskstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete taskstatus_;
  }
  if (archivedate_ != &::google::protobuf::internal::kEmptyString) {
    delete archivedate_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttype_;
  }
  if (uploadtime_ != &::google::protobuf::internal::kEmptyString) {
    delete uploadtime_;
  }
  if (prerequisites_ != &::google::protobuf::internal::kEmptyString) {
    delete prerequisites_;
  }
  if (archiveddate_ != &::google::protobuf::internal::kEmptyString) {
    delete archiveddate_;
  }
  if (this != default_instance_) {
    delete sourcelocale_;
    delete targetlocale_;
  }
}

void ArchivedTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArchivedTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArchivedTask_descriptor_;
}

const ArchivedTask& ArchivedTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArchivedTask_2eproto();
  return *default_instance_;
}

ArchivedTask* ArchivedTask::default_instance_ = NULL;

ArchivedTask* ArchivedTask::New() const {
  return new ArchivedTask;
}

void ArchivedTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    projectid_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_deadline()) {
      if (deadline_ != &::google::protobuf::internal::kEmptyString) {
        deadline_->clear();
      }
    }
    wordcount_ = 0;
    if (has_createdtime()) {
      if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
        createdtime_->clear();
      }
    }
    if (has_sourcelocale()) {
      if (sourcelocale_ != NULL) sourcelocale_->::Locale::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_targetlocale()) {
      if (targetlocale_ != NULL) targetlocale_->::Locale::Clear();
    }
    tasktype_ = 0;
    if (has_taskstatus()) {
      if (taskstatus_ != &::google::protobuf::internal::kEmptyString) {
        taskstatus_->clear();
      }
    }
    published_ = false;
    if (has_archivedate()) {
      if (archivedate_ != &::google::protobuf::internal::kEmptyString) {
        archivedate_->clear();
      }
    }
    version_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_contenttype()) {
      if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
        contenttype_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_uploadtime()) {
      if (uploadtime_ != &::google::protobuf::internal::kEmptyString) {
        uploadtime_->clear();
      }
    }
    useridclaimed_ = 0;
    useridarchived_ = 0;
    if (has_prerequisites()) {
      if (prerequisites_ != &::google::protobuf::internal::kEmptyString) {
        prerequisites_->clear();
      }
    }
    useridtaskcreator_ = 0;
    if (has_archiveddate()) {
      if (archiveddate_ != &::google::protobuf::internal::kEmptyString) {
        archiveddate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArchivedTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_projectId;
        break;
      }

      // optional int32 projectId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_projectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_comment;
        break;
      }

      // optional string comment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deadline;
        break;
      }

      // optional string deadline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deadline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deadline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deadline().data(), this->deadline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wordCount;
        break;
      }

      // optional int32 wordCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wordCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wordcount_)));
          set_has_wordcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_createdTime;
        break;
      }

      // optional string createdTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdtime().data(), this->createdtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sourceLocale;
        break;
      }

      // optional .Locale sourceLocale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceLocale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourcelocale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_targetLocale;
        break;
      }

      // optional .Locale targetLocale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetLocale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetlocale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_taskType;
        break;
      }

      // optional int32 taskType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_taskStatus;
        break;
      }

      // optional string taskStatus = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskstatus().data(), this->taskstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_published;
        break;
      }

      // optional bool published = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_published:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &published_)));
          set_has_published();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_archiveDate;
        break;
      }

      // optional string archiveDate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archiveDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_archivedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->archivedate().data(), this->archivedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_version;
        break;
      }

      // optional int32 version = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_fileName;
        break;
      }

      // optional string fileName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_contentType;
        break;
      }

      // optional string contentType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contentType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contenttype().data(), this->contenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_uploadTime;
        break;
      }

      // optional string uploadTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uploadTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uploadtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uploadtime().data(), this->uploadtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_userIdClaimed;
        break;
      }

      // optional int32 userIdClaimed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userIdClaimed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useridclaimed_)));
          set_has_useridclaimed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_userIdArchived;
        break;
      }

      // optional int32 userIdArchived = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userIdArchived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useridarchived_)));
          set_has_useridarchived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_prerequisites;
        break;
      }

      // optional string prerequisites = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prerequisites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prerequisites()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prerequisites().data(), this->prerequisites().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_userIdTaskCreator;
        break;
      }

      // optional int32 userIdTaskCreator = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userIdTaskCreator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useridtaskcreator_)));
          set_has_useridtaskcreator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_archivedDate;
        break;
      }

      // optional string archivedDate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archivedDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_archiveddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->archiveddate().data(), this->archiveddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArchivedTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 projectId = 2;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->projectid(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->comment(), output);
  }

  // optional string deadline = 5;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deadline().data(), this->deadline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->deadline(), output);
  }

  // optional int32 wordCount = 6;
  if (has_wordcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wordcount(), output);
  }

  // optional string createdTime = 7;
  if (has_createdtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdtime().data(), this->createdtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->createdtime(), output);
  }

  // optional .Locale sourceLocale = 8;
  if (has_sourcelocale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sourcelocale(), output);
  }

  // optional .Locale targetLocale = 9;
  if (has_targetlocale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->targetlocale(), output);
  }

  // optional int32 taskType = 10;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tasktype(), output);
  }

  // optional string taskStatus = 11;
  if (has_taskstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskstatus().data(), this->taskstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->taskstatus(), output);
  }

  // optional bool published = 12;
  if (has_published()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->published(), output);
  }

  // optional string archiveDate = 13;
  if (has_archivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archivedate().data(), this->archivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->archivedate(), output);
  }

  // optional int32 version = 14;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->version(), output);
  }

  // optional string fileName = 15;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->filename(), output);
  }

  // optional string contentType = 16;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->contenttype(), output);
  }

  // optional string uploadTime = 17;
  if (has_uploadtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uploadtime().data(), this->uploadtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->uploadtime(), output);
  }

  // optional int32 userIdClaimed = 18;
  if (has_useridclaimed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->useridclaimed(), output);
  }

  // optional int32 userIdArchived = 19;
  if (has_useridarchived()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->useridarchived(), output);
  }

  // optional string prerequisites = 20;
  if (has_prerequisites()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prerequisites().data(), this->prerequisites().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->prerequisites(), output);
  }

  // optional int32 userIdTaskCreator = 21;
  if (has_useridtaskcreator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->useridtaskcreator(), output);
  }

  // optional string archivedDate = 22;
  if (has_archiveddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archiveddate().data(), this->archiveddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->archiveddate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArchivedTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 projectId = 2;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->projectid(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }

  // optional string deadline = 5;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deadline().data(), this->deadline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deadline(), target);
  }

  // optional int32 wordCount = 6;
  if (has_wordcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wordcount(), target);
  }

  // optional string createdTime = 7;
  if (has_createdtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdtime().data(), this->createdtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->createdtime(), target);
  }

  // optional .Locale sourceLocale = 8;
  if (has_sourcelocale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sourcelocale(), target);
  }

  // optional .Locale targetLocale = 9;
  if (has_targetlocale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->targetlocale(), target);
  }

  // optional int32 taskType = 10;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tasktype(), target);
  }

  // optional string taskStatus = 11;
  if (has_taskstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskstatus().data(), this->taskstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->taskstatus(), target);
  }

  // optional bool published = 12;
  if (has_published()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->published(), target);
  }

  // optional string archiveDate = 13;
  if (has_archivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archivedate().data(), this->archivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->archivedate(), target);
  }

  // optional int32 version = 14;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->version(), target);
  }

  // optional string fileName = 15;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->filename(), target);
  }

  // optional string contentType = 16;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->contenttype(), target);
  }

  // optional string uploadTime = 17;
  if (has_uploadtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uploadtime().data(), this->uploadtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->uploadtime(), target);
  }

  // optional int32 userIdClaimed = 18;
  if (has_useridclaimed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->useridclaimed(), target);
  }

  // optional int32 userIdArchived = 19;
  if (has_useridarchived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->useridarchived(), target);
  }

  // optional string prerequisites = 20;
  if (has_prerequisites()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prerequisites().data(), this->prerequisites().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->prerequisites(), target);
  }

  // optional int32 userIdTaskCreator = 21;
  if (has_useridtaskcreator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->useridtaskcreator(), target);
  }

  // optional string archivedDate = 22;
  if (has_archiveddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->archiveddate().data(), this->archiveddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->archiveddate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArchivedTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 projectId = 2;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->projectid());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string comment = 4;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string deadline = 5;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deadline());
    }

    // optional int32 wordCount = 6;
    if (has_wordcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wordcount());
    }

    // optional string createdTime = 7;
    if (has_createdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdtime());
    }

    // optional .Locale sourceLocale = 8;
    if (has_sourcelocale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcelocale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Locale targetLocale = 9;
    if (has_targetlocale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetlocale());
    }

    // optional int32 taskType = 10;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }

    // optional string taskStatus = 11;
    if (has_taskstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskstatus());
    }

    // optional bool published = 12;
    if (has_published()) {
      total_size += 1 + 1;
    }

    // optional string archiveDate = 13;
    if (has_archivedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->archivedate());
    }

    // optional int32 version = 14;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string fileName = 15;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string contentType = 16;
    if (has_contenttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string uploadTime = 17;
    if (has_uploadtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uploadtime());
    }

    // optional int32 userIdClaimed = 18;
    if (has_useridclaimed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useridclaimed());
    }

    // optional int32 userIdArchived = 19;
    if (has_useridarchived()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useridarchived());
    }

    // optional string prerequisites = 20;
    if (has_prerequisites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prerequisites());
    }

    // optional int32 userIdTaskCreator = 21;
    if (has_useridtaskcreator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useridtaskcreator());
    }

    // optional string archivedDate = 22;
    if (has_archiveddate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->archiveddate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArchivedTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArchivedTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArchivedTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArchivedTask::MergeFrom(const ArchivedTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
    if (from.has_wordcount()) {
      set_wordcount(from.wordcount());
    }
    if (from.has_createdtime()) {
      set_createdtime(from.createdtime());
    }
    if (from.has_sourcelocale()) {
      mutable_sourcelocale()->::Locale::MergeFrom(from.sourcelocale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetlocale()) {
      mutable_targetlocale()->::Locale::MergeFrom(from.targetlocale());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_taskstatus()) {
      set_taskstatus(from.taskstatus());
    }
    if (from.has_published()) {
      set_published(from.published());
    }
    if (from.has_archivedate()) {
      set_archivedate(from.archivedate());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_uploadtime()) {
      set_uploadtime(from.uploadtime());
    }
    if (from.has_useridclaimed()) {
      set_useridclaimed(from.useridclaimed());
    }
    if (from.has_useridarchived()) {
      set_useridarchived(from.useridarchived());
    }
    if (from.has_prerequisites()) {
      set_prerequisites(from.prerequisites());
    }
    if (from.has_useridtaskcreator()) {
      set_useridtaskcreator(from.useridtaskcreator());
    }
    if (from.has_archiveddate()) {
      set_archiveddate(from.archiveddate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArchivedTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchivedTask::CopyFrom(const ArchivedTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchivedTask::IsInitialized() const {

  return true;
}

void ArchivedTask::Swap(ArchivedTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(projectid_, other->projectid_);
    std::swap(title_, other->title_);
    std::swap(comment_, other->comment_);
    std::swap(deadline_, other->deadline_);
    std::swap(wordcount_, other->wordcount_);
    std::swap(createdtime_, other->createdtime_);
    std::swap(sourcelocale_, other->sourcelocale_);
    std::swap(targetlocale_, other->targetlocale_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(taskstatus_, other->taskstatus_);
    std::swap(published_, other->published_);
    std::swap(archivedate_, other->archivedate_);
    std::swap(version_, other->version_);
    std::swap(filename_, other->filename_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(uploadtime_, other->uploadtime_);
    std::swap(useridclaimed_, other->useridclaimed_);
    std::swap(useridarchived_, other->useridarchived_);
    std::swap(prerequisites_, other->prerequisites_);
    std::swap(useridtaskcreator_, other->useridtaskcreator_);
    std::swap(archiveddate_, other->archiveddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArchivedTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArchivedTask_descriptor_;
  metadata.reflection = ArchivedTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
