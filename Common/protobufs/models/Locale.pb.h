// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Locale.proto

#ifndef PROTOBUF_Locale_2eproto__INCLUDED
#define PROTOBUF_Locale_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Locale_2eproto();
void protobuf_AssignDesc_Locale_2eproto();
void protobuf_ShutdownFile_Locale_2eproto();

class Locale;

// ===================================================================

class Locale : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.Locale) */ {
 public:
  Locale();
  virtual ~Locale();

  Locale(const Locale& from);

  inline Locale& operator=(const Locale& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Locale& default_instance();

  void Swap(Locale* other);

  // implements Message ----------------------------------------------

  inline Locale* New() const { return New(NULL); }

  Locale* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Locale& from);
  void MergeFrom(const Locale& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Locale* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string languageName = 1;
  bool has_languagename() const;
  void clear_languagename();
  static const int kLanguageNameFieldNumber = 1;
  const ::std::string& languagename() const;
  void set_languagename(const ::std::string& value);
  void set_languagename(const char* value);
  void set_languagename(const char* value, size_t size);
  ::std::string* mutable_languagename();
  ::std::string* release_languagename();
  void set_allocated_languagename(::std::string* languagename);

  // optional string languageCode = 2;
  bool has_languagecode() const;
  void clear_languagecode();
  static const int kLanguageCodeFieldNumber = 2;
  const ::std::string& languagecode() const;
  void set_languagecode(const ::std::string& value);
  void set_languagecode(const char* value);
  void set_languagecode(const char* value, size_t size);
  ::std::string* mutable_languagecode();
  ::std::string* release_languagecode();
  void set_allocated_languagecode(::std::string* languagecode);

  // optional string countryName = 3;
  bool has_countryname() const;
  void clear_countryname();
  static const int kCountryNameFieldNumber = 3;
  const ::std::string& countryname() const;
  void set_countryname(const ::std::string& value);
  void set_countryname(const char* value);
  void set_countryname(const char* value, size_t size);
  ::std::string* mutable_countryname();
  ::std::string* release_countryname();
  void set_allocated_countryname(::std::string* countryname);

  // optional string countryCode = 4;
  bool has_countrycode() const;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 4;
  const ::std::string& countrycode() const;
  void set_countrycode(const ::std::string& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  ::std::string* mutable_countrycode();
  ::std::string* release_countrycode();
  void set_allocated_countrycode(::std::string* countrycode);

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.Locale)
 private:
  inline void set_has_languagename();
  inline void clear_has_languagename();
  inline void set_has_languagecode();
  inline void clear_has_languagecode();
  inline void set_has_countryname();
  inline void clear_has_countryname();
  inline void set_has_countrycode();
  inline void clear_has_countrycode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr languagename_;
  ::google::protobuf::internal::ArenaStringPtr languagecode_;
  ::google::protobuf::internal::ArenaStringPtr countryname_;
  ::google::protobuf::internal::ArenaStringPtr countrycode_;
  friend void  protobuf_AddDesc_Locale_2eproto();
  friend void protobuf_AssignDesc_Locale_2eproto();
  friend void protobuf_ShutdownFile_Locale_2eproto();

  void InitAsDefaultInstance();
  static Locale* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Locale

// optional string languageName = 1;
inline bool Locale::has_languagename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Locale::set_has_languagename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Locale::clear_has_languagename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Locale::clear_languagename() {
  languagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_languagename();
}
inline const ::std::string& Locale::languagename() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Locale.languageName)
  return languagename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_languagename(const ::std::string& value) {
  set_has_languagename();
  languagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}
inline void Locale::set_languagename(const char* value) {
  set_has_languagename();
  languagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}
inline void Locale::set_languagename(const char* value, size_t size) {
  set_has_languagename();
  languagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}
inline ::std::string* Locale::mutable_languagename() {
  set_has_languagename();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Locale.languageName)
  return languagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Locale::release_languagename() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Locale.languageName)
  clear_has_languagename();
  return languagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_allocated_languagename(::std::string* languagename) {
  if (languagename != NULL) {
    set_has_languagename();
  } else {
    clear_has_languagename();
  }
  languagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), languagename);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}

// optional string languageCode = 2;
inline bool Locale::has_languagecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Locale::set_has_languagecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Locale::clear_has_languagecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Locale::clear_languagecode() {
  languagecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_languagecode();
}
inline const ::std::string& Locale::languagecode() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
  return languagecode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_languagecode(const ::std::string& value) {
  set_has_languagecode();
  languagecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}
inline void Locale::set_languagecode(const char* value) {
  set_has_languagecode();
  languagecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}
inline void Locale::set_languagecode(const char* value, size_t size) {
  set_has_languagecode();
  languagecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}
inline ::std::string* Locale::mutable_languagecode() {
  set_has_languagecode();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
  return languagecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Locale::release_languagecode() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
  clear_has_languagecode();
  return languagecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_allocated_languagecode(::std::string* languagecode) {
  if (languagecode != NULL) {
    set_has_languagecode();
  } else {
    clear_has_languagecode();
  }
  languagecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), languagecode);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}

// optional string countryName = 3;
inline bool Locale::has_countryname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Locale::set_has_countryname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Locale::clear_has_countryname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Locale::clear_countryname() {
  countryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_countryname();
}
inline const ::std::string& Locale::countryname() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Locale.countryName)
  return countryname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_countryname(const ::std::string& value) {
  set_has_countryname();
  countryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}
inline void Locale::set_countryname(const char* value) {
  set_has_countryname();
  countryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}
inline void Locale::set_countryname(const char* value, size_t size) {
  set_has_countryname();
  countryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}
inline ::std::string* Locale::mutable_countryname() {
  set_has_countryname();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Locale.countryName)
  return countryname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Locale::release_countryname() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Locale.countryName)
  clear_has_countryname();
  return countryname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_allocated_countryname(::std::string* countryname) {
  if (countryname != NULL) {
    set_has_countryname();
  } else {
    clear_has_countryname();
  }
  countryname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countryname);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}

// optional string countryCode = 4;
inline bool Locale::has_countrycode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Locale::set_has_countrycode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Locale::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Locale::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_countrycode();
}
inline const ::std::string& Locale::countrycode() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_countrycode(const ::std::string& value) {
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}
inline void Locale::set_countrycode(const char* value) {
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}
inline void Locale::set_countrycode(const char* value, size_t size) {
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}
inline ::std::string* Locale::mutable_countrycode() {
  set_has_countrycode();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Locale::release_countrycode() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
  clear_has_countrycode();
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locale::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    set_has_countrycode();
  } else {
    clear_has_countrycode();
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Locale_2eproto__INCLUDED
