// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef PROTOBUF_User_2eproto__INCLUDED
#define PROTOBUF_User_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Locale.pb.h"
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_User_2eproto();
void protobuf_AssignDesc_User_2eproto();
void protobuf_ShutdownFile_User_2eproto();

class User;

// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  inline User* New() const { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string display_name = 2;
  bool has_display_name() const;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // optional string email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string biography = 5;
  bool has_biography() const;
  void clear_biography();
  static const int kBiographyFieldNumber = 5;
  const ::std::string& biography() const;
  void set_biography(const ::std::string& value);
  void set_biography(const char* value);
  void set_biography(const char* value, size_t size);
  ::std::string* mutable_biography();
  ::std::string* release_biography();
  void set_allocated_biography(::std::string* biography);

  // optional string nonce = 6;
  bool has_nonce() const;
  void clear_nonce();
  static const int kNonceFieldNumber = 6;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // optional string created_time = 7;
  bool has_created_time() const;
  void clear_created_time();
  static const int kCreatedTimeFieldNumber = 7;
  const ::std::string& created_time() const;
  void set_created_time(const ::std::string& value);
  void set_created_time(const char* value);
  void set_created_time(const char* value, size_t size);
  ::std::string* mutable_created_time();
  ::std::string* release_created_time();
  void set_allocated_created_time(::std::string* created_time);

  // optional .SolasMatch.Common.Protobufs.Models.Locale nativeLocale = 8;
  bool has_nativelocale() const;
  void clear_nativelocale();
  static const int kNativeLocaleFieldNumber = 8;
  const ::SolasMatch::Common::Protobufs::Models::Locale& nativelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_nativelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* release_nativelocale();
  void set_allocated_nativelocale(::SolasMatch::Common::Protobufs::Models::Locale* nativelocale);

  // repeated .SolasMatch.Common.Protobufs.Models.Locale secondaryLocales = 9;
  int secondarylocales_size() const;
  void clear_secondarylocales();
  static const int kSecondaryLocalesFieldNumber = 9;
  const ::SolasMatch::Common::Protobufs::Models::Locale& secondarylocales(int index) const;
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_secondarylocales(int index);
  ::SolasMatch::Common::Protobufs::Models::Locale* add_secondarylocales();
  ::google::protobuf::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale >*
      mutable_secondarylocales();
  const ::google::protobuf::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale >&
      secondarylocales() const;

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_biography();
  inline void clear_has_biography();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_created_time();
  inline void clear_has_created_time();
  inline void set_has_nativelocale();
  inline void clear_has_nativelocale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr biography_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr created_time_;
  ::SolasMatch::Common::Protobufs::Models::Locale* nativelocale_;
  ::google::protobuf::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale > secondarylocales_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// optional int32 id = 1;
inline bool User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 User::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.id)
  return id_;
}
inline void User::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.id)
}

// optional string display_name = 2;
inline bool User::has_display_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_display_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
inline const ::std::string& User::display_name() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.display_name)
  return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.display_name)
}
inline void User::set_display_name(const char* value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.display_name)
}
inline void User::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.display_name)
}
inline ::std::string* User::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_display_name() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.display_name)
}

// optional string email = 3;
inline bool User::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& User::email() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.email)
}
inline void User::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.email)
}
inline void User::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.email)
}
inline ::std::string* User::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.email)
}

// optional string password = 4;
inline bool User::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& User::password() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.password)
}
inline void User::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.password)
}
inline void User::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.password)
}
inline ::std::string* User::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.password)
}

// optional string biography = 5;
inline bool User::has_biography() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_biography() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_biography() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_biography() {
  biography_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_biography();
}
inline const ::std::string& User::biography() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.biography)
  return biography_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_biography(const ::std::string& value) {
  set_has_biography();
  biography_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.biography)
}
inline void User::set_biography(const char* value) {
  set_has_biography();
  biography_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.biography)
}
inline void User::set_biography(const char* value, size_t size) {
  set_has_biography();
  biography_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.biography)
}
inline ::std::string* User::mutable_biography() {
  set_has_biography();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.biography)
  return biography_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_biography() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.biography)
  clear_has_biography();
  return biography_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_biography(::std::string* biography) {
  if (biography != NULL) {
    set_has_biography();
  } else {
    clear_has_biography();
  }
  biography_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), biography);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.biography)
}

// optional string nonce = 6;
inline bool User::has_nonce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_nonce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nonce();
}
inline const ::std::string& User::nonce() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.nonce)
  return nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_nonce(const ::std::string& value) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.nonce)
}
inline void User::set_nonce(const char* value) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.nonce)
}
inline void User::set_nonce(const char* value, size_t size) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.nonce)
}
inline ::std::string* User::mutable_nonce() {
  set_has_nonce();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_nonce() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.nonce)
  clear_has_nonce();
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    set_has_nonce();
  } else {
    clear_has_nonce();
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.nonce)
}

// optional string created_time = 7;
inline bool User::has_created_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_created_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_created_time() {
  created_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_created_time();
}
inline const ::std::string& User::created_time() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.created_time)
  return created_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_created_time(const ::std::string& value) {
  set_has_created_time();
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.created_time)
}
inline void User::set_created_time(const char* value) {
  set_has_created_time();
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.created_time)
}
inline void User::set_created_time(const char* value, size_t size) {
  set_has_created_time();
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.created_time)
}
inline ::std::string* User::mutable_created_time() {
  set_has_created_time();
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.created_time)
  return created_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_created_time() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.created_time)
  clear_has_created_time();
  return created_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_created_time(::std::string* created_time) {
  if (created_time != NULL) {
    set_has_created_time();
  } else {
    clear_has_created_time();
  }
  created_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_time);
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.created_time)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale nativeLocale = 8;
inline bool User::has_nativelocale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void User::set_has_nativelocale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void User::clear_has_nativelocale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void User::clear_nativelocale() {
  if (nativelocale_ != NULL) nativelocale_->::SolasMatch::Common::Protobufs::Models::Locale::Clear();
  clear_has_nativelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& User::nativelocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
  return nativelocale_ != NULL ? *nativelocale_ : *default_instance_->nativelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::mutable_nativelocale() {
  set_has_nativelocale();
  if (nativelocale_ == NULL) {
    nativelocale_ = new ::SolasMatch::Common::Protobufs::Models::Locale;
  }
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
  return nativelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::release_nativelocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
  clear_has_nativelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = nativelocale_;
  nativelocale_ = NULL;
  return temp;
}
inline void User::set_allocated_nativelocale(::SolasMatch::Common::Protobufs::Models::Locale* nativelocale) {
  delete nativelocale_;
  nativelocale_ = nativelocale;
  if (nativelocale) {
    set_has_nativelocale();
  } else {
    clear_has_nativelocale();
  }
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
}

// repeated .SolasMatch.Common.Protobufs.Models.Locale secondaryLocales = 9;
inline int User::secondarylocales_size() const {
  return secondarylocales_.size();
}
inline void User::clear_secondarylocales() {
  secondarylocales_.Clear();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& User::secondarylocales(int index) const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return secondarylocales_.Get(index);
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::mutable_secondarylocales(int index) {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return secondarylocales_.Mutable(index);
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::add_secondarylocales() {
  // @@protoc_insertion_point(field_add:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return secondarylocales_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale >*
User::mutable_secondarylocales() {
  // @@protoc_insertion_point(field_mutable_list:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return &secondarylocales_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale >&
User::secondarylocales() const {
  // @@protoc_insertion_point(field_list:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return secondarylocales_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_User_2eproto__INCLUDED
