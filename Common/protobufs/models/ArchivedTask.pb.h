// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArchivedTask.proto

#ifndef PROTOBUF_ArchivedTask_2eproto__INCLUDED
#define PROTOBUF_ArchivedTask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Locale.pb.h"
// @@protoc_insertion_point(includes)

namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ArchivedTask_2eproto();
void protobuf_AssignDesc_ArchivedTask_2eproto();
void protobuf_ShutdownFile_ArchivedTask_2eproto();

class ArchivedTask;

// ===================================================================

class ArchivedTask : public ::google::protobuf::Message {
 public:
  ArchivedTask();
  virtual ~ArchivedTask();

  ArchivedTask(const ArchivedTask& from);

  inline ArchivedTask& operator=(const ArchivedTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArchivedTask& default_instance();

  void Swap(ArchivedTask* other);

  // implements Message ----------------------------------------------

  ArchivedTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArchivedTask& from);
  void MergeFrom(const ArchivedTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 projectId = 2;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIdFieldNumber = 2;
  inline ::google::protobuf::int32 projectid() const;
  inline void set_projectid(::google::protobuf::int32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string comment = 4;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // optional string deadline = 5;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 5;
  inline const ::std::string& deadline() const;
  inline void set_deadline(const ::std::string& value);
  inline void set_deadline(const char* value);
  inline void set_deadline(const char* value, size_t size);
  inline ::std::string* mutable_deadline();
  inline ::std::string* release_deadline();
  inline void set_allocated_deadline(::std::string* deadline);

  // optional int32 wordCount = 6;
  inline bool has_wordcount() const;
  inline void clear_wordcount();
  static const int kWordCountFieldNumber = 6;
  inline ::google::protobuf::int32 wordcount() const;
  inline void set_wordcount(::google::protobuf::int32 value);

  // optional string createdTime = 7;
  inline bool has_createdtime() const;
  inline void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 7;
  inline const ::std::string& createdtime() const;
  inline void set_createdtime(const ::std::string& value);
  inline void set_createdtime(const char* value);
  inline void set_createdtime(const char* value, size_t size);
  inline ::std::string* mutable_createdtime();
  inline ::std::string* release_createdtime();
  inline void set_allocated_createdtime(::std::string* createdtime);

  // optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 8;
  inline bool has_sourcelocale() const;
  inline void clear_sourcelocale();
  static const int kSourceLocaleFieldNumber = 8;
  inline const ::SolasMatch::Common::Protobufs::Models::Locale& sourcelocale() const;
  inline ::SolasMatch::Common::Protobufs::Models::Locale* mutable_sourcelocale();
  inline ::SolasMatch::Common::Protobufs::Models::Locale* release_sourcelocale();
  inline void set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);

  // optional .SolasMatch.Common.Protobufs.Models.Locale targetLocale = 9;
  inline bool has_targetlocale() const;
  inline void clear_targetlocale();
  static const int kTargetLocaleFieldNumber = 9;
  inline const ::SolasMatch::Common::Protobufs::Models::Locale& targetlocale() const;
  inline ::SolasMatch::Common::Protobufs::Models::Locale* mutable_targetlocale();
  inline ::SolasMatch::Common::Protobufs::Models::Locale* release_targetlocale();
  inline void set_allocated_targetlocale(::SolasMatch::Common::Protobufs::Models::Locale* targetlocale);

  // optional int32 taskType = 10;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 10;
  inline ::google::protobuf::int32 tasktype() const;
  inline void set_tasktype(::google::protobuf::int32 value);

  // optional string taskStatus = 11;
  inline bool has_taskstatus() const;
  inline void clear_taskstatus();
  static const int kTaskStatusFieldNumber = 11;
  inline const ::std::string& taskstatus() const;
  inline void set_taskstatus(const ::std::string& value);
  inline void set_taskstatus(const char* value);
  inline void set_taskstatus(const char* value, size_t size);
  inline ::std::string* mutable_taskstatus();
  inline ::std::string* release_taskstatus();
  inline void set_allocated_taskstatus(::std::string* taskstatus);

  // optional bool published = 12;
  inline bool has_published() const;
  inline void clear_published();
  static const int kPublishedFieldNumber = 12;
  inline bool published() const;
  inline void set_published(bool value);

  // optional int32 version = 14;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 14;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string fileName = 15;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 15;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string contentType = 16;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContentTypeFieldNumber = 16;
  inline const ::std::string& contenttype() const;
  inline void set_contenttype(const ::std::string& value);
  inline void set_contenttype(const char* value);
  inline void set_contenttype(const char* value, size_t size);
  inline ::std::string* mutable_contenttype();
  inline ::std::string* release_contenttype();
  inline void set_allocated_contenttype(::std::string* contenttype);

  // optional string uploadTime = 17;
  inline bool has_uploadtime() const;
  inline void clear_uploadtime();
  static const int kUploadTimeFieldNumber = 17;
  inline const ::std::string& uploadtime() const;
  inline void set_uploadtime(const ::std::string& value);
  inline void set_uploadtime(const char* value);
  inline void set_uploadtime(const char* value, size_t size);
  inline ::std::string* mutable_uploadtime();
  inline ::std::string* release_uploadtime();
  inline void set_allocated_uploadtime(::std::string* uploadtime);

  // optional int32 userIdClaimed = 18;
  inline bool has_useridclaimed() const;
  inline void clear_useridclaimed();
  static const int kUserIdClaimedFieldNumber = 18;
  inline ::google::protobuf::int32 useridclaimed() const;
  inline void set_useridclaimed(::google::protobuf::int32 value);

  // optional int32 userIdArchived = 19;
  inline bool has_useridarchived() const;
  inline void clear_useridarchived();
  static const int kUserIdArchivedFieldNumber = 19;
  inline ::google::protobuf::int32 useridarchived() const;
  inline void set_useridarchived(::google::protobuf::int32 value);

  // optional string prerequisites = 20;
  inline bool has_prerequisites() const;
  inline void clear_prerequisites();
  static const int kPrerequisitesFieldNumber = 20;
  inline const ::std::string& prerequisites() const;
  inline void set_prerequisites(const ::std::string& value);
  inline void set_prerequisites(const char* value);
  inline void set_prerequisites(const char* value, size_t size);
  inline ::std::string* mutable_prerequisites();
  inline ::std::string* release_prerequisites();
  inline void set_allocated_prerequisites(::std::string* prerequisites);

  // optional int32 userIdTaskCreator = 21;
  inline bool has_useridtaskcreator() const;
  inline void clear_useridtaskcreator();
  static const int kUserIdTaskCreatorFieldNumber = 21;
  inline ::google::protobuf::int32 useridtaskcreator() const;
  inline void set_useridtaskcreator(::google::protobuf::int32 value);

  // optional string archivedDate = 22;
  inline bool has_archiveddate() const;
  inline void clear_archiveddate();
  static const int kArchivedDateFieldNumber = 22;
  inline const ::std::string& archiveddate() const;
  inline void set_archiveddate(const ::std::string& value);
  inline void set_archiveddate(const char* value);
  inline void set_archiveddate(const char* value, size_t size);
  inline ::std::string* mutable_archiveddate();
  inline ::std::string* release_archiveddate();
  inline void set_allocated_archiveddate(::std::string* archiveddate);

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.ArchivedTask)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_wordcount();
  inline void clear_has_wordcount();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_sourcelocale();
  inline void clear_has_sourcelocale();
  inline void set_has_targetlocale();
  inline void clear_has_targetlocale();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_taskstatus();
  inline void clear_has_taskstatus();
  inline void set_has_published();
  inline void clear_has_published();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_uploadtime();
  inline void clear_has_uploadtime();
  inline void set_has_useridclaimed();
  inline void clear_has_useridclaimed();
  inline void set_has_useridarchived();
  inline void clear_has_useridarchived();
  inline void set_has_prerequisites();
  inline void clear_has_prerequisites();
  inline void set_has_useridtaskcreator();
  inline void clear_has_useridtaskcreator();
  inline void set_has_archiveddate();
  inline void clear_has_archiveddate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 projectid_;
  ::std::string* title_;
  ::std::string* comment_;
  ::std::string* deadline_;
  ::std::string* createdtime_;
  ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale_;
  ::google::protobuf::int32 wordcount_;
  ::google::protobuf::int32 tasktype_;
  ::SolasMatch::Common::Protobufs::Models::Locale* targetlocale_;
  ::std::string* taskstatus_;
  bool published_;
  ::google::protobuf::int32 version_;
  ::std::string* filename_;
  ::std::string* contenttype_;
  ::std::string* uploadtime_;
  ::google::protobuf::int32 useridclaimed_;
  ::google::protobuf::int32 useridarchived_;
  ::std::string* prerequisites_;
  ::std::string* archiveddate_;
  ::google::protobuf::int32 useridtaskcreator_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_ArchivedTask_2eproto();
  friend void protobuf_AssignDesc_ArchivedTask_2eproto();
  friend void protobuf_ShutdownFile_ArchivedTask_2eproto();

  void InitAsDefaultInstance();
  static ArchivedTask* default_instance_;
};
// ===================================================================


// ===================================================================

// ArchivedTask

// optional int32 id = 1;
inline bool ArchivedTask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArchivedTask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArchivedTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArchivedTask::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ArchivedTask::id() const {
  return id_;
}
inline void ArchivedTask::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 projectId = 2;
inline bool ArchivedTask::has_projectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArchivedTask::set_has_projectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArchivedTask::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArchivedTask::clear_projectid() {
  projectid_ = 0;
  clear_has_projectid();
}
inline ::google::protobuf::int32 ArchivedTask::projectid() const {
  return projectid_;
}
inline void ArchivedTask::set_projectid(::google::protobuf::int32 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string title = 3;
inline bool ArchivedTask::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArchivedTask::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArchivedTask::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArchivedTask::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ArchivedTask::title() const {
  return *title_;
}
inline void ArchivedTask::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ArchivedTask::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ArchivedTask::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ArchivedTask::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string comment = 4;
inline bool ArchivedTask::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArchivedTask::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArchivedTask::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArchivedTask::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ArchivedTask::comment() const {
  return *comment_;
}
inline void ArchivedTask::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ArchivedTask::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ArchivedTask::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* ArchivedTask::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deadline = 5;
inline bool ArchivedTask::has_deadline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArchivedTask::set_has_deadline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArchivedTask::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArchivedTask::clear_deadline() {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    deadline_->clear();
  }
  clear_has_deadline();
}
inline const ::std::string& ArchivedTask::deadline() const {
  return *deadline_;
}
inline void ArchivedTask::set_deadline(const ::std::string& value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void ArchivedTask::set_deadline(const char* value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void ArchivedTask::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_deadline() {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  return deadline_;
}
inline ::std::string* ArchivedTask::release_deadline() {
  clear_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deadline_;
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_deadline(::std::string* deadline) {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    delete deadline_;
  }
  if (deadline) {
    set_has_deadline();
    deadline_ = deadline;
  } else {
    clear_has_deadline();
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wordCount = 6;
inline bool ArchivedTask::has_wordcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArchivedTask::set_has_wordcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArchivedTask::clear_has_wordcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArchivedTask::clear_wordcount() {
  wordcount_ = 0;
  clear_has_wordcount();
}
inline ::google::protobuf::int32 ArchivedTask::wordcount() const {
  return wordcount_;
}
inline void ArchivedTask::set_wordcount(::google::protobuf::int32 value) {
  set_has_wordcount();
  wordcount_ = value;
}

// optional string createdTime = 7;
inline bool ArchivedTask::has_createdtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArchivedTask::set_has_createdtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArchivedTask::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArchivedTask::clear_createdtime() {
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    createdtime_->clear();
  }
  clear_has_createdtime();
}
inline const ::std::string& ArchivedTask::createdtime() const {
  return *createdtime_;
}
inline void ArchivedTask::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void ArchivedTask::set_createdtime(const char* value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void ArchivedTask::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_createdtime() {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  return createdtime_;
}
inline ::std::string* ArchivedTask::release_createdtime() {
  clear_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdtime_;
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_createdtime(::std::string* createdtime) {
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createdtime_;
  }
  if (createdtime) {
    set_has_createdtime();
    createdtime_ = createdtime;
  } else {
    clear_has_createdtime();
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 8;
inline bool ArchivedTask::has_sourcelocale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArchivedTask::set_has_sourcelocale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArchivedTask::clear_has_sourcelocale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArchivedTask::clear_sourcelocale() {
  if (sourcelocale_ != NULL) sourcelocale_->::SolasMatch::Common::Protobufs::Models::Locale::Clear();
  clear_has_sourcelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& ArchivedTask::sourcelocale() const {
  return sourcelocale_ != NULL ? *sourcelocale_ : *default_instance_->sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::mutable_sourcelocale() {
  set_has_sourcelocale();
  if (sourcelocale_ == NULL) sourcelocale_ = new ::SolasMatch::Common::Protobufs::Models::Locale;
  return sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::release_sourcelocale() {
  clear_has_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = sourcelocale_;
  sourcelocale_ = NULL;
  return temp;
}
inline void ArchivedTask::set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  delete sourcelocale_;
  sourcelocale_ = sourcelocale;
  if (sourcelocale) {
    set_has_sourcelocale();
  } else {
    clear_has_sourcelocale();
  }
}

// optional .SolasMatch.Common.Protobufs.Models.Locale targetLocale = 9;
inline bool ArchivedTask::has_targetlocale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArchivedTask::set_has_targetlocale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArchivedTask::clear_has_targetlocale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArchivedTask::clear_targetlocale() {
  if (targetlocale_ != NULL) targetlocale_->::SolasMatch::Common::Protobufs::Models::Locale::Clear();
  clear_has_targetlocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& ArchivedTask::targetlocale() const {
  return targetlocale_ != NULL ? *targetlocale_ : *default_instance_->targetlocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::mutable_targetlocale() {
  set_has_targetlocale();
  if (targetlocale_ == NULL) targetlocale_ = new ::SolasMatch::Common::Protobufs::Models::Locale;
  return targetlocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::release_targetlocale() {
  clear_has_targetlocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = targetlocale_;
  targetlocale_ = NULL;
  return temp;
}
inline void ArchivedTask::set_allocated_targetlocale(::SolasMatch::Common::Protobufs::Models::Locale* targetlocale) {
  delete targetlocale_;
  targetlocale_ = targetlocale;
  if (targetlocale) {
    set_has_targetlocale();
  } else {
    clear_has_targetlocale();
  }
}

// optional int32 taskType = 10;
inline bool ArchivedTask::has_tasktype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArchivedTask::set_has_tasktype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArchivedTask::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArchivedTask::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::google::protobuf::int32 ArchivedTask::tasktype() const {
  return tasktype_;
}
inline void ArchivedTask::set_tasktype(::google::protobuf::int32 value) {
  set_has_tasktype();
  tasktype_ = value;
}

// optional string taskStatus = 11;
inline bool ArchivedTask::has_taskstatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ArchivedTask::set_has_taskstatus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ArchivedTask::clear_has_taskstatus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ArchivedTask::clear_taskstatus() {
  if (taskstatus_ != &::google::protobuf::internal::kEmptyString) {
    taskstatus_->clear();
  }
  clear_has_taskstatus();
}
inline const ::std::string& ArchivedTask::taskstatus() const {
  return *taskstatus_;
}
inline void ArchivedTask::set_taskstatus(const ::std::string& value) {
  set_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    taskstatus_ = new ::std::string;
  }
  taskstatus_->assign(value);
}
inline void ArchivedTask::set_taskstatus(const char* value) {
  set_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    taskstatus_ = new ::std::string;
  }
  taskstatus_->assign(value);
}
inline void ArchivedTask::set_taskstatus(const char* value, size_t size) {
  set_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    taskstatus_ = new ::std::string;
  }
  taskstatus_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_taskstatus() {
  set_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    taskstatus_ = new ::std::string;
  }
  return taskstatus_;
}
inline ::std::string* ArchivedTask::release_taskstatus() {
  clear_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskstatus_;
    taskstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_taskstatus(::std::string* taskstatus) {
  if (taskstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete taskstatus_;
  }
  if (taskstatus) {
    set_has_taskstatus();
    taskstatus_ = taskstatus;
  } else {
    clear_has_taskstatus();
    taskstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool published = 12;
inline bool ArchivedTask::has_published() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ArchivedTask::set_has_published() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ArchivedTask::clear_has_published() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ArchivedTask::clear_published() {
  published_ = false;
  clear_has_published();
}
inline bool ArchivedTask::published() const {
  return published_;
}
inline void ArchivedTask::set_published(bool value) {
  set_has_published();
  published_ = value;
}

// optional int32 version = 14;
inline bool ArchivedTask::has_version() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ArchivedTask::set_has_version() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ArchivedTask::clear_has_version() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ArchivedTask::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 ArchivedTask::version() const {
  return version_;
}
inline void ArchivedTask::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string fileName = 15;
inline bool ArchivedTask::has_filename() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ArchivedTask::set_has_filename() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ArchivedTask::clear_has_filename() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ArchivedTask::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ArchivedTask::filename() const {
  return *filename_;
}
inline void ArchivedTask::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ArchivedTask::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ArchivedTask::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* ArchivedTask::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string contentType = 16;
inline bool ArchivedTask::has_contenttype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ArchivedTask::set_has_contenttype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ArchivedTask::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ArchivedTask::clear_contenttype() {
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    contenttype_->clear();
  }
  clear_has_contenttype();
}
inline const ::std::string& ArchivedTask::contenttype() const {
  return *contenttype_;
}
inline void ArchivedTask::set_contenttype(const ::std::string& value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
}
inline void ArchivedTask::set_contenttype(const char* value) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(value);
}
inline void ArchivedTask::set_contenttype(const char* value, size_t size) {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  contenttype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_contenttype() {
  set_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    contenttype_ = new ::std::string;
  }
  return contenttype_;
}
inline ::std::string* ArchivedTask::release_contenttype() {
  clear_has_contenttype();
  if (contenttype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contenttype_;
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttype_;
  }
  if (contenttype) {
    set_has_contenttype();
    contenttype_ = contenttype;
  } else {
    clear_has_contenttype();
    contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uploadTime = 17;
inline bool ArchivedTask::has_uploadtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ArchivedTask::set_has_uploadtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ArchivedTask::clear_has_uploadtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ArchivedTask::clear_uploadtime() {
  if (uploadtime_ != &::google::protobuf::internal::kEmptyString) {
    uploadtime_->clear();
  }
  clear_has_uploadtime();
}
inline const ::std::string& ArchivedTask::uploadtime() const {
  return *uploadtime_;
}
inline void ArchivedTask::set_uploadtime(const ::std::string& value) {
  set_has_uploadtime();
  if (uploadtime_ == &::google::protobuf::internal::kEmptyString) {
    uploadtime_ = new ::std::string;
  }
  uploadtime_->assign(value);
}
inline void ArchivedTask::set_uploadtime(const char* value) {
  set_has_uploadtime();
  if (uploadtime_ == &::google::protobuf::internal::kEmptyString) {
    uploadtime_ = new ::std::string;
  }
  uploadtime_->assign(value);
}
inline void ArchivedTask::set_uploadtime(const char* value, size_t size) {
  set_has_uploadtime();
  if (uploadtime_ == &::google::protobuf::internal::kEmptyString) {
    uploadtime_ = new ::std::string;
  }
  uploadtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_uploadtime() {
  set_has_uploadtime();
  if (uploadtime_ == &::google::protobuf::internal::kEmptyString) {
    uploadtime_ = new ::std::string;
  }
  return uploadtime_;
}
inline ::std::string* ArchivedTask::release_uploadtime() {
  clear_has_uploadtime();
  if (uploadtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uploadtime_;
    uploadtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_uploadtime(::std::string* uploadtime) {
  if (uploadtime_ != &::google::protobuf::internal::kEmptyString) {
    delete uploadtime_;
  }
  if (uploadtime) {
    set_has_uploadtime();
    uploadtime_ = uploadtime;
  } else {
    clear_has_uploadtime();
    uploadtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 userIdClaimed = 18;
inline bool ArchivedTask::has_useridclaimed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ArchivedTask::set_has_useridclaimed() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ArchivedTask::clear_has_useridclaimed() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ArchivedTask::clear_useridclaimed() {
  useridclaimed_ = 0;
  clear_has_useridclaimed();
}
inline ::google::protobuf::int32 ArchivedTask::useridclaimed() const {
  return useridclaimed_;
}
inline void ArchivedTask::set_useridclaimed(::google::protobuf::int32 value) {
  set_has_useridclaimed();
  useridclaimed_ = value;
}

// optional int32 userIdArchived = 19;
inline bool ArchivedTask::has_useridarchived() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ArchivedTask::set_has_useridarchived() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ArchivedTask::clear_has_useridarchived() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ArchivedTask::clear_useridarchived() {
  useridarchived_ = 0;
  clear_has_useridarchived();
}
inline ::google::protobuf::int32 ArchivedTask::useridarchived() const {
  return useridarchived_;
}
inline void ArchivedTask::set_useridarchived(::google::protobuf::int32 value) {
  set_has_useridarchived();
  useridarchived_ = value;
}

// optional string prerequisites = 20;
inline bool ArchivedTask::has_prerequisites() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ArchivedTask::set_has_prerequisites() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ArchivedTask::clear_has_prerequisites() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ArchivedTask::clear_prerequisites() {
  if (prerequisites_ != &::google::protobuf::internal::kEmptyString) {
    prerequisites_->clear();
  }
  clear_has_prerequisites();
}
inline const ::std::string& ArchivedTask::prerequisites() const {
  return *prerequisites_;
}
inline void ArchivedTask::set_prerequisites(const ::std::string& value) {
  set_has_prerequisites();
  if (prerequisites_ == &::google::protobuf::internal::kEmptyString) {
    prerequisites_ = new ::std::string;
  }
  prerequisites_->assign(value);
}
inline void ArchivedTask::set_prerequisites(const char* value) {
  set_has_prerequisites();
  if (prerequisites_ == &::google::protobuf::internal::kEmptyString) {
    prerequisites_ = new ::std::string;
  }
  prerequisites_->assign(value);
}
inline void ArchivedTask::set_prerequisites(const char* value, size_t size) {
  set_has_prerequisites();
  if (prerequisites_ == &::google::protobuf::internal::kEmptyString) {
    prerequisites_ = new ::std::string;
  }
  prerequisites_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_prerequisites() {
  set_has_prerequisites();
  if (prerequisites_ == &::google::protobuf::internal::kEmptyString) {
    prerequisites_ = new ::std::string;
  }
  return prerequisites_;
}
inline ::std::string* ArchivedTask::release_prerequisites() {
  clear_has_prerequisites();
  if (prerequisites_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prerequisites_;
    prerequisites_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_prerequisites(::std::string* prerequisites) {
  if (prerequisites_ != &::google::protobuf::internal::kEmptyString) {
    delete prerequisites_;
  }
  if (prerequisites) {
    set_has_prerequisites();
    prerequisites_ = prerequisites;
  } else {
    clear_has_prerequisites();
    prerequisites_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 userIdTaskCreator = 21;
inline bool ArchivedTask::has_useridtaskcreator() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ArchivedTask::set_has_useridtaskcreator() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ArchivedTask::clear_has_useridtaskcreator() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ArchivedTask::clear_useridtaskcreator() {
  useridtaskcreator_ = 0;
  clear_has_useridtaskcreator();
}
inline ::google::protobuf::int32 ArchivedTask::useridtaskcreator() const {
  return useridtaskcreator_;
}
inline void ArchivedTask::set_useridtaskcreator(::google::protobuf::int32 value) {
  set_has_useridtaskcreator();
  useridtaskcreator_ = value;
}

// optional string archivedDate = 22;
inline bool ArchivedTask::has_archiveddate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ArchivedTask::set_has_archiveddate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ArchivedTask::clear_has_archiveddate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ArchivedTask::clear_archiveddate() {
  if (archiveddate_ != &::google::protobuf::internal::kEmptyString) {
    archiveddate_->clear();
  }
  clear_has_archiveddate();
}
inline const ::std::string& ArchivedTask::archiveddate() const {
  return *archiveddate_;
}
inline void ArchivedTask::set_archiveddate(const ::std::string& value) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(value);
}
inline void ArchivedTask::set_archiveddate(const char* value) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(value);
}
inline void ArchivedTask::set_archiveddate(const char* value, size_t size) {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  archiveddate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArchivedTask::mutable_archiveddate() {
  set_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    archiveddate_ = new ::std::string;
  }
  return archiveddate_;
}
inline ::std::string* ArchivedTask::release_archiveddate() {
  clear_has_archiveddate();
  if (archiveddate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = archiveddate_;
    archiveddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArchivedTask::set_allocated_archiveddate(::std::string* archiveddate) {
  if (archiveddate_ != &::google::protobuf::internal::kEmptyString) {
    delete archiveddate_;
  }
  if (archiveddate) {
    set_has_archiveddate();
    archiveddate_ = archiveddate;
  } else {
    clear_has_archiveddate();
    archiveddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ArchivedTask_2eproto__INCLUDED
