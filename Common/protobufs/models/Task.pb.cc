// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Task_2eproto() {
  protobuf_AddDesc_Task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Task.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wordcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, createdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, sourcelanguagecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, targetlanguagecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, sourcecountrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, targetcountrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, taskstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, published_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, tag_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Task_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
}

void protobuf_AddDesc_Task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Tag_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTask.proto\032\tTag.proto\"\271\002\n\004Task\022\n\n\002id\030\001"
    " \002(\005\022\021\n\tprojectId\030\002 \001(\005\022\r\n\005title\030\003 \001(\t\022\017"
    "\n\007comment\030\004 \001(\t\022\020\n\010deadline\030\005 \002(\t\022\021\n\twor"
    "dCount\030\006 \001(\005\022\023\n\013createdTime\030\007 \001(\t\022\032\n\022sou"
    "rceLanguageCode\030\010 \001(\t\022\032\n\022targetLanguageC"
    "ode\030\t \001(\t\022\031\n\021sourceCountryCode\030\n \001(\t\022\031\n\021"
    "targetCountryCode\030\013 \001(\t\022\020\n\010taskType\030\014 \001("
    "\005\022\022\n\ntaskStatus\030\r \001(\005\022\021\n\tpublished\030\016 \001(\010"
    "\022\021\n\003tag\030\017 \003(\0132\004.Tag", 339);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Task.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  Task::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Task_2eproto {
  StaticDescriptorInitializer_Task_2eproto() {
    protobuf_AddDesc_Task_2eproto();
  }
} static_descriptor_initializer_Task_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Task::kIdFieldNumber;
const int Task::kProjectIdFieldNumber;
const int Task::kTitleFieldNumber;
const int Task::kCommentFieldNumber;
const int Task::kDeadlineFieldNumber;
const int Task::kWordCountFieldNumber;
const int Task::kCreatedTimeFieldNumber;
const int Task::kSourceLanguageCodeFieldNumber;
const int Task::kTargetLanguageCodeFieldNumber;
const int Task::kSourceCountryCodeFieldNumber;
const int Task::kTargetCountryCodeFieldNumber;
const int Task::kTaskTypeFieldNumber;
const int Task::kTaskStatusFieldNumber;
const int Task::kPublishedFieldNumber;
const int Task::kTagFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  projectid_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wordcount_ = 0;
  createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcelanguagecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetlanguagecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourcecountrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetcountrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tasktype_ = 0;
  taskstatus_ = 0;
  published_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    delete deadline_;
  }
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createdtime_;
  }
  if (sourcelanguagecode_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcelanguagecode_;
  }
  if (targetlanguagecode_ != &::google::protobuf::internal::kEmptyString) {
    delete targetlanguagecode_;
  }
  if (sourcecountrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete sourcecountrycode_;
  }
  if (targetcountrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete targetcountrycode_;
  }
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    projectid_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_deadline()) {
      if (deadline_ != &::google::protobuf::internal::kEmptyString) {
        deadline_->clear();
      }
    }
    wordcount_ = 0;
    if (has_createdtime()) {
      if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
        createdtime_->clear();
      }
    }
    if (has_sourcelanguagecode()) {
      if (sourcelanguagecode_ != &::google::protobuf::internal::kEmptyString) {
        sourcelanguagecode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_targetlanguagecode()) {
      if (targetlanguagecode_ != &::google::protobuf::internal::kEmptyString) {
        targetlanguagecode_->clear();
      }
    }
    if (has_sourcecountrycode()) {
      if (sourcecountrycode_ != &::google::protobuf::internal::kEmptyString) {
        sourcecountrycode_->clear();
      }
    }
    if (has_targetcountrycode()) {
      if (targetcountrycode_ != &::google::protobuf::internal::kEmptyString) {
        targetcountrycode_->clear();
      }
    }
    tasktype_ = 0;
    taskstatus_ = 0;
    published_ = false;
  }
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_projectId;
        break;
      }
      
      // optional int32 projectId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_projectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_comment;
        break;
      }
      
      // optional string comment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deadline;
        break;
      }
      
      // required string deadline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deadline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deadline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deadline().data(), this->deadline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wordCount;
        break;
      }
      
      // optional int32 wordCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wordCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wordcount_)));
          set_has_wordcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_createdTime;
        break;
      }
      
      // optional string createdTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdtime().data(), this->createdtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sourceLanguageCode;
        break;
      }
      
      // optional string sourceLanguageCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceLanguageCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcelanguagecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcelanguagecode().data(), this->sourcelanguagecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_targetLanguageCode;
        break;
      }
      
      // optional string targetLanguageCode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetLanguageCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetlanguagecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetlanguagecode().data(), this->targetlanguagecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sourceCountryCode;
        break;
      }
      
      // optional string sourceCountryCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceCountryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcecountrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcecountrycode().data(), this->sourcecountrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_targetCountryCode;
        break;
      }
      
      // optional string targetCountryCode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetCountryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetcountrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetcountrycode().data(), this->targetcountrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_taskType;
        break;
      }
      
      // optional int32 taskType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_taskStatus;
        break;
      }
      
      // optional int32 taskStatus = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskstatus_)));
          set_has_taskstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_published;
        break;
      }
      
      // optional bool published = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_published:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &published_)));
          set_has_published();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tag;
        break;
      }
      
      // repeated .Tag tag = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tag;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 projectId = 2;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->projectid(), output);
  }
  
  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->comment(), output);
  }
  
  // required string deadline = 5;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deadline().data(), this->deadline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->deadline(), output);
  }
  
  // optional int32 wordCount = 6;
  if (has_wordcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wordcount(), output);
  }
  
  // optional string createdTime = 7;
  if (has_createdtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdtime().data(), this->createdtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->createdtime(), output);
  }
  
  // optional string sourceLanguageCode = 8;
  if (has_sourcelanguagecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcelanguagecode().data(), this->sourcelanguagecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sourcelanguagecode(), output);
  }
  
  // optional string targetLanguageCode = 9;
  if (has_targetlanguagecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetlanguagecode().data(), this->targetlanguagecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->targetlanguagecode(), output);
  }
  
  // optional string sourceCountryCode = 10;
  if (has_sourcecountrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcecountrycode().data(), this->sourcecountrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sourcecountrycode(), output);
  }
  
  // optional string targetCountryCode = 11;
  if (has_targetcountrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetcountrycode().data(), this->targetcountrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->targetcountrycode(), output);
  }
  
  // optional int32 taskType = 12;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tasktype(), output);
  }
  
  // optional int32 taskStatus = 13;
  if (has_taskstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->taskstatus(), output);
  }
  
  // optional bool published = 14;
  if (has_published()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->published(), output);
  }
  
  // repeated .Tag tag = 15;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->tag(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 projectId = 2;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->projectid(), target);
  }
  
  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }
  
  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }
  
  // required string deadline = 5;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deadline().data(), this->deadline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deadline(), target);
  }
  
  // optional int32 wordCount = 6;
  if (has_wordcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wordcount(), target);
  }
  
  // optional string createdTime = 7;
  if (has_createdtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdtime().data(), this->createdtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->createdtime(), target);
  }
  
  // optional string sourceLanguageCode = 8;
  if (has_sourcelanguagecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcelanguagecode().data(), this->sourcelanguagecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sourcelanguagecode(), target);
  }
  
  // optional string targetLanguageCode = 9;
  if (has_targetlanguagecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetlanguagecode().data(), this->targetlanguagecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->targetlanguagecode(), target);
  }
  
  // optional string sourceCountryCode = 10;
  if (has_sourcecountrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcecountrycode().data(), this->sourcecountrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sourcecountrycode(), target);
  }
  
  // optional string targetCountryCode = 11;
  if (has_targetcountrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetcountrycode().data(), this->targetcountrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->targetcountrycode(), target);
  }
  
  // optional int32 taskType = 12;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tasktype(), target);
  }
  
  // optional int32 taskStatus = 13;
  if (has_taskstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->taskstatus(), target);
  }
  
  // optional bool published = 14;
  if (has_published()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->published(), target);
  }
  
  // repeated .Tag tag = 15;
  for (int i = 0; i < this->tag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->tag(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 projectId = 2;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->projectid());
    }
    
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string comment = 4;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
    // required string deadline = 5;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deadline());
    }
    
    // optional int32 wordCount = 6;
    if (has_wordcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wordcount());
    }
    
    // optional string createdTime = 7;
    if (has_createdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdtime());
    }
    
    // optional string sourceLanguageCode = 8;
    if (has_sourcelanguagecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcelanguagecode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string targetLanguageCode = 9;
    if (has_targetlanguagecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetlanguagecode());
    }
    
    // optional string sourceCountryCode = 10;
    if (has_sourcecountrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcecountrycode());
    }
    
    // optional string targetCountryCode = 11;
    if (has_targetcountrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetcountrycode());
    }
    
    // optional int32 taskType = 12;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }
    
    // optional int32 taskStatus = 13;
    if (has_taskstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskstatus());
    }
    
    // optional bool published = 14;
    if (has_published()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .Tag tag = 15;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
    if (from.has_wordcount()) {
      set_wordcount(from.wordcount());
    }
    if (from.has_createdtime()) {
      set_createdtime(from.createdtime());
    }
    if (from.has_sourcelanguagecode()) {
      set_sourcelanguagecode(from.sourcelanguagecode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetlanguagecode()) {
      set_targetlanguagecode(from.targetlanguagecode());
    }
    if (from.has_sourcecountrycode()) {
      set_sourcecountrycode(from.sourcecountrycode());
    }
    if (from.has_targetcountrycode()) {
      set_targetcountrycode(from.targetcountrycode());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_taskstatus()) {
      set_taskstatus(from.taskstatus());
    }
    if (from.has_published()) {
      set_published(from.published());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  
  for (int i = 0; i < tag_size(); i++) {
    if (!this->tag(i).IsInitialized()) return false;
  }
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(projectid_, other->projectid_);
    std::swap(title_, other->title_);
    std::swap(comment_, other->comment_);
    std::swap(deadline_, other->deadline_);
    std::swap(wordcount_, other->wordcount_);
    std::swap(createdtime_, other->createdtime_);
    std::swap(sourcelanguagecode_, other->sourcelanguagecode_);
    std::swap(targetlanguagecode_, other->targetlanguagecode_);
    std::swap(sourcecountrycode_, other->sourcecountrycode_);
    std::swap(targetcountrycode_, other->targetcountrycode_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(taskstatus_, other->taskstatus_);
    std::swap(published_, other->published_);
    tag_.Swap(&other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
