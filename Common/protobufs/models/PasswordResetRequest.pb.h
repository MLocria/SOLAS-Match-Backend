// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PasswordResetRequest.proto

#ifndef PROTOBUF_PasswordResetRequest_2eproto__INCLUDED
#define PROTOBUF_PasswordResetRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PasswordResetRequest_2eproto();
void protobuf_AssignDesc_PasswordResetRequest_2eproto();
void protobuf_ShutdownFile_PasswordResetRequest_2eproto();

class PasswordResetRequest;

// ===================================================================

class PasswordResetRequest : public ::google::protobuf::Message {
 public:
  PasswordResetRequest();
  virtual ~PasswordResetRequest();

  PasswordResetRequest(const PasswordResetRequest& from);

  inline PasswordResetRequest& operator=(const PasswordResetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PasswordResetRequest& default_instance();

  void Swap(PasswordResetRequest* other);

  // implements Message ----------------------------------------------

  PasswordResetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PasswordResetRequest& from);
  void MergeFrom(const PasswordResetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string requestTime = 3;
  inline bool has_requesttime() const;
  inline void clear_requesttime();
  static const int kRequestTimeFieldNumber = 3;
  inline const ::std::string& requesttime() const;
  inline void set_requesttime(const ::std::string& value);
  inline void set_requesttime(const char* value);
  inline void set_requesttime(const char* value, size_t size);
  inline ::std::string* mutable_requesttime();
  inline ::std::string* release_requesttime();
  inline void set_allocated_requesttime(::std::string* requesttime);

  // @@protoc_insertion_point(class_scope:PasswordResetRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_requesttime();
  inline void clear_has_requesttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* requesttime_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PasswordResetRequest_2eproto();
  friend void protobuf_AssignDesc_PasswordResetRequest_2eproto();
  friend void protobuf_ShutdownFile_PasswordResetRequest_2eproto();

  void InitAsDefaultInstance();
  static PasswordResetRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// PasswordResetRequest

// optional int32 user_id = 1;
inline bool PasswordResetRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordResetRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PasswordResetRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PasswordResetRequest::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PasswordResetRequest::user_id() const {
  return user_id_;
}
inline void PasswordResetRequest::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string key = 2;
inline bool PasswordResetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordResetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PasswordResetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PasswordResetRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PasswordResetRequest::key() const {
  return *key_;
}
inline void PasswordResetRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PasswordResetRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PasswordResetRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordResetRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PasswordResetRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PasswordResetRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string requestTime = 3;
inline bool PasswordResetRequest::has_requesttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PasswordResetRequest::set_has_requesttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PasswordResetRequest::clear_has_requesttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PasswordResetRequest::clear_requesttime() {
  if (requesttime_ != &::google::protobuf::internal::kEmptyString) {
    requesttime_->clear();
  }
  clear_has_requesttime();
}
inline const ::std::string& PasswordResetRequest::requesttime() const {
  return *requesttime_;
}
inline void PasswordResetRequest::set_requesttime(const ::std::string& value) {
  set_has_requesttime();
  if (requesttime_ == &::google::protobuf::internal::kEmptyString) {
    requesttime_ = new ::std::string;
  }
  requesttime_->assign(value);
}
inline void PasswordResetRequest::set_requesttime(const char* value) {
  set_has_requesttime();
  if (requesttime_ == &::google::protobuf::internal::kEmptyString) {
    requesttime_ = new ::std::string;
  }
  requesttime_->assign(value);
}
inline void PasswordResetRequest::set_requesttime(const char* value, size_t size) {
  set_has_requesttime();
  if (requesttime_ == &::google::protobuf::internal::kEmptyString) {
    requesttime_ = new ::std::string;
  }
  requesttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordResetRequest::mutable_requesttime() {
  set_has_requesttime();
  if (requesttime_ == &::google::protobuf::internal::kEmptyString) {
    requesttime_ = new ::std::string;
  }
  return requesttime_;
}
inline ::std::string* PasswordResetRequest::release_requesttime() {
  clear_has_requesttime();
  if (requesttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requesttime_;
    requesttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PasswordResetRequest::set_allocated_requesttime(::std::string* requesttime) {
  if (requesttime_ != &::google::protobuf::internal::kEmptyString) {
    delete requesttime_;
  }
  if (requesttime) {
    set_has_requesttime();
    requesttime_ = requesttime;
  } else {
    clear_has_requesttime();
    requesttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PasswordResetRequest_2eproto__INCLUDED
