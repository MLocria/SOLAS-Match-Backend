// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef PROTOBUF_Task_2eproto__INCLUDED
#define PROTOBUF_Task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Task_2eproto();
void protobuf_AssignDesc_Task_2eproto();
void protobuf_ShutdownFile_Task_2eproto();

class Task;

// ===================================================================

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();
  
  Task(const Task& from);
  
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();
  
  void Swap(Task* other);
  
  // implements Message ----------------------------------------------
  
  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 projectId = 2;
  inline bool has_projectid() const;
  inline void clear_projectid();
  static const int kProjectIdFieldNumber = 2;
  inline ::google::protobuf::int32 projectid() const;
  inline void set_projectid(::google::protobuf::int32 value);
  
  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string comment = 4;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  
  // required string deadline = 5;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 5;
  inline const ::std::string& deadline() const;
  inline void set_deadline(const ::std::string& value);
  inline void set_deadline(const char* value);
  inline void set_deadline(const char* value, size_t size);
  inline ::std::string* mutable_deadline();
  inline ::std::string* release_deadline();
  
  // optional int32 wordCount = 6;
  inline bool has_wordcount() const;
  inline void clear_wordcount();
  static const int kWordCountFieldNumber = 6;
  inline ::google::protobuf::int32 wordcount() const;
  inline void set_wordcount(::google::protobuf::int32 value);
  
  // optional string createdTime = 7;
  inline bool has_createdtime() const;
  inline void clear_createdtime();
  static const int kCreatedTimeFieldNumber = 7;
  inline const ::std::string& createdtime() const;
  inline void set_createdtime(const ::std::string& value);
  inline void set_createdtime(const char* value);
  inline void set_createdtime(const char* value, size_t size);
  inline ::std::string* mutable_createdtime();
  inline ::std::string* release_createdtime();
  
  // optional int32 sourceLanguageId = 8;
  inline bool has_sourcelanguageid() const;
  inline void clear_sourcelanguageid();
  static const int kSourceLanguageIdFieldNumber = 8;
  inline ::google::protobuf::int32 sourcelanguageid() const;
  inline void set_sourcelanguageid(::google::protobuf::int32 value);
  
  // optional int32 targetLanguageId = 9;
  inline bool has_targetlanguageid() const;
  inline void clear_targetlanguageid();
  static const int kTargetLanguageIdFieldNumber = 9;
  inline ::google::protobuf::int32 targetlanguageid() const;
  inline void set_targetlanguageid(::google::protobuf::int32 value);
  
  // optional int32 sourceCountryId = 10;
  inline bool has_sourcecountryid() const;
  inline void clear_sourcecountryid();
  static const int kSourceCountryIdFieldNumber = 10;
  inline ::google::protobuf::int32 sourcecountryid() const;
  inline void set_sourcecountryid(::google::protobuf::int32 value);
  
  // optional int32 targetCountryId = 11;
  inline bool has_targetcountryid() const;
  inline void clear_targetcountryid();
  static const int kTargetCountryIdFieldNumber = 11;
  inline ::google::protobuf::int32 targetcountryid() const;
  inline void set_targetcountryid(::google::protobuf::int32 value);
  
  // optional string taskType = 12;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 12;
  inline const ::std::string& tasktype() const;
  inline void set_tasktype(const ::std::string& value);
  inline void set_tasktype(const char* value);
  inline void set_tasktype(const char* value, size_t size);
  inline ::std::string* mutable_tasktype();
  inline ::std::string* release_tasktype();
  
  // optional string taskStatus = 13;
  inline bool has_taskstatus() const;
  inline void clear_taskstatus();
  static const int kTaskStatusFieldNumber = 13;
  inline const ::std::string& taskstatus() const;
  inline void set_taskstatus(const ::std::string& value);
  inline void set_taskstatus(const char* value);
  inline void set_taskstatus(const char* value, size_t size);
  inline ::std::string* mutable_taskstatus();
  inline ::std::string* release_taskstatus();
  
  // optional bool published = 14;
  inline bool has_published() const;
  inline void clear_published();
  static const int kPublishedFieldNumber = 14;
  inline bool published() const;
  inline void set_published(bool value);
  
  // repeated string tags = 15;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 15;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const char* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();
  
  // @@protoc_insertion_point(class_scope:Task)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_projectid();
  inline void clear_has_projectid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_wordcount();
  inline void clear_has_wordcount();
  inline void set_has_createdtime();
  inline void clear_has_createdtime();
  inline void set_has_sourcelanguageid();
  inline void clear_has_sourcelanguageid();
  inline void set_has_targetlanguageid();
  inline void clear_has_targetlanguageid();
  inline void set_has_sourcecountryid();
  inline void clear_has_sourcecountryid();
  inline void set_has_targetcountryid();
  inline void clear_has_targetcountryid();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_taskstatus();
  inline void clear_has_taskstatus();
  inline void set_has_published();
  inline void clear_has_published();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 projectid_;
  ::std::string* title_;
  ::std::string* comment_;
  ::std::string* deadline_;
  ::std::string* createdtime_;
  ::google::protobuf::int32 wordcount_;
  ::google::protobuf::int32 sourcelanguageid_;
  ::google::protobuf::int32 targetlanguageid_;
  ::google::protobuf::int32 sourcecountryid_;
  ::std::string* tasktype_;
  ::google::protobuf::int32 targetcountryid_;
  bool published_;
  ::std::string* taskstatus_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();
  
  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// required int32 id = 1;
inline bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Task::id() const {
  return id_;
}
inline void Task::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 projectId = 2;
inline bool Task::has_projectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_projectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_projectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_projectid() {
  projectid_ = 0;
  clear_has_projectid();
}
inline ::google::protobuf::int32 Task::projectid() const {
  return projectid_;
}
inline void Task::set_projectid(::google::protobuf::int32 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional string title = 3;
inline bool Task::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Task::title() const {
  return *title_;
}
inline void Task::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Task::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Task::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Task::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string comment = 4;
inline bool Task::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Task::comment() const {
  return *comment_;
}
inline void Task::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Task::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void Task::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* Task::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deadline = 5;
inline bool Task::has_deadline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_deadline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_deadline() {
  if (deadline_ != &::google::protobuf::internal::kEmptyString) {
    deadline_->clear();
  }
  clear_has_deadline();
}
inline const ::std::string& Task::deadline() const {
  return *deadline_;
}
inline void Task::set_deadline(const ::std::string& value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void Task::set_deadline(const char* value) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(value);
}
inline void Task::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  deadline_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_deadline() {
  set_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    deadline_ = new ::std::string;
  }
  return deadline_;
}
inline ::std::string* Task::release_deadline() {
  clear_has_deadline();
  if (deadline_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deadline_;
    deadline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 wordCount = 6;
inline bool Task::has_wordcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_wordcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_wordcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_wordcount() {
  wordcount_ = 0;
  clear_has_wordcount();
}
inline ::google::protobuf::int32 Task::wordcount() const {
  return wordcount_;
}
inline void Task::set_wordcount(::google::protobuf::int32 value) {
  set_has_wordcount();
  wordcount_ = value;
}

// optional string createdTime = 7;
inline bool Task::has_createdtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_createdtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_createdtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_createdtime() {
  if (createdtime_ != &::google::protobuf::internal::kEmptyString) {
    createdtime_->clear();
  }
  clear_has_createdtime();
}
inline const ::std::string& Task::createdtime() const {
  return *createdtime_;
}
inline void Task::set_createdtime(const ::std::string& value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void Task::set_createdtime(const char* value) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(value);
}
inline void Task::set_createdtime(const char* value, size_t size) {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  createdtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_createdtime() {
  set_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    createdtime_ = new ::std::string;
  }
  return createdtime_;
}
inline ::std::string* Task::release_createdtime() {
  clear_has_createdtime();
  if (createdtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdtime_;
    createdtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sourceLanguageId = 8;
inline bool Task::has_sourcelanguageid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Task::set_has_sourcelanguageid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Task::clear_has_sourcelanguageid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Task::clear_sourcelanguageid() {
  sourcelanguageid_ = 0;
  clear_has_sourcelanguageid();
}
inline ::google::protobuf::int32 Task::sourcelanguageid() const {
  return sourcelanguageid_;
}
inline void Task::set_sourcelanguageid(::google::protobuf::int32 value) {
  set_has_sourcelanguageid();
  sourcelanguageid_ = value;
}

// optional int32 targetLanguageId = 9;
inline bool Task::has_targetlanguageid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Task::set_has_targetlanguageid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Task::clear_has_targetlanguageid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Task::clear_targetlanguageid() {
  targetlanguageid_ = 0;
  clear_has_targetlanguageid();
}
inline ::google::protobuf::int32 Task::targetlanguageid() const {
  return targetlanguageid_;
}
inline void Task::set_targetlanguageid(::google::protobuf::int32 value) {
  set_has_targetlanguageid();
  targetlanguageid_ = value;
}

// optional int32 sourceCountryId = 10;
inline bool Task::has_sourcecountryid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Task::set_has_sourcecountryid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Task::clear_has_sourcecountryid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Task::clear_sourcecountryid() {
  sourcecountryid_ = 0;
  clear_has_sourcecountryid();
}
inline ::google::protobuf::int32 Task::sourcecountryid() const {
  return sourcecountryid_;
}
inline void Task::set_sourcecountryid(::google::protobuf::int32 value) {
  set_has_sourcecountryid();
  sourcecountryid_ = value;
}

// optional int32 targetCountryId = 11;
inline bool Task::has_targetcountryid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Task::set_has_targetcountryid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Task::clear_has_targetcountryid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Task::clear_targetcountryid() {
  targetcountryid_ = 0;
  clear_has_targetcountryid();
}
inline ::google::protobuf::int32 Task::targetcountryid() const {
  return targetcountryid_;
}
inline void Task::set_targetcountryid(::google::protobuf::int32 value) {
  set_has_targetcountryid();
  targetcountryid_ = value;
}

// optional string taskType = 12;
inline bool Task::has_tasktype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Task::set_has_tasktype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Task::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Task::clear_tasktype() {
  if (tasktype_ != &::google::protobuf::internal::kEmptyString) {
    tasktype_->clear();
  }
  clear_has_tasktype();
}
inline const ::std::string& Task::tasktype() const {
  return *tasktype_;
}
inline void Task::set_tasktype(const ::std::string& value) {
  set_has_tasktype();
  if (tasktype_ == &::google::protobuf::internal::kEmptyString) {
    tasktype_ = new ::std::string;
  }
  tasktype_->assign(value);
}
inline void Task::set_tasktype(const char* value) {
  set_has_tasktype();
  if (tasktype_ == &::google::protobuf::internal::kEmptyString) {
    tasktype_ = new ::std::string;
  }
  tasktype_->assign(value);
}
inline void Task::set_tasktype(const char* value, size_t size) {
  set_has_tasktype();
  if (tasktype_ == &::google::protobuf::internal::kEmptyString) {
    tasktype_ = new ::std::string;
  }
  tasktype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_tasktype() {
  set_has_tasktype();
  if (tasktype_ == &::google::protobuf::internal::kEmptyString) {
    tasktype_ = new ::std::string;
  }
  return tasktype_;
}
inline ::std::string* Task::release_tasktype() {
  clear_has_tasktype();
  if (tasktype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tasktype_;
    tasktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string taskStatus = 13;
inline bool Task::has_taskstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Task::set_has_taskstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Task::clear_has_taskstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Task::clear_taskstatus() {
  if (taskstatus_ != &::google::protobuf::internal::kEmptyString) {
    taskstatus_->clear();
  }
  clear_has_taskstatus();
}
inline const ::std::string& Task::taskstatus() const {
  return *taskstatus_;
}
inline void Task::set_taskstatus(const ::std::string& value) {
  set_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    taskstatus_ = new ::std::string;
  }
  taskstatus_->assign(value);
}
inline void Task::set_taskstatus(const char* value) {
  set_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    taskstatus_ = new ::std::string;
  }
  taskstatus_->assign(value);
}
inline void Task::set_taskstatus(const char* value, size_t size) {
  set_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    taskstatus_ = new ::std::string;
  }
  taskstatus_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_taskstatus() {
  set_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    taskstatus_ = new ::std::string;
  }
  return taskstatus_;
}
inline ::std::string* Task::release_taskstatus() {
  clear_has_taskstatus();
  if (taskstatus_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskstatus_;
    taskstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool published = 14;
inline bool Task::has_published() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Task::set_has_published() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Task::clear_has_published() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Task::clear_published() {
  published_ = false;
  clear_has_published();
}
inline bool Task::published() const {
  return published_;
}
inline void Task::set_published(bool value) {
  set_has_published();
  published_ = value;
}

// repeated string tags = 15;
inline int Task::tags_size() const {
  return tags_.size();
}
inline void Task::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Task::tags(int index) const {
  return tags_.Get(index);
}
inline ::std::string* Task::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline void Task::set_tags(int index, const ::std::string& value) {
  tags_.Mutable(index)->assign(value);
}
inline void Task::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
}
inline void Task::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::add_tags() {
  return tags_.Add();
}
inline void Task::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
}
inline void Task::add_tags(const char* value) {
  tags_.Add()->assign(value);
}
inline void Task::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Task::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Task::mutable_tags() {
  return &tags_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Task_2eproto__INCLUDED
